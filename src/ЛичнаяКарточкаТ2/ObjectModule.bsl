Функция ПолучитьТаблицуКоманд()
	
	Команды = Новый ТаблицаЗначений;
	// Как будет выглядеть описание печатной формы для пользователя
	Команды.Колонки.Добавить("Представление", Новый ОписаниеТипов("Строка"));
	// Имя нашего макета, что бы могли отличить вызванную команду в обработке печати
	Команды.Колонки.Добавить("Идентификатор", Новый ОписаниеТипов("Строка"));
	// Тут задается, как должна вызваться команда обработки
	// Возможные варианты:
	// - ОткрытиеФормы - в этом случае в колонке идентификатор должно быть указано имя формы, которое должна будет открыть система
	// - ВызовКлиентскогоМетода - вызвать клиентскую экспортную процедуру из модуля формы обработки
	// - ВызовСерверногоМетода - вызвать серверную экспортную процедуру из модуля объекта обработки
	Команды.Колонки.Добавить("Использование", Новый ОписаниеТипов("Строка"));
	// Следующий параметр указывает, необходимо ли показывать оповещение при начале и завершению работы обработки. Не имеет смысла при открытии формы
	Команды.Колонки.Добавить("ПоказыватьОповещение", Новый ОписаниеТипов("Булево"));
	// Для печатной формы должен содержать строку ПечатьMXL 
	Команды.Колонки.Добавить("Модификатор", Новый ОписаниеТипов("Строка"));
	
	Возврат Команды;
	
КонецФункции

//Создает в таблице команд новую строку

Функция ДобавитьКоманду(ТаблицаКоманд, Представление, Идентификатор, Использование, ПоказыватьОповещение = Ложь, Модификатор = "")
	НоваяКоманда = ТаблицаКоманд.Добавить();
	НоваяКоманда. Представление = Представление;
	НоваяКоманда. Идентификатор= Идентификатор;
	НоваяКоманда. Использование= Использование;
	НоваяКоманда. ПоказыватьОповещение= ПоказыватьОповещение;
	НоваяКоманда. Модификатор= Модификатор;
КонецФункции

Функция СведенияОВнешнейОбработке() Экспорт
	ПараметрыРегистрации = Новый Структура;
	МассивНазначений = Новый Массив;
	МассивНазначений.Добавить("Справочник.Сотрудники");
	ПараметрыРегистрации.Вставить("Вид", "ПечатнаяФорма"); //может быть - ЗаполнениеОбъекта, ДополнительныйОтчет, СозданиеСвязанныхОбъектов... 
	ПараметрыРегистрации.Вставить("Назначение", МассивНазначений);
	ПараметрыРегистрации.Вставить("Наименование", " Личная карточка Т-2 "); //имя под которым обработка будет зарегестрирована в справочнике внешних обработок
	ПараметрыРегистрации.Вставить("Версия", "1.0");
	ПараметрыРегистрации.Вставить("БезопасныйРежим", Ложь);
	ПараметрыРегистрации.Вставить("Информация", " Личная карточка Т-2(внеш) ");//так будет выглядеть описание печ.формы для пользователя
	ТаблицаКоманд = ПолучитьТаблицуКоманд();
	ДобавитьКоманду(ТаблицаКоманд, "ППФ Личная карточка (Т-2)", "ПФ_MXL_Т2", "ВызовСерверногоМетода", Истина);
	ПараметрыРегистрации.Вставить("Команды", ТаблицаКоманд);
	Возврат ПараметрыРегистрации;
КонецФункции

Процедура Печать(МассивОбъектов, КоллекцияПечатныхФорм, ОбъектыПечати, ПараметрыВывода) Экспорт
	
	КоллекцияПечатныхФорм = УправлениеПечатью.ПодготовитьКоллекциюПечатныхФорм("ПФ_MXL_Т2");
	
	УправлениеПечатью.ВывестиТабличныйДокументВКоллекцию(КоллекцияПечатныхФорм,
	"ПФ_MXL_Т2", "Личная карточка Т-2",	ПечататьЛичнуюКарточкуТ2(МассивОбъектов));
	
КонецПроцедуры

Функция ПечататьЛичнуюКарточкуТ2(МассивОбъектов)
	
	ДокументРезультат = Новый ТабличныйДокумент;
	
	Отчет = Отчеты.УнифицированнаяФормаТ2.Создать();
	
	СтруктураВариантов = Новый Структура;
	пВарианты = Отчет.СхемаКомпоновкиДанных.ВариантыНастроек;
	Для Каждого пЭл ИЗ пВарианты Цикл
		СтруктураВариантов.Вставить(пЭл.Имя,пЭл.Настройки);
	КонецЦикла;
	
	ЗарплатаКадрыОбщиеНаборыДанных.ЗаполнитьОбщиеИсточникиДанныхОтчета(Отчет);
	
	Отчет.КомпоновщикНастроек.ЗагрузитьНастройки(СтруктураВариантов.Т2);
	
	КлючВарианта = "Т2";
	
	Попытка
			
			СтандартнаяОбработка = Ложь;
			
			// Параметры документа
			ДокументРезультат.ТолькоПросмотр = Истина;
			ДокументРезультат.ИмяПараметровПечати = "ПАРАМЕТРЫ_ПЕЧАТИ_УнифицированнаяФормаТ2";
			ДокументРезультат.ОриентацияСтраницы = ОриентацияСтраницы.Портрет;
			ДокументРезультат.Очистить();
			ДокументРезультат.АвтоМасштаб = Истина;
			ДокументРезультат.НачатьАвтогруппировкуСтрок();
			
			НастройкиОтчета = Отчет.КомпоновщикНастроек.ПолучитьНастройки();
			НастройкиОтчета.Выбор.Элементы.Очистить();
			СоответствиеПользовательскихПолей = ЗарплатаКадрыОтчеты.СоответствиеПользовательскихПолей(НастройкиОтчета);
			ПроверитьЗначенияПараметров(НастройкиОтчета, Истина);
			
			сч= НастройкиОтчета.Отбор.Элементы.Количество()-1;
			Пока сч>=0 Цикл 
				ОтборОтчета =  НастройкиОтчета.Отбор.Элементы[сч];
				Если ТипЗнч(ОтборОтчета) = Тип("ЭлементОтбораКомпоновкиДанных") И ОтборОтчета.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("РабочееМесто.Сотрудник") Тогда 
					ОтборОтчета.ПравоеЗначение = МассивОбъектов;
					ОтборОтчета.Использование = Истина;
				Иначе 
					НастройкиОтчета.Отбор.Элементы.Удалить(ОтборОтчета);
				КонецЕсли;				
				сч=сч-1;
			КонецЦикла;
			
			ЗначениеПараметра = НастройкиОтчета.ПараметрыДанных.НайтиЗначениеПараметра(Новый ПараметрКомпоновкиДанных("Период"));
			Если ТипЗнч(ЗначениеПараметра.Значение) = Тип("СтандартнаяДатаНачала") Тогда
				ДатаОтчета = ЗначениеПараметра.Значение.Дата;
			Иначе
				ДатаОтчета = ЗначениеПараметра.Значение;
			КонецЕсли;
			
			РаботникКадровойСлужбыРасшифровкаПодписи = "";
			ЗначениеПараметра = НастройкиОтчета.ПараметрыДанных.НайтиЗначениеПараметра(Новый ПараметрКомпоновкиДанных("РаботникКадровойСлужбы"));
			Если ЗначениеПараметра <> Неопределено
				И ЗначениеЗаполнено(ЗначениеПараметра.Значение) Тогда
				
				КадровыеДанные = КадровыйУчет.КадровыеДанныеФизическихЛиц(Истина, ЗначениеПараметра.Значение, "ИОФамилия", ДатаОтчета);
				Если КадровыеДанные.Количество() > 0 Тогда
					РаботникКадровойСлужбыРасшифровкаПодписи = КадровыеДанные[0].ИОФамилия;
				КонецЕсли; 
				
			КонецЕсли; 
			
			Если Не ЗначениеЗаполнено(РаботникКадровойСлужбыРасшифровкаПодписи) Тогда 
				ЗапросПоОЛ = Новый Запрос;
				ЗапросПоОЛ.Текст = "ВЫБРАТЬ
				                   |	СведенияОбОтветственныхЛицахСрезПоследних.РуководительКадровойСлужбы,
				                   |	СведенияОбОтветственныхЛицахСрезПоследних.ДолжностьРуководителяКадровойСлужбы,
				                   |	ФИОФизическихЛицСрезПоследних.Фамилия,
				                   |	ФИОФизическихЛицСрезПоследних.Имя,
				                   |	ФИОФизическихЛицСрезПоследних.Отчество
				                   |ИЗ
				                   |	РегистрСведений.СведенияОбОтветственныхЛицах.СрезПоследних(&Дата, ) КАК СведенияОбОтветственныхЛицахСрезПоследних
				                   |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ФИОФизическихЛиц.СрезПоследних(&Дата, ) КАК ФИОФизическихЛицСрезПоследних
				                   |		ПО СведенияОбОтветственныхЛицахСрезПоследних.РуководительКадровойСлужбы = ФИОФизическихЛицСрезПоследних.ФизическоеЛицо";
				ЗапросПоОЛ.УстановитьПараметр("Дата",ТекущаяДата());								   
				РезультатПоОЛ = ЗапросПоОЛ.Выполнить();
				ВыборкаПоОЛ = РезультатПоОЛ.Выбрать();
				
				Пока ВыборкаПоОЛ.Следующий() Цикл 
					РаботникКадровойСлужбыРасшифровкаПодписи = Лев(ВыборкаПоОЛ.Имя,1) + "."+ Лев(ВыборкаПоОЛ.Отчество,1)+"."+ВыборкаПоОЛ.Фамилия;
					ДолжностьРуководителяКадровойСлужбы = ВыборкаПоОЛ.ДолжностьРуководителяКадровойСлужбы;
				КонецЦикла;
				
			КонецЕсли;
						
			Отчет.КомпоновщикНастроек.ЗагрузитьНастройки(НастройкиОтчета);	
			
			Данные = Новый ДеревоЗначений;
			
			КомпоновщикМакета = Новый КомпоновщикМакетаКомпоновкиДанных;
			МакетКомпоновки = КомпоновщикМакета.Выполнить(Отчет.СхемаКомпоновкиДанных, НастройкиОтчета,,, Тип("ГенераторМакетаКомпоновкиДанныхДляКоллекцииЗначений"));
			
			// Создадим и инициализируем процессор компоновки.
			ПроцессорКомпоновки = Новый ПроцессорКомпоновкиДанных;
			ПроцессорКомпоновки.Инициализировать(МакетКомпоновки, , , Истина);
			
			ПроцессорВывода = Новый ПроцессорВыводаРезультатаКомпоновкиДанныхВКоллекциюЗначений;
			ПроцессорВывода.УстановитьОбъект(Данные);
			
			// Обозначим начало вывода
			ПроцессорВывода.Вывести(ПроцессорКомпоновки, Истина);
			
			Группировки = ЗарплатаКадрыОтчеты.ПолучитьПоляГруппировок(Отчет.КомпоновщикНастроек);			
			
			//// Текущее образование получает некорректно. 
			//Запрос = Новый Запрос;
			//Запрос.Текст = "ВЫБРАТЬ ПЕРВЫЕ 1
			//               |	ОбразованиеФизическихЛиц.ВидОбразования КАК ВидОбразования,
			//               |	ОбразованиеФизическихЛиц.ВидДокумента,
			//               |	ОбразованиеФизическихЛиц.Квалификация,
			//               |	ОбразованиеФизическихЛиц.Номер,
			//               |	ОбразованиеФизическихЛиц.Окончание,
			//               |	ОбразованиеФизическихЛиц.Серия,
			//               |	ОбразованиеФизическихЛиц.Специальность,
			//               |	ОбразованиеФизическихЛиц.Специальность.Код КАК СпециальностьКод,
			//               |	ОбразованиеФизическихЛиц.УчебноеЗаведение
			//               |ИЗ
			//               |	Справочник.ОбразованиеФизическихЛиц КАК ОбразованиеФизическихЛиц
			//               |ГДЕ
			//               |	ОбразованиеФизическихЛиц.Владелец = &Владелец
			//               |
			//               |УПОРЯДОЧИТЬ ПО
			//               |	ОбразованиеФизическихЛиц.Окончание УБЫВ";
			//Запрос.УстановитьПараметр("Владелец",МассивОбъектов[0].ФизическоеЛицо);
			//Выборка = Запрос.Выполнить().Выбрать();
			//
			//Если Выборка.Следующий() Тогда 
			//	Если ТипЗнч(Данные) = Тип("ДеревоЗначений") Тогда 
			//		Для Каждого СтрокаДанных Из Данные.Строки Цикл 
			//			СтрокаДанных.ЛичныеДанныеОбразованияОбразование = Выборка.ВидОбразования;
			//			Если Не ЗначениеЗаполнено(СтрокаДанных.ЛичныеДанныеОбразованияОбразование1ВидДокумента) Тогда 
			//				СтрокаДанных.ЛичныеДанныеОбразованияОбразование1ВидДокумента = Выборка.ВидДокумента;
			//			КонецЕсли;
			//			Если Не ЗначениеЗаполнено(СтрокаДанных.ЛичныеДанныеОбразованияОбразование1ВидОбразования) Тогда 
			//				СтрокаДанных.ЛичныеДанныеОбразованияОбразование1ВидОбразования = Выборка.ВидОбразования;
			//			КонецЕсли;
			//			Если Не ЗначениеЗаполнено(СтрокаДанных.ЛичныеДанныеОбразованияОбразование1Квалификация) Тогда 
			//				СтрокаДанных.ЛичныеДанныеОбразованияОбразование1Квалификация = Выборка.Квалификация;
			//			КонецЕсли;
			//			Если Не ЗначениеЗаполнено(СтрокаДанных.ЛичныеДанныеОбразованияОбразование1Номер) Тогда 
			//				СтрокаДанных.ЛичныеДанныеОбразованияОбразование1Номер = Выборка.Номер;
			//			КонецЕсли;
			//			Если Не ЗначениеЗаполнено(СтрокаДанных.ЛичныеДанныеОбразованияОбразование1Окончание) Тогда 
			//				СтрокаДанных.ЛичныеДанныеОбразованияОбразование1Окончание = Выборка.Окончание;
			//			КонецЕсли;
			//			Если Не ЗначениеЗаполнено(СтрокаДанных.ЛичныеДанныеОбразованияОбразование1Серия) Тогда 
			//				СтрокаДанных.ЛичныеДанныеОбразованияОбразование1Серия = Выборка.Серия;
			//			КонецЕсли;
			//			Если Не ЗначениеЗаполнено(СтрокаДанных.ЛичныеДанныеОбразованияОбразование1Специальность) Тогда 
			//				СтрокаДанных.ЛичныеДанныеОбразованияОбразование1Специальность = Выборка.Специальность;
			//			КонецЕсли;                                        
			//			Если Не ЗначениеЗаполнено(СтрокаДанных.ЛичныеДанныеОбразованияОбразование1СпециальностьКод) Тогда 
			//				СтрокаДанных.ЛичныеДанныеОбразованияОбразование1СпециальностьКод = Выборка.СпециальностьКод;
			//			КонецЕсли;
			//			Если Не ЗначениеЗаполнено(СтрокаДанных.ЛичныеДанныеОбразованияОбразование1УчебноеЗаведение) Тогда 
			//				СтрокаДанных.ЛичныеДанныеОбразованияОбразование1УчебноеЗаведение = Выборка.УчебноеЗаведение;
			//			КонецЕсли; 						
			//		КонецЦикла;
			//	КонецЕсли; 				
			//КонецЕсли; 
			
			Запрос = Новый Запрос;
			Запрос.Текст =
			"ВЫБРАТЬ ПЕРВЫЕ 2
			|	ЗнаниеЯзыковФизическихЛиц.Язык,
			|	ЗнаниеЯзыковФизическихЛиц.СтепеньЗнанияЯзыка
			|ИЗ
			|	РегистрСведений.ЗнаниеЯзыковФизическихЛиц КАК ЗнаниеЯзыковФизическихЛиц
			|ГДЕ
			|	ЗнаниеЯзыковФизическихЛиц.ФизическоеЛицо = &ФизическоеЛицо";
			
			Запрос.УстановитьПараметр("ФизическоеЛицо",МассивОбъектов[0].ФизическоеЛицо);
			
			РезультатЯзыки = Запрос.Выполнить();
			
			Если Не РезультатЯзыки.Пустой() Тогда
				
				ВыгрузкаЯзыки = РезультатЯзыки.Выгрузить();
				Если ВыгрузкаЯзыки.Количество() = 2 Тогда
					
					Данные.Строки[0].ЛичныеДанныеВладениеЯзыкамиВладеемыйЯзык1 = ВыгрузкаЯзыки[0].Язык;
					Данные.Строки[0].ЛичныеДанныеВладениеЯзыкамиВладеемыйЯзык1Код = ВыгрузкаЯзыки[0].Язык.Код;
					Данные.Строки[0].ЛичныеДанныеВладениеЯзыкамиВладеемыйЯзык1СтепеньЗнания = ВыгрузкаЯзыки[0].СтепеньЗнанияЯзыка;
					Данные.Строки[0].ЛичныеДанныеВладениеЯзыкамиВладеемыйЯзык1СтепеньЗнанияКод = ВыгрузкаЯзыки[0].СтепеньЗнанияЯзыка.Код;
					Данные.Строки[0].ЛичныеДанныеВладениеЯзыкамиВладеемыйЯзык2 = ВыгрузкаЯзыки[1].Язык;
					Данные.Строки[0].ЛичныеДанныеВладениеЯзыкамиВладеемыйЯзык2Код = ВыгрузкаЯзыки[1].Язык.Код;
					Данные.Строки[0].ЛичныеДанныеВладениеЯзыкамиВладеемыйЯзык2СтепеньЗнания = ВыгрузкаЯзыки[1].СтепеньЗнанияЯзыка;
					Данные.Строки[0].ЛичныеДанныеВладениеЯзыкамиВладеемыйЯзык2СтепеньЗнанияКод = ВыгрузкаЯзыки[1].СтепеньЗнанияЯзыка.Код;
					
					Если ВыгрузкаЯзыки.Количество() >= 2 И Данные.Строки.Количество() >= 2 Тогда
					
						Данные.Строки[1].ЛичныеДанныеВладениеЯзыкамиВладеемыйЯзык1 = ВыгрузкаЯзыки[0].Язык;
						Данные.Строки[1].ЛичныеДанныеВладениеЯзыкамиВладеемыйЯзык1Код = ВыгрузкаЯзыки[0].Язык.Код;
						Данные.Строки[1].ЛичныеДанныеВладениеЯзыкамиВладеемыйЯзык1СтепеньЗнания = ВыгрузкаЯзыки[0].СтепеньЗнанияЯзыка;
						Данные.Строки[1].ЛичныеДанныеВладениеЯзыкамиВладеемыйЯзык1СтепеньЗнанияКод = ВыгрузкаЯзыки[0].СтепеньЗнанияЯзыка.Код;
						Данные.Строки[1].ЛичныеДанныеВладениеЯзыкамиВладеемыйЯзык2 = ВыгрузкаЯзыки[1].Язык;
						Данные.Строки[1].ЛичныеДанныеВладениеЯзыкамиВладеемыйЯзык2Код = ВыгрузкаЯзыки[1].Язык.Код;
						Данные.Строки[1].ЛичныеДанныеВладениеЯзыкамиВладеемыйЯзык2СтепеньЗнания = ВыгрузкаЯзыки[1].СтепеньЗнанияЯзыка;
						Данные.Строки[1].ЛичныеДанныеВладениеЯзыкамиВладеемыйЯзык2СтепеньЗнанияКод = ВыгрузкаЯзыки[1].СтепеньЗнанияЯзыка.Код;
						
					КонецЕсли;
		
				КонецЕсли;
				
			КонецЕсли; 
			
			Если КадровыйУчетВнутренний.ОтчетВидаКарточкаСотрудника(КлючВарианта) Тогда
				
				КадровыйУчетВнутренний.ВывестиМакетыОтчетовПоСотрудникам(КлючВарианта, ДокументРезультат, Данные, Группировки, ДатаОтчета, СоответствиеПользовательскихПолей, РаботникКадровойСлужбыРасшифровкаПодписи);
				
			Иначе
				ВывестиМакетыСГруппировкамиT2(Отчет, ДокументРезультат, Данные, Группировки, ДатаОтчета, СоответствиеПользовательскихПолей, РаботникКадровойСлужбыРасшифровкаПодписи, ДолжностьРуководителяКадровойСлужбы, ,МассивОбъектов);
			КонецЕсли;
			
			ДокументРезультат.ЗакончитьАвтогруппировкуСтрок();
			
		Исключение
			Инфо = ИнформацияОбОшибке();
			ВызватьИсключение НСтр("ru = 'В настройку отчета внесены критичные изменения. Отчет не будет сформирован.'") + " " + Инфо.Описание;
		КонецПопытки;
		
		Возврат ДокументРезультат;

	
КонецФункции

////////////////////////////////////////////////////////////////////////////////
// Универсальные процедуры и Функции.

Процедура ПроверитьЗначенияПараметров(НастройкиОтчета, ВыводитьПодписантов = Ложь)
	
	ЗначениеПараметра = НастройкиОтчета.ПараметрыДанных.НайтиЗначениеПараметра(Новый ПараметрКомпоновкиДанных("Период"));

	Если ЗначениеПараметра <> Неопределено Тогда
		
		УстановитьДатуОтчета = Ложь;
		Если ТипЗнч(ЗначениеПараметра.Значение) = Тип("Неопределено") Тогда
			УстановитьДатуОтчета = Истина;
		КонецЕсли;
		
		Если ТипЗнч(ЗначениеПараметра.Значение) = Тип("Дата")
			И ЗначениеПараметра.Значение = '00010101' Тогда
			УстановитьДатуОтчета = Истина;
		КонецЕсли; 
		
		Если ТипЗнч(ЗначениеПараметра.Значение) = Тип("СтандартнаяДатаНачала")
			И Дата(ЗначениеПараметра.Значение) = '00010101' Тогда
			УстановитьДатуОтчета = Истина;
		КонецЕсли; 
		
		Если УстановитьДатуОтчета Тогда
			ЗначениеПараметра.Значение = ТекущаяДатаСеанса();
		КонецЕсли; 
		
	КонецЕсли;
	
	Если ВыводитьПодписантов Тогда
		
		ЗначениеПараметра = НастройкиОтчета.ПараметрыДанных.НайтиЗначениеПараметра(Новый ПараметрКомпоновкиДанных("РаботникКадровойСлужбы"));
		Если НЕ ЗначениеПараметра.Использование Тогда
			ЗначениеПараметра.Значение = Неопределено;
		КонецЕсли; 
		ЗначениеПараметра.Использование = Истина;
		
		ЗначениеПараметра = НастройкиОтчета.ПараметрыДанных.НайтиЗначениеПараметра(Новый ПараметрКомпоновкиДанных("ДолжностьРаботникаКадровойСлужбы"));
		Если НЕ ЗначениеПараметра.Использование Тогда
			ЗначениеПараметра.Значение = Неопределено;
		КонецЕсли; 
		ЗначениеПараметра.Использование = Истина;
			
	КонецЕсли;
	
КонецПроцедуры


Процедура ВывестиМакетыСГруппировкамиT2(Отчет, ДокументРезультат, Данные, Группировки, ДатаОтчета, СоответствиеПользовательскихПолей, РаботникКадровойСлужбыРасшифровкаПодписи, ДолжностьРуководителяКадровойСлужбы,КлючВарианта=Неопределено, МассивОбъектов)
	
	Если Группировки.Количество() > 0 Тогда
	
		Для Каждого СтрокаДанных Из Данные.Строки Цикл
		
			ПолеДанных = Группировки[0].Значение;
			ВывестиГруппировкуT2(Отчет, ДокументРезультат, СтрокаДанных, ПолеДанных, 0, СоответствиеПользовательскихПолей);
			ВывестиВложенныеГруппировкиСМакетамиT2(Отчет, ДокументРезультат, СтрокаДанных, Группировки, 1, ДатаОтчета, СоответствиеПользовательскихПолей, РаботникКадровойСлужбыРасшифровкаПодписи, КлючВарианта);
		
		КонецЦикла;
		
	Иначе
		
		ДополнительныеСведения = КадровыйУчет.ДополнительныеСведенияУнифицированнойФормыТ2(Данные.Строки, ДатаОтчета, КлючВарианта);
		ДанныеЗаполненияКадровойИстории = ПолучитьДанныеКадровойИстории(МассивОбъектов[0]);
		ДополнительныеСведения["ДанныеЗаполненияКадровойИстории"][МассивОбъектов[0]] = ДанныеЗаполненияКадровойИстории;
		
		Языки = Новый Массив();
		
		Если Данные.Строки.Количество()>1 Тогда 
			Данные.Колонки.Добавить("ЛичныеДанныеОбразованияОбразование1");           
			ПредыдущееОбразование = Данные.Строки[0].ЛичныеДанныеОбразованияОбразование;
			сч=0;
			Для Каждого СтрокаДанных Из Данные.Строки Цикл
				ТекущееОбразование = СтрокаДанных.ЛичныеДанныеОбразованияОбразование; 
				Если ТекущееОбразование <> ПредыдущееОбразование Тогда 
					Данные.Строки[0].ЛичныеДанныеОбразованияОбразование1 = ""+Данные.Строки[0].ЛичныеДанныеОбразованияОбразование + ","+ТекущееОбразование;
					Данные.Строки[0].ЛичныеДанныеОбразованияОбразование2УчебноеЗаведение = СтрокаДанных.ЛичныеДанныеОбразованияОбразование1УчебноеЗаведение;
					Данные.Строки[0].ЛичныеДанныеОбразованияОбразование2ВидДокумента     = СтрокаДанных.ЛичныеДанныеОбразованияОбразование1ВидДокумента;
					Данные.Строки[0].ЛичныеДанныеОбразованияОбразование2Серия			 = СтрокаДанных.ЛичныеДанныеОбразованияОбразование1Серия;
					Данные.Строки[0].ЛичныеДанныеОбразованияОбразование2Номер            = СтрокаДанных.ЛичныеДанныеОбразованияОбразование1Номер;
					Данные.Строки[0].ЛичныеДанныеОбразованияОбразование2Окончание	     = СтрокаДанных.ЛичныеДанныеОбразованияОбразование1Окончание;
					Данные.Строки[0].ЛичныеДанныеОбразованияОбразование2Квалификация	 = СтрокаДанных.ЛичныеДанныеОбразованияОбразование1Квалификация;
					Данные.Строки[0].ЛичныеДанныеОбразованияОбразование2Специальность	 = СтрокаДанных.ЛичныеДанныеОбразованияОбразование1Специальность;					
				КонецЕсли;
				ПредыдущееОбразование = ТекущееОбразование; 
				сч=сч+1;
			КонецЦикла;
			
			КоличествоСтрок = Данные.Строки.Количество()-1;
			Пока КоличествоСтрок>0 Цикл 
				Данные.Строки.Удалить(Данные.Строки[КоличествоСтрок]);
				КоличествоСтрок = КоличествоСтрок - 1;
			КонецЦикла;
			
			Данные.Колонки.Удалить("ЛичныеДанныеОбразованияОбразование");
			Данные.Колонки.Добавить("ЛичныеДанныеОбразованияОбразование");
			
			Для Каждого СтрокаДанных Из Данные.Строки Цикл 
				СтрокаДанных.ЛичныеДанныеОбразованияОбразование = СтрокаДанных.ЛичныеДанныеОбразованияОбразование1;
			КонецЦикла;
		
		КонецЕсли;
				
		Для Каждого СтрокаДанных Из Данные.Строки Цикл
			
			ВывестиМакетT2(ДокументРезультат, СтрокаДанных, 0, ДатаОтчета, ДополнительныеСведения, СоответствиеПользовательскихПолей, РаботникКадровойСлужбыРасшифровкаПодписи, ДолжностьРуководителяКадровойСлужбы);
			
			Если СтрокаДанных <> Данные.Строки.Получить(Данные.Строки.Количество() - 1) Тогда
				ДокументРезультат.ВывестиГоризонтальныйРазделительСтраниц();
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЕсли;
	
КонецПроцедуры

Функция ПолучитьДанныеКадровойИстории(Сотрудник)
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	               |	ПриемНаРаботуПоказатели.Ссылка.Сотрудник КАК Сотрудник,
	               |	ПриемНаРаботуПоказатели.Ссылка.Должность КАК ДолжностьПеревода,
	               |	НАЧАЛОПЕРИОДА(ПриемНаРаботуПоказатели.Ссылка.Дата, ДЕНЬ) КАК Дата,
	               |	ПриемНаРаботуПоказатели.Ссылка.Подразделение КАК ПодразделениеПеревода,
	               |	ПриемНаРаботуПоказатели.Ссылка.Номер КАК НомерПриказа,
	               |	ПриемНаРаботуПоказатели.Ссылка.Дата КАК ДатаПриказа,
	               |	ПриемНаРаботуПоказатели.Значение КАК ТарифнаяСтавка,
	               |	ПриемНаРаботуПоказатели.Ссылка.ДатаПриема КАК ДатаПеревода
	               |ИЗ
	               |	Документ.ПриемНаРаботу.Показатели КАК ПриемНаРаботуПоказатели
	               |ГДЕ
	               |	ПриемНаРаботуПоказатели.Ссылка.Проведен = ИСТИНА
	               |	И ПриемНаРаботуПоказатели.Показатель = ЗНАЧЕНИЕ(Справочник.ПоказателиРасчетаЗарплаты.Оклад)
	               |	И ПриемНаРаботуПоказатели.Ссылка.Сотрудник = &Сотрудник
	               |
	               |ОБЪЕДИНИТЬ ВСЕ
	               |
	               |ВЫБРАТЬ
	               |	КадровыйПереводПоказатели.Ссылка.Сотрудник,
	               |	КадровыйПереводПоказатели.Ссылка.Должность,
	               |	НАЧАЛОПЕРИОДА(КадровыйПереводПоказатели.Ссылка.Дата, ДЕНЬ),
	               |	КадровыйПереводПоказатели.Ссылка.Подразделение,
	               |	КадровыйПереводПоказатели.Ссылка.Номер,
	               |	КадровыйПереводПоказатели.Ссылка.Дата,
	               |	КадровыйПереводПоказатели.Значение,
	               |	КадровыйПереводПоказатели.Ссылка.ДатаНачала
	               |ИЗ
	               |	Документ.КадровыйПеревод.Показатели КАК КадровыйПереводПоказатели
	               |ГДЕ
	               |	КадровыйПереводПоказатели.Ссылка.Сотрудник = &Сотрудник
	               |	И КадровыйПереводПоказатели.Ссылка.Проведен = ИСТИНА
	               |	И КадровыйПереводПоказатели.Показатель = ЗНАЧЕНИЕ(Справочник.ПоказателиРасчетаЗарплаты.Оклад)
	               |
	               |ОБЪЕДИНИТЬ ВСЕ
	               |
	               |ВЫБРАТЬ
	               |	КадровыйПереводСпискомСотрудники.Сотрудник,
	               |	КадровыйПереводСпискомСотрудники.Должность,
	               |	НАЧАЛОПЕРИОДА(КадровыйПереводСпискомСотрудники.ДатаНачала, ДЕНЬ),
	               |	КадровыйПереводСпискомСотрудники.Подразделение,
	               |	КадровыйПереводСпискомСотрудники.Ссылка.Номер,
	               |	КадровыйПереводСпискомСотрудники.Ссылка.Дата,
	               |	КадровыйПереводСпискомПоказатели.Значение,
	               |	КадровыйПереводСпискомСотрудники.ДатаНачала
	               |ИЗ
	               |	Документ.КадровыйПереводСписком.Сотрудники КАК КадровыйПереводСпискомСотрудники
	               |		ЛЕВОЕ СОЕДИНЕНИЕ Документ.КадровыйПереводСписком.Показатели КАК КадровыйПереводСпискомПоказатели
	               |		ПО КадровыйПереводСпискомСотрудники.Ссылка = КадровыйПереводСпискомПоказатели.Ссылка
	               |			И КадровыйПереводСпискомСотрудники.ИдентификаторСтрокиСотрудника = КадровыйПереводСпискомПоказатели.ИдентификаторСтрокиСотрудника
	               |ГДЕ
	               |	КадровыйПереводСпискомСотрудники.Сотрудник = &Сотрудник
	               |	И КадровыйПереводСпискомСотрудники.Ссылка.Проведен = ИСТИНА
	               |	И КадровыйПереводСпискомПоказатели.Показатель = ЗНАЧЕНИЕ(Справочник.ПоказателиРасчетаЗарплаты.Оклад)
	               |
	               |УПОРЯДОЧИТЬ ПО
	               |	ДатаПеревода";
	Запрос.УстановитьПараметр("Сотрудник",Сотрудник);				   
	Результат = ЗАпрос.Выполнить();
	Если Не Результат.Пустой() Тогда 
		МассивДанных = Новый Массив;
		Выборка = Результат.Выбрать();
		Пока Выборка.Следующий() Цикл 
			Структура = Новый Структура;
			Структура.Вставить("ДатаПеревода",			Выборка.ДатаПеревода);
			Структура.Вставить("ДолжностьПеревода",		Выборка.ДолжностьПеревода);
			Структура.Вставить("ОснованиеПеревода",		?(ЗначениеЗаполнено(Выборка.НомерПриказа),"Пр. № " + Выборка.НомерПриказа + " от " + Формат(Выборка.ДатаПриказа, "ДФ=dd.MM.yyyy" ),""));
			Структура.Вставить("ПодразделениеПеревода",	Выборка.ПодразделениеПеревода);
			Структура.Вставить("ТарифнаяСтавка",		Выборка.ТарифнаяСтавка);
			МассивДанных.Добавить(Структура);
		КонецЦикла;
		Возврат МассивДанных;
	Иначе 
		Возврат Новый Массив;
	КонецЕсли;
КонецФункции

Процедура ВывестиВложенныеГруппировкиСМакетамиT2(Отчет, ДокументРезультат, Данные, Группировки, Уровень, ДатаОтчета, СоответствиеПользовательскихПолей, РаботникКадровойСлужбыРасшифровкаПодписи, КлючВарианта)
	
	Если Группировки.Количество() > Уровень Тогда 
		
		Для Каждого СтрокаДанных Из Данные.Строки Цикл
		
			ПолеДанных = Группировки[Уровень].Значение;
			ВывестиГруппировкуT2(Отчет, ДокументРезультат, СтрокаДанных, ПолеДанных, Уровень,  СоответствиеПользовательскихПолей);
			ВывестиВложенныеГруппировкиСМакетамиT2(Отчет, ДокументРезультат, СтрокаДанных, Группировки, Уровень + 1, ДатаОтчета,  СоответствиеПользовательскихПолей, РаботникКадровойСлужбыРасшифровкаПодписи, КлючВарианта);
		
		КонецЦикла;
		
	Иначе
		
		ДополнительныеСведения = КадровыйУчет.ДополнительныеСведенияУнифицированнойФормыТ2(Данные.Строки, ДатаОтчета, КлючВарианта);
		
		Для Каждого СтрокаДанных Из Данные.Строки Цикл
			
			ВывестиМакетT2(ДокументРезультат, СтрокаДанных, Уровень, ДатаОтчета, ДополнительныеСведения,  СоответствиеПользовательскихПолей, РаботникКадровойСлужбыРасшифровкаПодписи, КлючВарианта);
			
		КонецЦикла;
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ВывестиГруппировкуT2(Отчет, ДокументРезультат, СтрокаДанных, Поле, Уровень, СоответствиеПользовательскихПолей)
	
	МакетГруппировки  = ЭтотОбъект.ПолучитьМакет("ПФ_MXL_Т2");
	ОбластьГруппировки = МакетГруппировки.ПолучитьОбласть("Группировка");
	
	ДоступноеПоле = ОтчетыКлиентСервер.ПолучитьДоступноеПоле(Отчет.КомпоновщикНастроек.Настройки.ДоступныеПоляГруппировок, Новый ПолеКомпоновкиДанных(Поле));
	
	ОбластьГруппировки.Параметры.НазваниеПараметра = ДоступноеПоле.Заголовок;
	ОбластьГруппировки.Параметры.Значение = СтрокаДанных[СтрЗаменить(Поле, ".", "")];
	
	ДокументРезультат.Вывести(ОбластьГруппировки, Уровень);
	
КонецПроцедуры 

Процедура ВывестиМакетT2(ДокументРезультат, СтрокаДанных, Уровень, ДатаОтчета, ДополнительныеСведения, СоответствиеПользовательскихПолей, РаботникКадровойСлужбыРасшифровкаПодписи, ДолжностьРуководителяКадровойСлужбы, КлючВарианта=Неопределено) 
	
	Макет = ЭтотОбъект.ПолучитьМакет("ПФ_MXL_Т2");
	
	ВыводитьФормуТ2ГС = Ложь;
	Если ОбщегоНазначения.ПодсистемаСуществует("ЗарплатаКадрыПриложения.ГосударственнаяСлужба") Тогда
		ВыводитьФормуТ2ГС = ОбщегоНазначения.ОбщийМодуль("ГосударственнаяСлужба").ЭтоВариантОтчетаТ2ГСМС(КлючВарианта);
	КонецЕсли;
	
	ПерваяСтраницаТ2Заголовок				= Макет.ПолучитьОбласть("ПерваяСтраницаТ2Заголовок");
	ПерваяСтраницаТ2						= Макет.ПолучитьОбласть("ПерваяСтраницаТ2");
	ПерваяСтраницаТ2Продолжение				= Макет.ПолучитьОбласть("ПерваяСтраницаТ2Продолжение");
	ВтораяСтраницаТ2						= Макет.ПолучитьОбласть("ВтораяСтраницаТ2");
	ВтораяСтраницаТ2Продолжение1			= Макет.ПолучитьОбласть("ВтораяСтраницаТ2Продолжение1");
	ВтораяСтраницаТ2Продолжение2			= Макет.ПолучитьОбласть("ВтораяСтраницаТ2Продолжение2");
	ТретьяСтраницаТ2						= Макет.ПолучитьОбласть("ТретьяСтраницаТ2");
	ЧетвертаяСтраницаТ2						= Макет.ПолучитьОбласть("ЧетвертаяСтраницаТ2");
	ЧетвертаяСтраницаТ2Продолжение			= Макет.ПолучитьОбласть("ЧетвертаяСтраницаТ2Продолжение");
	ЧетвертаяСтраницаТ2Продолжение2			= Макет.ПолучитьОбласть("ЧетвертаяСтраницаТ2Продолжение2");
	ШапкаСоставСемьи						= Макет.ПолучитьОбласть("ШапкаСоставСемьи");
	СтрокаСоставСемьи						= Макет.ПолучитьОбласть("СтрокаСоставСемьи");
	ЗаголовокПриемыПеремещения				= Макет.ПолучитьОбласть("ЗаголовокПриемыПеремещения");
	ШапкаПриемыПеремещения					= Макет.ПолучитьОбласть("ШапкаПриемыПеремещения");
	СтрокаПриемыПеремещения					= Макет.ПолучитьОбласть("СтрокаПриемыПеремещения");
	ПриемыПеремещенияКоличествоСтрок		= 11;
	
	КлассныеЧиныЗаголовок					= Макет.ПолучитьОбласть("КлассныеЧиныЗаголовок");
	КлассныеЧиныШапка						= Макет.ПолучитьОбласть("КлассныеЧиныШапка");
	КлассныеЧиныСтрока						= Макет.ПолучитьОбласть("КлассныеЧиныСтрока");
	КлассныеЧиныКоличествоСтрок				= 3;
	
	АттестацияЗаголовок						= Макет.ПолучитьОбласть("АттестацияЗаголовок");
	АттестацияШапка							= Макет.ПолучитьОбласть("АттестацияШапка");
	АттестацияСтрока						= Макет.ПолучитьОбласть("АттестацияСтрока");
	АттестацияКоличествоСтрок				= 3;
	
	ПовышениеКвалификацииЗаголовок			= Макет.ПолучитьОбласть("ПовышениеКвалификацииЗаголовок");
	ПовышениеКвалификацииШапка				= Макет.ПолучитьОбласть("ПовышениеКвалификацииШапка");
	ПовышениеКвалификацииСтрока				= Макет.ПолучитьОбласть("ПовышениеКвалификацииСтрока");
	ПовышениеКвалификацииКоличествоСтрок	= 3;
	
	ПрофессиональнаяПереподготовкаЗаголовок	= Макет.ПолучитьОбласть("ПрофессиональнаяПереподготовкаЗаголовок");
	ПрофессиональнаяПереподготовкаШапка		= Макет.ПолучитьОбласть("ПрофессиональнаяПереподготовкаШапка");
	ПрофессиональнаяПереподготовкаСтрока	= Макет.ПолучитьОбласть("ПрофессиональнаяПереподготовкаСтрока");
	ПрофессиональнаяПереподготовкаКоличествоСтрок = 3;
	
	ЗаголовокНаграды						= Макет.ПолучитьОбласть("ЗаголовокНаграды");
	ШапкаНаграды							= Макет.ПолучитьОбласть("ШапкаНаграды");
	СтрокаНаграды							= Макет.ПолучитьОбласть("СтрокаНаграды");
	ЗаголовокОтпуска						= Макет.ПолучитьОбласть("ЗаголовокОтпуска");
	ШапкаОтпуска							= Макет.ПолучитьОбласть("ШапкаОтпуска");
	СтрокаОтпуска							= Макет.ПолучитьОбласть("СтрокаОтпуска");
	ЗаголовокДополнительногоЛиста			= Макет.ПолучитьОбласть("ЗаголовокДополнительногоЛиста");
	ПодвалДополнительногоЛиста				= Макет.ПолучитьОбласть("ПодвалДополнительногоЛиста");
	
	ШапкаСтажи								= Макет.ПолучитьОбласть("ШапкаСтажи");
	СтрокаСтажи								= Макет.ПолучитьОбласть("СтрокаСтажи");
	ЗаголовокДополнительногоЛистаСтажи		= Макет.ПолучитьОбласть("ЗаголовокДополнительногоЛистаСтажи");
	
	ЗаголовокДополнительногоЛистаСоставСемьи	= Макет.ПолучитьОбласть("ЗаголовокДополнительногоЛистаСоставСемьи");
	
	Если ВыводитьФормуТ2ГС Тогда
		
		ПерваяСтраницаТ2Заголовок				= Макет.ПолучитьОбласть("ПерваяСтраницаТ2ЗаголовокГС");
		ПерваяСтраницаТ2Продолжение				= Макет.ПолучитьОбласть("ПерваяСтраницаТ2ПродолжениеГС");
		АттестацияЗаголовок						= Макет.ПолучитьОбласть("АттестацияЗаголовокГС");
		ПовышениеКвалификацииЗаголовок			= Макет.ПолучитьОбласть("ПовышениеКвалификацииЗаголовокГС");
		ПрофессиональнаяПереподготовкаЗаголовок	= Макет.ПолучитьОбласть("ПрофессиональнаяПереподготовкаЗаголовокГС");
		ЗаголовокНаграды						= Макет.ПолучитьОбласть("ЗаголовокНаградыГС");
		ЗаголовокОтпуска						= Макет.ПолучитьОбласть("ЗаголовокОтпускаГС");
		ЧетвертаяСтраницаТ2Продолжение			= Макет.ПолучитьОбласть("ЧетвертаяСтраницаТ2ПродолжениеГС");
		
		ПриемыПеремещенияКоличествоСтрок		= 3;
		АттестацияКоличествоСтрок				= 2;
		ПовышениеКвалификацииКоличествоСтрок	= 2;
		ПрофессиональнаяПереподготовкаКоличествоСтрок = 2;
		
	КонецЕсли; 
	
	ПерваяСтраницаТ2.Параметры.Заполнить(СтрокаДанных);
	ПерваяСтраницаТ2Продолжение.Параметры.Заполнить(СтрокаДанных);
	
	ПерваяСтраницаТ2.Параметры.МестоРождения = СтрокаДанных.ЛичныеДанныеМестоРождения;
	ПерваяСтраницаТ2.Параметры.ПерваяБукваФамилии = Лев(СокрЛП(СтрокаДанных.ЛичныеДанныеФамилия), 1);
	ПерваяСтраницаТ2.Параметры.ДатаАктуальности   = СтрокаДанных.РабочееМестоТрудовойДоговорДата;
	ЗарплатаКадрыОтчеты.ЗаполнитьПараметрыПользовательскихПолей(ПерваяСтраницаТ2, СтрокаДанных, СоответствиеПользовательскихПолей);
	
	Если ЗначениеЗаполнено(СтрокаДанных.ЛичныеДанныеСтрана) И СтрокаДанных.ЛичныеДанныеСтрана <> Справочники.СтраныМира.Россия Тогда
		ПерваяСтраницаТ2.Параметры.Гражданство = ПерваяСтраницаТ2.Параметры.Гражданство + " (" + СтрокаДанных.ЛичныеДанныеСтрана + ")";
	КонецЕсли; 
	
	ВтораяСтраницаТ2.Параметры.Заполнить(СтрокаДанных);
	ВтораяСтраницаТ2Продолжение1.Параметры.Заполнить(СтрокаДанных);
	
	ВтораяСтраницаТ2Продолжение2.Параметры.Заполнить(СтрокаДанных);
	ЗарплатаКадрыОтчеты.ЗаполнитьПараметрыПользовательскихПолей(ВтораяСтраницаТ2Продолжение2, СтрокаДанных, СоответствиеПользовательскихПолей);
	
	// АДРЕСА
	Индекс = "";
	СтруктураАдреса = ЗарплатаКадры.СтруктураАдресаИзXML(СтрокаДанных.ЛичныеДанныеКонтактнаяИнформацияАдресПоПрописке);
	Если СтруктураАдреса.Свойство("Индекс") Тогда
		Индекс = СтруктураАдреса.Индекс;
	КонецЕсли; 
	ВтораяСтраницаТ2Продолжение2.Параметры.ИндексАдресПоПаспорту = Индекс;
	ВтораяСтраницаТ2Продолжение2.Параметры.АдресПоПаспорту       = СтрЗаменить(СтрокаДанных.ЛичныеДанныеКонтактнаяИнформацияАдресПоПропискеПредставление, Индекс + ",","");
	ВтораяСтраницаТ2Продолжение2.Параметры.ДатаРегистрацииПоМестуЖительства = Формат(СтрокаДанных.ЛичныеДанныеКонтактнаяИнформацияДатаРегистрации, "ДЛФ=DD");
	
	Индекс = "";
	СтруктураАдреса = ЗарплатаКадры.СтруктураАдресаИзXML(СтрокаДанных.ЛичныеДанныеКонтактнаяИнформацияАдресМестаПроживания);
	Если СтруктураАдреса.Свойство("Индекс") Тогда
		Индекс = СтруктураАдреса.Индекс;
	КонецЕсли; 
	ВтораяСтраницаТ2Продолжение2.Параметры.ИндексАдресФактический = Индекс;
	ВтораяСтраницаТ2Продолжение2.Параметры.АдресФактический       = СтрЗаменить(СтрокаДанных.ЛичныеДанныеКонтактнаяИнформацияАдресМестаПроживанияПредставление, Индекс + ",","");
	
	ВидыДокументовПаспорта = ВидыДокументовФизическихЛицПаспортаПоКодамМВД();
	
	// ПАСПОРТ
	Если ЗначениеЗаполнено(СтрокаДанных.ЛичныеДанныеУдостоверениеДокументВид) Тогда
		
		Если ВидыДокументовПаспорта.Найти(СтрокаДанных.ЛичныеДанныеУдостоверениеДокументВид) = Неопределено Тогда
			
			ВтораяСтраницаТ2Продолжение2.Параметры.ДругойДокумент = 
				?(ЗначениеЗаполнено(СтрокаДанных.ЛичныеДанныеУдостоверениеДокументВид), "" + СтрокаДанных.ЛичныеДанныеУдостоверениеДокументВид, "<" + НСтр("ru='вид документа не указан'") + ">")
				+ " №" + ?(ЗначениеЗаполнено(СтрокаДанных.ЛичныеДанныеУдостоверениеДокументНомер), СтрокаДанных.ЛичныеДанныеУдостоверениеДокументНомер, "<" + НСтр("ru='номер документа не указан'") + ">")
				+ ?(ЗначениеЗаполнено(СтрокаДанных.ЛичныеДанныеУдостоверениеДокументСерия), " " + СтрокаДанных.ЛичныеДанныеУдостоверениеДокументСерия, "")
				+ "; " + НСтр("ru='выдан'") + ": " + ?(ЗначениеЗаполнено(СокрЛП(СтрокаДанных.ЛичныеДанныеУдостоверениеДокументКемВыдан)), СокрЛП(СтрокаДанных.ЛичныеДанныеУдостоверениеДокументКемВыдан), "<" + НСтр("ru='не указано'") + "> ")
				+ " "+ Формат(СтрокаДанных.ЛичныеДанныеУдостоверениеДокументДатаВыдачи,"ДЛФ=DD");
				
		Иначе
				
			ВтораяСтраницаТ2Продолжение2.Параметры.НомерПаспорта = НСтр("ru='серия'") + " " + ?(ЗначениеЗаполнено(СтрокаДанных.ЛичныеДанныеУдостоверениеДокументСерия),СтрокаДанных.ЛичныеДанныеУдостоверениеДокументСерия,"") + " № " + ?(ЗначениеЗаполнено(СтрокаДанных.ЛичныеДанныеУдостоверениеДокументНомер),СтрокаДанных.ЛичныеДанныеУдостоверениеДокументНомер,"");
			ВтораяСтраницаТ2Продолжение2.Параметры.ДатаВыдачиПаспорта = Формат(СтрокаДанных.ЛичныеДанныеУдостоверениеДокументДатаВыдачи, "ДЛФ=DD");
			ВтораяСтраницаТ2Продолжение2.Параметры.КемВыданПаспорт = ?(ЗначениеЗаполнено(СокрЛП(СтрокаДанных.ЛичныеДанныеУдостоверениеДокументКемВыдан)), СокрЛП(СтрокаДанных.ЛичныеДанныеУдостоверениеДокументКемВыдан),"") + ?(ЗначениеЗаполнено(СтрокаДанных.ЛичныеДанныеУдостоверениеДокументКодПодразделения)," № " + НСтр("ru='подразделения'") + " " + СтрокаДанных.ЛичныеДанныеУдостоверениеДокументКодПодразделения,"");
			
		КонецЕсли;
		
	КонецЕсли;
	
	// Заполнение параметров табличных секций.
	ШапкаСоставСемьи.Параметры.Заполнить(СтрокаДанных);
	
	ЗаголовокПриемыПеремещения.Параметры.Заполнить(СтрокаДанных);
	ШапкаПриемыПеремещения.Параметры.Заполнить(СтрокаДанных);
	
	АттестацияЗаголовок.Параметры.Заполнить(СтрокаДанных);
	АттестацияШапка.Параметры.Заполнить(СтрокаДанных);
	
	ПовышениеКвалификацииЗаголовок.Параметры.Заполнить(СтрокаДанных);
	ПовышениеКвалификацииШапка.Параметры.Заполнить(СтрокаДанных);
	
	ПрофессиональнаяПереподготовкаЗаголовок.Параметры.Заполнить(СтрокаДанных);
	ПрофессиональнаяПереподготовкаШапка.Параметры.Заполнить(СтрокаДанных);
	
	ЗаголовокНаграды.Параметры.Заполнить(СтрокаДанных);
	ШапкаНаграды.Параметры.Заполнить(СтрокаДанных);
	
	ЗаголовокОтпуска.Параметры.Заполнить(СтрокаДанных);
	ШапкаОтпуска.Параметры.Заполнить(СтрокаДанных);
	
	ЗаголовокДополнительногоЛиста.Параметры.Заполнить(СтрокаДанных);
	ЗаголовокДополнительногоЛиста.Параметры.МестоРождения = СтрокаДанных.ЛичныеДанныеМестоРождения;
	ЗарплатаКадрыОтчеты.ЗаполнитьПараметрыПользовательскихПолей(ЗаголовокДополнительногоЛиста, СтрокаДанных, СоответствиеПользовательскихПолей);
	
	ПодвалДополнительногоЛиста.Параметры.Заполнить(СтрокаДанных);
	
	ЧетвертаяСтраницаТ2Продолжение2.Параметры.Заполнить(СтрокаДанных);
	
	Если ЗначениеЗаполнено(СтрокаДанных.РабочееМестоПриказОбУвольненииСтатьяТКРФ) Тогда
		ЧетвертаяСтраницаТ2Продолжение2.Параметры.РабочееМестоПриказОбУвольненииСтатьяТКРФ =
			СтрокаДанных.РабочееМестоПриказОбУвольненииСтатьяТКРФТекстОснования + ", " + СтрокаДанных.РабочееМестоПриказОбУвольненииСтатьяТКРФНаименование;
	КонецЕсли; 
	
	Если НЕ ЗначениеЗаполнено(СтрокаДанных.РабочееМестоПриказОбУвольненииНомер) Тогда
		ЧетвертаяСтраницаТ2Продолжение2.Параметры.ПриказОбУвольненииНомер = "__________";
	Иначе
		ЧетвертаяСтраницаТ2Продолжение2.Параметры.ПриказОбУвольненииНомер = ПрефиксацияОбъектовКлиентСервер.ПолучитьНомерНаПечать(СтрокаДанных.РабочееМестоПриказОбУвольненииНомер, Истина, Истина);
	КонецЕсли; 
	
	Если ЗначениеЗаполнено(СтрокаДанных.РабочееМестоПриказОбУвольненииДата) ИЛИ ЗначениеЗаполнено(СтрокаДанных.РабочееМестоДатаУвольнения) Тогда
		
		Если ЗначениеЗаполнено(СтрокаДанных.РабочееМестоПриказОбУвольненииДата) Тогда
			ПриказОбУвольненииДатаПредставление = Формат(СтрокаДанных.РабочееМестоПриказОбУвольненииДата, "ДЛФ=DD");
		Иначе
			ПриказОбУвольненииДатаПредставление = Формат(СтрокаДанных.РабочееМестоДатаУвольнения, "ДЛФ=DD");
		КонецЕсли;
		
		ЧетвертаяСтраницаТ2Продолжение2.Параметры.ПриказОбУвольненииЧисло = СокрЛП(Лев(ПриказОбУвольненииДатаПредставление, 2));
		ЧетвертаяСтраницаТ2Продолжение2.Параметры.ПриказОбУвольненииМесяцГод = СокрЛП(Сред(ПриказОбУвольненииДатаПредставление, 3));
	Иначе
		ЧетвертаяСтраницаТ2Продолжение2.Параметры.ПриказОбУвольненииЧисло = "_____";
		ЧетвертаяСтраницаТ2Продолжение2.Параметры.ПриказОбУвольненииМесяцГод = " ___________ 20___ г.";
	КонецЕсли;
	
	
	ВтораяСтраницаТ2Продолжение2.Параметры.РаботникКадровойСлужбыРасшифровкаПодписи = РаботникКадровойСлужбыРасшифровкаПодписи;
	ВтораяСтраницаТ2Продолжение2.Параметры.ПараметрыДанныхДолжностьРаботникаКадровойСлужбы = Строка(ДолжностьРуководителяКадровойСлужбы);
	ЧетвертаяСтраницаТ2Продолжение2.Параметры.РаботникКадровойСлужбыРасшифровкаПодписи = "";
	ЧетвертаяСтраницаТ2Продолжение2.Параметры.ПараметрыДанныхДолжностьРаботникаКадровойСлужбы = "";
	ПодвалДополнительногоЛиста.Параметры.РаботникКадровойСлужбыРасшифровкаПодписи = РаботникКадровойСлужбыРасшифровкаПодписи;
	ПодвалДополнительногоЛиста.Параметры.ПараметрыДанныхДолжностьРаботникаКадровойСлужбы = Строка(ДолжностьРуководителяКадровойСлужбы);

	
	ОбластиДополнительныхСтрок = Новый Массив;
	МассивПодвалов = Новый Массив;
	МассивПодвалов.Добавить(ПодвалДополнительногоЛиста);
	
	ДокументРезультат.Вывести(ПерваяСтраницаТ2Заголовок, Уровень + 1);
	ДокументРезультат.Вывести(ПерваяСтраницаТ2, Уровень + 1);
	ДокументРезультат.Вывести(ПерваяСтраницаТ2Продолжение, Уровень + 1);
	ДокументРезультат.ВывестиГоризонтальныйРазделительСтраниц();
	
	ДокументРезультат.Вывести(ВтораяСтраницаТ2, Уровень + 1);
	
	// Стажи
	МассивЗаголовков = Новый Массив;
	МассивЗаголовков.Добавить(ЗаголовокДополнительногоЛиста);
	МассивЗаголовков.Добавить(ЗаголовокДополнительногоЛистаСтажи);

	ДанныеЗаполнения = ДополнительныеСведения.Получить("ДанныеЗаполненияСтажи");
	Если ДанныеЗаполнения = Неопределено Тогда
		ДанныеЗаполненияПоСотруднику = Новый Массив;
	Иначе
		ДанныеЗаполненияПоСотруднику = ДанныеЗаполнения.Получить(СтрокаДанных.ЛичныеДанныеФизическоеЛицо);
		Если ДанныеЗаполненияПоСотруднику = Неопределено Тогда
			ДанныеЗаполненияПоСотруднику = Новый Массив;
		КонецЕсли;
	КонецЕсли;

	ДанныеЗаполненияПоСотруднику.Очистить();
	ПредставлениеДатаСтажа = "8. " + НСтр("ru='Стаж работы (по состоянию на'") + "  " + Формат(СтрокаДанных.РабочееМестоДатаПриема, "ДЛФ=DD") + "):";	

	Если ДанныеЗаполненияПоСотруднику.Количество() > 0 Тогда
		
		ПредставлениеДатаСтажа = "8. " + НСтр("ru='Стаж работы (по состоянию на'") + "  " + Формат(СтрокаДанных.ПараметрыДанныхПериод, "ДЛФ=DD") + "):";
		
		// Добавление пустых строк, если стажей менее 4-х.
		Если ДанныеЗаполненияПоСотруднику.Количество() < 4 Тогда
			Для НомерСтажа = ДанныеЗаполненияПоСотруднику.Количество() + 1 По 4 Цикл
				ДанныеЗаполненияПоСотруднику.Добавить(СтруктураПустогоСтажа());
			КонецЦикла;
		КонецЕсли; 		
		
	Иначе
		//ПредставлениеДатаСтажа = "8. " + НСтр("ru='Стаж работы (по состоянию на'") + "  ""         "" _________ 20     " + НСтр("ru='г'") + ".):";
		ДанныеЗаполненияПоСотруднику = СведенияОСтажахПоУмолчанию();

	КонецЕсли; 
	
	ШапкаСтажи.Параметры.ДатаСтажа = ПредставлениеДатаСтажа;
	ДокументРезультат.Вывести(ШапкаСтажи, Уровень+1);
	
	ЗарплатаКадры.СформироватьОбластьТабличногоДокументаСОграниченнымНаборомСтрок(ДокументРезультат, ДанныеЗаполненияПоСотруднику,
			4, ОбластиДополнительныхСтрок, ШапкаСтажи, СтрокаСтажи, МассивЗаголовков, МассивПодвалов);
	
	ДокументРезультат.Вывести(ВтораяСтраницаТ2Продолжение1, Уровень+1);	
	
	// Состав семьи
	МассивЗаголовков = Новый Массив;
	МассивЗаголовков.Добавить(ЗаголовокДополнительногоЛиста);
	МассивЗаголовков.Добавить(ЗаголовокДополнительногоЛистаСоставСемьи);
	ДокументРезультат.Вывести(ШапкаСоставСемьи, Уровень+1);
	ДанныеЗаполнения = ДополнительныеСведения.Получить("ДанныеЗаполненияСоставСемьи");
	Если ДанныеЗаполнения = Неопределено Тогда
		ДанныеЗаполненияПоСотруднику = Новый Массив;
	Иначе
		ДанныеЗаполненияПоСотруднику = ДанныеЗаполнения.Получить(СтрокаДанных.ЛичныеДанныеФизическоеЛицо);
		Если ДанныеЗаполненияПоСотруднику = Неопределено Тогда
			ДанныеЗаполненияПоСотруднику = Новый Массив;
		КонецЕсли;
	КонецЕсли;
	
	ЗарплатаКадры.СформироватьОбластьТабличногоДокументаСОграниченнымНаборомСтрок(ДокументРезультат, ДанныеЗаполненияПоСотруднику,
			6, ОбластиДополнительныхСтрок, ШапкаСоставСемьи, СтрокаСоставСемьи, МассивЗаголовков, МассивПодвалов);
	
	ДокументРезультат.Вывести(ВтораяСтраницаТ2Продолжение2, Уровень+1);
	ДокументРезультат.ВывестиГоризонтальныйРазделительСтраниц();
	
	ДокументРезультат.Вывести(ТретьяСтраницаТ2, Уровень+1);
	
	// Прием на работу и переводы на другую работу.
	МассивЗаголовков = Новый Массив;
	МассивЗаголовков.Добавить(ЗаголовокДополнительногоЛиста);
	МассивЗаголовков.Добавить(ЗаголовокПриемыПеремещения);
	ДокументРезультат.Вывести(ЗаголовокПриемыПеремещения, Уровень+1);
	ДокументРезультат.Вывести(ШапкаПриемыПеремещения, Уровень+1);
	ДанныеЗаполнения = ДополнительныеСведения.Получить("ДанныеЗаполненияКадровойИстории");
	Если ДанныеЗаполнения = Неопределено Тогда
		ДанныеЗаполненияПоСотруднику = Новый Массив;
	Иначе
		ДанныеЗаполненияПоСотруднику = ДанныеЗаполнения.Получить(СтрокаДанных.РабочееМестоСотрудник);
		Если ДанныеЗаполненияПоСотруднику = Неопределено Тогда
			ДанныеЗаполненияПоСотруднику = Новый Массив;
		КонецЕсли;
	КонецЕсли;
			
	Для Каждого СтрокаДанныхЗаполнения ИЗ ДанныеЗаполненияПоСотруднику Цикл 		
		ИзменитьОписаниеТарифнойСтавки(СтрокаДанныхЗаполнения, СтрокаДанных.РабочееМестоСотрудник);
	КонецЦикла;
	
	Для Каждого СтрокаДанныхЗаполнения Из ДанныеЗаполненияПоСотруднику Цикл 		
		Если ТипЗнч(СтрокаДанныхЗаполнения.ПодразделениеПеревода)<>Тип("Строка") Тогда 
			ИзменитьСтруктуруПодразделения(СтрокаДанныхЗаполнения);             
		КонецЕсли;
	КонецЦикла;	
	
	ЗарплатаКадры.СформироватьОбластьТабличногоДокументаСОграниченнымНаборомСтрок(ДокументРезультат, ДанныеЗаполненияПоСотруднику,
		ПриемыПеремещенияКоличествоСтрок, ОбластиДополнительныхСтрок, ШапкаПриемыПеремещения, СтрокаПриемыПеремещения, МассивЗаголовков, МассивПодвалов);
		                                                                  		
	Если ВыводитьФормуТ2ГС Тогда
				
		// Классные чины
		МассивЗаголовков = Новый Массив;
		МассивЗаголовков.Добавить(ЗаголовокДополнительногоЛиста);
		МассивЗаголовков.Добавить(КлассныеЧиныЗаголовок);
		ДокументРезультат.Вывести(КлассныеЧиныЗаголовок, Уровень + 1);
		ДокументРезультат.Вывести(КлассныеЧиныШапка, Уровень + 1);
		ДанныеЗаполнения = ДополнительныеСведения.Получить("ДанныеКлассныхЧинов");
		Если ДанныеЗаполнения = Неопределено Тогда
			ДанныеЗаполненияПоСотруднику = Новый Массив;
		Иначе
			ДанныеЗаполненияПоСотруднику = ДанныеЗаполнения.Получить(СтрокаДанных.ЛичныеДанныеФизическоеЛицо);
			Если ДанныеЗаполненияПоСотруднику = Неопределено Тогда
				ДанныеЗаполненияПоСотруднику = Новый Массив;
			КонецЕсли;
		КонецЕсли;
		ЗарплатаКадры.СформироватьОбластьТабличногоДокументаСОграниченнымНаборомСтрок(ДокументРезультат, ДанныеЗаполненияПоСотруднику,
			КлассныеЧиныКоличествоСтрок, ОбластиДополнительныхСтрок, КлассныеЧиныШапка, КлассныеЧиныСтрока, МассивЗаголовков, МассивПодвалов);
			
	КонецЕсли;
			
	// Аттестации
	МассивЗаголовков = Новый Массив;
	МассивЗаголовков.Добавить(ЗаголовокДополнительногоЛиста);
	МассивЗаголовков.Добавить(АттестацияЗаголовок);
	ДокументРезультат.Вывести(АттестацияЗаголовок, Уровень + 1);
	ДокументРезультат.Вывести(АттестацияШапка, Уровень + 1);
	ДанныеЗаполнения = ДополнительныеСведения.Получить("ДанныеАттестаций");
	Если ДанныеЗаполнения = Неопределено Тогда
		ДанныеЗаполненияПоСотруднику = Новый Массив;
	Иначе
		ДанныеЗаполненияПоСотруднику = ДанныеЗаполнения.Получить(СтрокаДанных.РабочееМестоСотрудник);
		Если ДанныеЗаполненияПоСотруднику = Неопределено Тогда
			ДанныеЗаполненияПоСотруднику = Новый Массив;
		КонецЕсли;
	КонецЕсли;
	ЗарплатаКадры.СформироватьОбластьТабличногоДокументаСОграниченнымНаборомСтрок(ДокументРезультат, ДанныеЗаполненияПоСотруднику,
			АттестацияКоличествоСтрок, ОбластиДополнительныхСтрок, АттестацияШапка, АттестацияСтрока, МассивЗаголовков, МассивПодвалов);
			
	// Повышении квалификации
	МассивЗаголовков = Новый Массив;
	МассивЗаголовков.Добавить(ЗаголовокДополнительногоЛиста);
	МассивЗаголовков.Добавить(ПовышениеКвалификацииЗаголовок);
	ДокументРезультат.Вывести(ПовышениеКвалификацииЗаголовок, Уровень + 1);
	ДокументРезультат.Вывести(ПовышениеКвалификацииШапка, Уровень + 1);
	ДанныеЗаполнения = ДополнительныеСведения.Получить("ДанныеПовышенияКвалификаций");
	Если ДанныеЗаполнения = Неопределено Тогда
		ДанныеЗаполненияПоСотруднику = Новый Массив;
	Иначе
		ДанныеЗаполненияПоСотруднику = ДанныеЗаполнения.Получить(СтрокаДанных.ЛичныеДанныеФизическоеЛицо);
		Если ДанныеЗаполненияПоСотруднику = Неопределено Тогда
			ДанныеЗаполненияПоСотруднику = Новый Массив;
		КонецЕсли;
	КонецЕсли;
	ЗарплатаКадры.СформироватьОбластьТабличногоДокументаСОграниченнымНаборомСтрок(ДокументРезультат, ДанныеЗаполненияПоСотруднику,
			ПовышениеКвалификацииКоличествоСтрок, ОбластиДополнительныхСтрок, ПовышениеКвалификацииШапка, ПовышениеКвалификацииСтрока, МассивЗаголовков, МассивПодвалов);
			
	// Профессиональная подготовка.
	МассивЗаголовков = Новый Массив;
	МассивЗаголовков.Добавить(ЗаголовокДополнительногоЛиста);
	МассивЗаголовков.Добавить(ПрофессиональнаяПереподготовкаЗаголовок);
	ДокументРезультат.Вывести(ПрофессиональнаяПереподготовкаЗаголовок, Уровень + 1);
	ДокументРезультат.Вывести(ПрофессиональнаяПереподготовкаШапка, Уровень + 1);
	ДанныеЗаполнения = ДополнительныеСведения.Получить("ДанныеПрофессиональныхПереподготовок");
	Если ДанныеЗаполнения = Неопределено Тогда
		ДанныеЗаполненияПоСотруднику = Новый Массив;
	Иначе
		ДанныеЗаполненияПоСотруднику = ДанныеЗаполнения.Получить(СтрокаДанных.ЛичныеДанныеФизическоеЛицо);
		Если ДанныеЗаполненияПоСотруднику = Неопределено Тогда
			ДанныеЗаполненияПоСотруднику = Новый Массив;
		КонецЕсли;
	КонецЕсли;
	ЗарплатаКадры.СформироватьОбластьТабличногоДокументаСОграниченнымНаборомСтрок(ДокументРезультат, ДанныеЗаполненияПоСотруднику,
			ПрофессиональнаяПереподготовкаКоличествоСтрок, ОбластиДополнительныхСтрок, ПрофессиональнаяПереподготовкаШапка, ПрофессиональнаяПереподготовкаСтрока, МассивЗаголовков, МассивПодвалов);
			
	ДокументРезультат.ВывестиГоризонтальныйРазделительСтраниц();
	
	ДокументРезультат.Вывести(ЧетвертаяСтраницаТ2, Уровень+1);
	
	// Награды (поощрения), почетные звания.
	МассивЗаголовков = Новый Массив;
	МассивЗаголовков.Добавить(ЗаголовокДополнительногоЛиста);
	МассивЗаголовков.Добавить(ЗаголовокНаграды);
	ДокументРезультат.Вывести(ЗаголовокНаграды, Уровень+1);
	ДокументРезультат.Вывести(ШапкаНаграды, Уровень+1);
	ДанныеЗаполнения = ДополнительныеСведения.Получить("ДанныеЗаполненияНаграды");
	Если ДанныеЗаполнения = Неопределено Тогда
		ДанныеЗаполненияПоСотруднику = Новый Массив;
	Иначе
		ДанныеЗаполненияПоСотруднику = ДанныеЗаполнения.Получить(СтрокаДанных.ЛичныеДанныеФизическоеЛицо);
		Если ДанныеЗаполненияПоСотруднику = Неопределено Тогда
			ДанныеЗаполненияПоСотруднику = Новый Массив;
		КонецЕсли;
	КонецЕсли;
	ЗарплатаКадры.СформироватьОбластьТабличногоДокументаСОграниченнымНаборомСтрок(ДокументРезультат, ДанныеЗаполненияПоСотруднику,
			5, ОбластиДополнительныхСтрок, ШапкаНаграды, СтрокаНаграды, МассивЗаголовков, МассивПодвалов);
	
	// Отпуск
	МассивЗаголовков = Новый Массив;
	МассивЗаголовков.Добавить(ЗаголовокДополнительногоЛиста);
	МассивЗаголовков.Добавить(ЗаголовокОтпуска);
	ДокументРезультат.Вывести(ЗаголовокОтпуска, Уровень+1);
	ДокументРезультат.Вывести(ШапкаОтпуска, Уровень+1);
	ДанныеЗаполнения = ДополнительныеСведения.Получить("ДанныеЗаполненияОтпуска");
	Если ДанныеЗаполнения = Неопределено Тогда
		ДанныеЗаполненияПоСотруднику = Новый Массив;
	Иначе
		ДанныеЗаполненияПоСотруднику = ДанныеЗаполнения.Получить(СтрокаДанных.РабочееМестоСотрудник);
		Если ДанныеЗаполненияПоСотруднику = Неопределено Тогда
			ДанныеЗаполненияПоСотруднику = Новый Массив;
		КонецЕсли;
	КонецЕсли;
	СформироватьОбластьТабличногоДокументаСОграниченнымНаборомСтрок(ДокументРезультат, ДанныеЗаполненияПоСотруднику,
			14, ОбластиДополнительныхСтрок, ШапкаОтпуска, СтрокаОтпуска, МассивЗаголовков, МассивПодвалов);
	
	ДокументРезультат.Вывести(ЧетвертаяСтраницаТ2Продолжение, Уровень+1);
	ДокументРезультат.Вывести(ЧетвертаяСтраницаТ2Продолжение2, Уровень+1);
	
	ЗарплатаКадры.ВывестиОбластиТабличногоДокументаСОграниченнымНаборомСтрок(ДокументРезультат, ОбластиДополнительныхСтрок);
	
КонецПроцедуры

// Выводит строки по данным заполнения в результирующий табличный документ, в количестве не превышающем
// "ОграничениеСтрок".
// Остальные строки выводятся в дополнительные страницы, которые помещаются в массив "ОбластиДополнительныхСтрок".
//
// Параметры:
//		ТабличныйДокумент - результирующий табличный документ.
//		ДанныеЗаполнения - коллекция с данными для заполнения строк, коллекция доступна для обхода циклом Для Каждого … Из
//		                   … Цикл.
//		ОграничениеСтрок - число, количество строк, размещаемых в основной области.
//		ОбластиДополнительныхСтрок - массив областей с дополнительными строками.
//		ОбластьШапка - область табличного документа для шапки.
//		ОбластьСтрока - область табличного документа для строки.
//		МассивОбластейЗаголовок - массив областей табличного документа для заголовка, выводятся по порядку.
//		МассивОбластейПодвал - массив областей табличного документа для подвала, выводятся по порядку.
//		ВыводитьСтрокиНаВсюСтраницу - Если Истина, то до конца дополнительной страницы будут выведены пустые строки.
//
Процедура СформироватьОбластьТабличногоДокументаСОграниченнымНаборомСтрок(ТабличныйДокумент, ДанныеЗаполнения, ОграничениеСтрок,
	ОбластиДополнительныхСтрок, ОбластьШапка, ОбластьСтрока, МассивОбластейЗаголовок = Неопределено, МассивОбластейПодвал = Неопределено,
	ВыводитьСтрокиНаВсюСтраницу = Ложь)
	
	КоличествоВыведенныхСтрок = 0;
	ДополнительнаяСтраница = Новый ТабличныйДокумент;
	
	Для каждого СтрокаДанныхЗаполнения Из ДанныеЗаполнения Цикл
		
		КоличествоВыведенныхСтрок = КоличествоВыведенныхСтрок + 1;
		
		// Если выводимая строка помещается в основной табличный документ.
		Если КоличествоВыведенныхСтрок <= ОграничениеСтрок Тогда
			ОбластьСтрока.Параметры.Заполнить(СтрокаДанныхЗаполнения);
			ТабличныйДокумент.Вывести(ОбластьСтрока);
		КонецЕсли;
		
		// Если выводимая строка не помещается в основной табличный документ, то нужно вывести
		// заголовок и шапку для дополнительной страницы.
		Если КоличествоВыведенныхСтрок = ОграничениеСтрок + 1 Тогда
			
			// Если задан заголовок для дополнительной страницы - выведем его.
			Если МассивОбластейЗаголовок <> Неопределено Тогда
				СтруктураПараметров = Новый Структура("НомерПриложения", ОбластиДополнительныхСтрок.Количество() + 1);
				Для каждого ОбластьЗаголовок Из МассивОбластейЗаголовок Цикл
					ОбластьЗаголовок.Параметры.Заполнить(СтруктураПараметров);
					ДополнительнаяСтраница.Вывести(ОбластьЗаголовок);
				КонецЦикла;
			КонецЕсли;
			
			// Выводим шапку дополнительной страницы.
			ДополнительнаяСтраница.Вывести(ОбластьШапка);
			
			// Повторяем шапку на каждой странице при печати.
			ДополнительнаяСтраница.ПовторятьПриПечатиСтроки = ОбластьШапка;
			
		КонецЕсли;
		
		// Все строки, которые не поместились в основной табличный документ выводим в дополнительную страницу.
		Если КоличествоВыведенныхСтрок > ОграничениеСтрок Тогда
			ОбластьСтрока.Параметры.Заполнить(СтрокаДанныхЗаполнения);
			ДополнительнаяСтраница.Вывести(ОбластьСтрока);
		КонецЕсли;
		
	КонецЦикла;
	
	// Добавим 20 дополнительных строк, для данных из Диасофт
	Если КоличествоВыведенныхСтрок > ОграничениеСтрок Тогда
		
		ОбластьСтрока.Параметры.ВидОтпуска = Неопределено;
		ОбластьСтрока.Параметры.ДатаПо = Неопределено;
		ОбластьСтрока.Параметры.ДатаС = Неопределено;
		ОбластьСтрока.Параметры.ДнейОтпуска = Неопределено;
		ОбластьСтрока.Параметры.ОснованиеОтпуска = Неопределено;
		ОбластьСтрока.Параметры.РабочийГодПо = Неопределено;
		ОбластьСтрока.Параметры.РабочийГодС = Неопределено;

		Для сч = 1 по 20 Цикл 
			ДополнительнаяСтраница.Вывести(ОбластьСтрока);
		КонецЦикла;
	КонецЕсли; 	
	
	// Если создавали дополнительную страницу нужно вывести подвал и надпись о продолжении таблицы.
	Если КоличествоВыведенныхСтрок > ОграничениеСтрок Тогда
		
		// Выводим пустые строки до конца дополнительной страницы.
		Если ВыводитьСтрокиНаВсюСтраницу Тогда
			
			Для ПараметрОбласти = 0 По ОбластьСтрока.Параметры.Количество() -1 Цикл
				ОбластьСтрока.Параметры[ПараметрОбласти] = Неопределено;
			КонецЦикла;
			
			ВыводимыеОбласти = Новый Массив();
			ВыводимыеОбласти.Добавить(ОбластьСтрока);
			Если МассивОбластейПодвал <> Неопределено Тогда
				Для каждого ОбластьПодвал Из МассивОбластейПодвал Цикл
					ВыводимыеОбласти.Добавить(ОбластьПодвал);
				КонецЦикла;
			КонецЕсли;
			
			Пока ОбщегоНазначения.ПроверитьВыводТабличногоДокумента(ДополнительнаяСтраница, ВыводимыеОбласти, Ложь) Цикл
				ДополнительнаяСтраница.Вывести(ОбластьСтрока);
			КонецЦикла;
			
		КонецЕсли;
		
		// Если задан подвал для дополнительной страницы - выведем его.
		Если МассивОбластейПодвал <> Неопределено Тогда
			Для каждого ОбластьПодвал Из МассивОбластейПодвал Цикл
				ДополнительнаяСтраница.Вывести(ОбластьПодвал);
			КонецЦикла;
		КонецЕсли;
		
		// Поместим созданную страницу в массив.
		ОбластиДополнительныхСтрок.Добавить(ДополнительнаяСтраница);
		
		// В основном табличном документе напишем, что есть дополнительная страница.
		ОбластьНадписи = ОбластьСтрока.Область(1,1, ОбластьСтрока.ВысотаТаблицы, ОбластьСтрока.ШиринаТаблицы);
		ОбластьНадписи.Объединить();
		ОбластьНадписи.Очистить(Истина, Истина, Истина);
		ТекстНадписи = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'Продолжение таблицы см. в дополнении к документу №%1.'"),
				ОбластиДополнительныхСтрок.Количество());
		ОбластьНадписи.Текст = ТекстНадписи;
		ОбластьНадписи.ГоризонтальноеПоложение = ГоризонтальноеПоложение.Право;
		ОбластьНадписи.АвтовысотаСтроки = Истина;
		ТабличныйДокумент.Вывести(ОбластьСтрока);
		
	// В основном табличном документе выведем пустые строки до заданного количества "ОграничениеСтрок".
	ИначеЕсли КоличествоВыведенныхСтрок < ОграничениеСтрок Тогда
		
		Для ПараметрОбласти = 0 По ОбластьСтрока.Параметры.Количество() -1 Цикл
			ОбластьСтрока.Параметры[ПараметрОбласти] = Неопределено;
		КонецЦикла;
		
		Для Шаг = КоличествоВыведенныхСтрок + 1 По ОграничениеСтрок Цикл
			ТабличныйДокумент.Вывести(ОбластьСтрока);
		КонецЦикла;
		
	КонецЕсли;
	
КонецПроцедуры

Функция ВидыДокументовФизическихЛицПаспортаПоКодамМВД()
	
	ПаспортаПоКодамМВД = Новый Массив;
	
	ПаспортаПоКодамМВД.Добавить(Справочники.ВидыДокументовФизическихЛиц.ПаспортМинморфлота);
	ПаспортаПоКодамМВД.Добавить(Справочники.ВидыДокументовФизическихЛиц.ПаспортМоряка);
	ПаспортаПоКодамМВД.Добавить(Справочники.ВидыДокументовФизическихЛиц.ПаспортРФ);
	ПаспортаПоКодамМВД.Добавить(Справочники.ВидыДокументовФизическихЛиц.ПаспортСССР);
	
	ПаспортИностранногоГражданина = Справочники.ВидыДокументовФизическихЛиц.НайтиПоРеквизиту("КодМВД", "10");
	Если НЕ ПаспортИностранногоГражданина.Пустая() Тогда
		ПаспортаПоКодамМВД.Добавить(ПаспортИностранногоГражданина.Ссылка);
	КонецЕсли; 
	
	Возврат ПаспортаПоКодамМВД;
	
КонецФункции

Функция СведенияОСтажахПоУмолчанию()
	
	МассивСведенийОСтаже = Новый Массив;

	//ОписаниеСтажа = Новый Структура;
	//ОписаниеСтажа.Вставить("СтажВид", НСтр("ru='Общий'"));
	//ОписаниеСтажа.Вставить("СтажЛет", 0);
	//ОписаниеСтажа.Вставить("СтажМесяцев", 0);
	//ОписаниеСтажа.Вставить("СтажДней", 0);
	//
	//МассивСведенийОСтаже.Добавить(ОписаниеСтажа);
	//
	//ОписаниеСтажа = Новый Структура;
	//ОписаниеСтажа.Вставить("СтажВид", НСтр("ru='Непрерывный'"));
	//ОписаниеСтажа.Вставить("СтажЛет", 0);
	//ОписаниеСтажа.Вставить("СтажМесяцев", 0);
	//ОписаниеСтажа.Вставить("СтажДней", 0);
	//
	//МассивСведенийОСтаже.Добавить(ОписаниеСтажа);
	//
	//ОписаниеСтажа = Новый Структура;
	//ОписаниеСтажа.Вставить("СтажВид", НСтр("ru='Дающий право на надбавку за выслугу лет'"));
	//ОписаниеСтажа.Вставить("СтажЛет", 0);
	//ОписаниеСтажа.Вставить("СтажМесяцев", 0);
	//ОписаниеСтажа.Вставить("СтажДней", 0);
	//
	//МассивСведенийОСтаже.Добавить(ОписаниеСтажа);
	
	МассивСведенийОСтаже.Добавить(СтруктураПустогоСтажа());
	МассивСведенийОСтаже.Добавить(СтруктураПустогоСтажа());
	МассивСведенийОСтаже.Добавить(СтруктураПустогоСтажа());
	
	МассивСведенийОСтаже.Добавить(СтруктураПустогоСтажа());
		
	Возврат МассивСведенийОСтаже;
	
КонецФункции 

Функция СтруктураПустогоСтажа()
	
	ОписаниеСтажа = Новый Структура;
	ОписаниеСтажа.Вставить("СтажВид", "___________________________________");
	ОписаниеСтажа.Вставить("СтажЛет", 0);
	ОписаниеСтажа.Вставить("СтажМесяцев", 0);
	ОписаниеСтажа.Вставить("СтажДней", 0);
	
	Возврат ОписаниеСтажа;
	
КонецФункции

Процедура ИзменитьОписаниеТарифнойСтавки(СтрокаДанных,Сотрудник)
	
	Оклад = Неопределено;
	РК = Неопределено;
	СН = Неопределено;
	СНПроцент = "";
	
	ЗапросПоПлановымНачислениям = Новый Запрос();
	ЗапросПоПлановымНачислениям.Текст = "ВЫБРАТЬ
	                                    |	ЗначенияПериодическихПоказателейРасчетаЗарплатыСотрудниковСрезПоследних.Показатель,
	                                    |	ЗначенияПериодическихПоказателейРасчетаЗарплатыСотрудниковСрезПоследних.Значение
	                                    |ИЗ
	                                    |	РегистрСведений.ЗначенияПериодическихПоказателейРасчетаЗарплатыСотрудников.СрезПоследних(&ПериодНачислений, Сотрудник = &Сотрудник) КАК ЗначенияПериодическихПоказателейРасчетаЗарплатыСотрудниковСрезПоследних";
	ЗапросПоПлановымНачислениям.УстановитьПараметр("ПериодНачислений",КонецДня(СтрокаДанных.ДатаПеревода));
	ЗапросПоПлановымНачислениям.УстановитьПараметр("Сотрудник",Сотрудник);
	ВыборкаПоПлнНачсл = ЗапросПоПлановымНачислениям.Выполнить().Выбрать();
	
	ЗапросПоПлановымНачислениям.Текст = "ВЫБРАТЬ
	                                    |	МАКСИМУМ(ПлановыйФОТ.Период) КАК Период,
	                                    |	ПлановыйФОТ.Сотрудник КАК Сотрудник
	                                    |ПОМЕСТИТЬ ВТ_МаксПериод
	                                    |ИЗ
	                                    |	РегистрСведений.ПлановыйФОТ КАК ПлановыйФОТ
	                                    |ГДЕ
	                                    |	ПлановыйФОТ.Период <= &ПериодНачислений
	                                    |	И ПлановыйФОТ.Сотрудник = &Сотрудник
	                                    |
	                                    |СГРУППИРОВАТЬ ПО
	                                    |	ПлановыйФОТ.Сотрудник
	                                    |;
	                                    |
	                                    |////////////////////////////////////////////////////////////////////////////////
	                                    |ВЫБРАТЬ
	                                    |	ПлановыйФОТ.ВкладВФОТ КАК Размер
	                                    |ИЗ
	                                    |	ВТ_МаксПериод КАК ВТ_МаксПериод
	                                    |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ПлановыйФОТ КАК ПлановыйФОТ
	                                    |		ПО ВТ_МаксПериод.Период = ПлановыйФОТ.Период
	                                    |			И ВТ_МаксПериод.Сотрудник = ПлановыйФОТ.Сотрудник";
	ВыборкаПоФОТ = ЗапросПоПлановымНачислениям.Выполнить().Выбрать();
	
	Пока ВыборкаПоПлнНачсл.Следующий() Цикл 
		
		Если ВыборкаПоПлнНачсл.Показатель = Справочники.ПоказателиРасчетаЗарплаты.Оклад Тогда 
			Оклад = ВыборкаПоПлнНачсл.Значение;			
		ИначеЕсли ВыборкаПоПлнНачсл.Показатель = Справочники.ПоказателиРасчетаЗарплаты.РайонныйКоэффициент Тогда 
			РК = ВыборкаПоПлнНачсл.Значение;			
		ИначеЕсли ВыборкаПоПлнНачсл.Показатель = Справочники.ПоказателиРасчетаЗарплаты.СевернаяНадбавка Тогда 
			Сн = ВыборкаПоПлнНачсл.Значение;			
		КонецЕсли;
		
	КонецЦикла;
	
	Если ВыборкаПоФОТ.Следующий() Тогда 
		Оклад = ВыборкаПоФОТ.Размер;
	КонецЕсли;
	
	Если Оклад = Неопределено Тогда 
		Возврат;
	Иначе 
		ТарифнаяСтавка = "";
		ТарифнаяСтавка = Формат(Оклад,"ЧДЦ=2");
		
		РК = ПолучитьНадбавку(Сотрудник, Справочники.ПоказателиРасчетаЗарплаты.РайонныйКоэффициент);
		СН = ПолучитьНадбавку(Сотрудник, Справочники.ПоказателиРасчетаЗарплаты.СевернаяНадбавка, СтрокаДанных.ДатаПеревода);
		СНПроцент = СН;

		Если РК<>Неопределено И РК<>0 Тогда 
			РКПроцент = (РК-1)*100;
			ТарифнаяСтавка = ТарифнаяСтавка + Символы.ВК + "РК-"+РКПроцент+"%";
		КонецЕсли;
		Если СН<>Неопределено И СН<>0 Тогда 
			Если ПустаяСтрока(СНПроцент) Тогда 
				СНПроцент = Окр(СН*100/Оклад,2);
			КонецЕсли;
			ТарифнаяСтавка = ТарифнаяСтавка + Символы.ВК + "СН-"+СНПроцент+"%";
		КонецЕсли;
		
		СтрокаДанных.ТарифнаяСтавка = ТарифнаяСтавка;
		
	КонецЕсли;
	
	
КонецПроцедуры

Процедура ИзменитьСтруктуруПодразделения(СтрокаДанных)
	
	Если Не ЗначениеЗаполнено(СтрокаДанных.ПодразделениеПеревода) Тогда 
		Возврат;
	КонецЕсли;
	
	Подразделение = "";
	
	ЗапросПоПодразделениям = Новый Запрос;
	ТекстЗапроса = "ВЫБРАТЬ
	               |	ПодразделенияОрганизаций.Наименование
	               |ИЗ
	               |	Справочник.ПодразделенияОрганизаций КАК ПодразделенияОрганизаций
	               |ГДЕ
	               |	ПодразделенияОрганизаций.Ссылка = &Ссылка
	               |
	               |ОБЪЕДИНИТЬ ВСЕ
	               |
	               |ВЫБРАТЬ
	               |	ПодразделенияОрганизаций.Наименование
	               |ИЗ
	               |	Справочник.ПодразделенияОрганизаций КАК ПодразделенияОрганизаций
	               |ГДЕ
	               |	ПодразделенияОрганизаций.Ссылка = &СсылкаРодитель
	               |
	               |ОБЪЕДИНИТЬ ВСЕ
	               |
	               |ВЫБРАТЬ
	               |	ПодразделенияОрганизаций.Наименование
	               |ИЗ
	               |	Справочник.ПодразделенияОрганизаций КАК ПодразделенияОрганизаций
	               |ГДЕ
	               |	ПодразделенияОрганизаций.Ссылка = &СсылкаРодительРодитель";
	ЗапросПоПодразделениям.Текст = ТекстЗапроса;
	ЗапросПоПодразделениям.УстановитьПараметр("Ссылка",СтрокаДанных.ПодразделениеПеревода);
	ЗапросПоПодразделениям.УстановитьПараметр("СсылкаРодитель",СтрокаДанных.ПодразделениеПеревода.Родитель);
	ЗапросПоПодразделениям.УстановитьПараметр("СсылкаРодительРодитель",СтрокаДанных.ПодразделениеПеревода.Родитель.Родитель);
	
	ВыборкаПодразделений = ЗапросПоПодразделениям.Выполнить().Выбрать();
	
	Пока ВыборкаПодразделений.Следующий() Цикл 
		Подразделение =Подразделение + ?(ЗначениеЗаполнено(Подразделение)," ","")+ВыборкаПодразделений.Наименование;
	КонецЦикла;
	
	Если Подразделение="" Тогда 
		Возврат;
	Иначе 
		СтрокаДанных.ПодразделениеПеревода = СокрЛП(СтрЗаменить(Подразделение, "ШТАТ",""));
	КонецЕсли;

КонецПроцедуры

Функция ПолучитьНадбавку(Сотрудник, ВидНадбавки, Дата = Неопределено)
	ЗапросПоНадбавкам = Новый Запрос;
	ЗапросПоНадбавкам.Текст = "ВЫБРАТЬ
	                          |	ЗначенияПериодическихПоказателейРасчетаЗарплатыСотрудниковСрезПоследних.Значение
	                          |ИЗ
	                          |	РегистрСведений.ЗначенияПериодическихПоказателейРасчетаЗарплатыСотрудников.СрезПоследних КАК ЗначенияПериодическихПоказателейРасчетаЗарплатыСотрудниковСрезПоследних
	                          |ГДЕ
	                          |	ЗначенияПериодическихПоказателейРасчетаЗарплатыСотрудниковСрезПоследних.Сотрудник = &Сотрудник
	                          |	И ЗначенияПериодическихПоказателейРасчетаЗарплатыСотрудниковСрезПоследних.Показатель = &Показатель";
	ЗапросПоНадбавкам.УстановитьПараметр("Сотрудник",Сотрудник);							  
	ЗапросПоНадбавкам.УстановитьПараметр("Показатель",ВидНадбавки);
	Выборка = ЗапросПоНадбавкам.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда 
		Возврат Выборка.Значение;
	Иначе 
		Если ВидНадбавки.Наименование = "Северная надбавка" Тогда 
			Запрос = Новый Запрос;
			Запрос.Текст =
			"ВЫБРАТЬ
			|	ПроцентыСевернойНадбавкиФизическихЛицСрезПоследних.ПроцентСевернойНадбавки КАК ПроцентСевернойНадбавки
			|ИЗ
			|	РегистрСведений.ПроцентыСевернойНадбавкиФизическихЛиц.СрезПоследних(&Дата, ) КАК ПроцентыСевернойНадбавкиФизическихЛицСрезПоследних
			|ГДЕ
			|	ПроцентыСевернойНадбавкиФизическихЛицСрезПоследних.ФизическоеЛицо = &ФизическоеЛицо";
			Запрос.УстановитьПараметр("ФизическоеЛицо", Сотрудник.ФизическоеЛицо); 
			Запрос.УстановитьПараметр("Дата", ?(Дата=Неопределено,Дата(3999,1,1),Дата));
			
			Результат = Запрос.Выполнить();
			
			Если Не Результат.Пустой() Тогда
				Выборка = Результат.Выбрать();
				Если Выборка.Следующий() Тогда
					Возврат Выборка.ПроцентСевернойНадбавки;
				Иначе
					Возврат 0;
				КонецЕсли; 
			КонецЕсли;
		Иначе
			Возврат 0;
		КонецЕсли;
	КонецЕсли;
КонецФункции


