Процедура Отправить(Стр, ТабличныеДокументы) Экспорт 
	
		Отказ = Ложь;
		
		ТабличныйДокумент = Новый ТабличныйДокумент;
		
		Если Стр.Адрес = "" Тогда 
			Сообщить("У сотрудника " + Стр.Физлицо + " не обнаружен e-mail (основной) для отправки сообщения.");
		Иначе
			ПодготовитьИОтправитьДанные(Стр.Физлицо, Стр.Адрес, Организация, ТабличныйДокумент, Отказ);
			Если Отказ Тогда
				Сообщить("Для " +  Стр.Физлицо+" расчетный лист не отправлен.");
				Возврат;
			КонецЕсли;
			ТабличныеДокументы.Добавить(ТабличныйДокумент, Стр.Адрес);
		КонецЕсли;
	
КонецПроцедуры

Процедура ПодготовитьИОтправитьДанные(ТекРаботник, ТекАдрес, Организация, ТабличныйДокумент, Отказ) Экспорт 
	
	ТабличныйДокумент = Новый ТабличныйДокумент;
	
	ВариантОтчета = ?(ЗначениеЗаполнено(ВариантОтчета),ВариантОтчета,"РасчетныйЛисток");
	
	Отчет = Отчеты.АнализНачисленийИУдержаний.Создать();
	
	Отчет.ИнициализироватьОтчет(ВариантОтчета);
	Отчет.КомпоновщикНастроек.ЗагрузитьНастройки(Отчет.СхемаКомпоновкиДанных.ВариантыНастроек[?(ЗначениеЗаполнено(ВариантОтчета),ВариантОтчета,"РасчетныйЛисток")].Настройки);
	
	ЭлементОтбора = Отчет.КомпоновщикНастроек.Настройки.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ЭлементОтбора.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Сотрудник"); 
	ЭлементОтбора.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно; 
	ЭлементОтбора.ПравоеЗначение = ТекРаботник; 
	ЭлементОтбора.Использование = Истина;   
	
	Настройки = Отчет.КомпоновщикНастроек.ПолучитьНастройки();
	
	Для Каждого ЭлементНастроек из Настройки.Отбор.Элементы Цикл 
		Если ЭлементНастроек.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ФизическоеЛицо") Тогда 
			ЭлементНастроек.Использование = Истина;
			ЭлементНастроек.ПравоеЗначение = ТекРаботник.ФизическоеЛицо;
			ЭлементНастроек.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
		КонецЕсли;
	КонецЦикла;
	
	// проверим заполнение настроек отчета
	ОтборНайден = Ложь;
	Для Каждого ЭлементНастроек из Настройки.Отбор.Элементы Цикл 
		Если ЭлементНастроек.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Сотрудник") Тогда 
			ОтборСотрудникаНайден = Истина;
			Если ЭлементНастроек.ПравоеЗначение = Неопределено  ИЛИ Не ЗначениеЗаполнено(ЭлементНастроек.ПравоеЗначение) ИЛИ Не ЭлементНастроек.ПравоеЗначение = ТекРаботник Тогда 
				Отказ = Истина;
				Возврат;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	Если Не ОтборСотрудникаНайден Тогда 
		Отказ=Истина;
		Возврат;
	КонецЕсли; 
	
	ПериодСКД = Настройки.ПараметрыДанных.Элементы.Найти("Период");
	ПериодСКД.Значение = Период;	
	ПериодСКД.Использование = Истина;
	Отчет.КомпоновщикНастроек.ЗагрузитьНастройки(Настройки);
		
	Отчет.СкомпоноватьРезультат(ТабличныйДокумент);
	
КонецПроцедуры

/////////////////////////////////////////////////////////////////////////////
// ОПИСАНИЕ ИНТЕРФЕЙСОВ

// Интерфейс для регистрации обработки.
// Вызывается при добавлении обработки в справочник "ВнешниеОбработки"
//
// Возвращаемое значение:
// Структура:
// Вид - строка - возможные значения:	"ДополнительнаяОбработка"
//										"ДополнительныйОтчет"
//										"ЗаполнениеОбъекта"
//										"Отчет"
//										"ПечатнаяФорма"
//										"СозданиеСвязанныхОбъектов"
//
// Назначение - массив строк имен объектов метаданных в формате:
//			<ИмяКлассаОбъектаМетаданного>.[ * | <ИмяОбъектаМетаданных>]
//			Например, "Документ.СчетЗаказ" или "Справочник.*"
//			Прим. параметр имеет смысл только для назначаемых обработок
//
// Наименование - строка - наименование обработки, которым будет заполнено
//						наименование справочника по умолчанию - краткая строка для
//						идентификации обработки администратором
//
// Версия - строка - версия обработки в формате <старший номер>.<младший номер>
//					используется при загрузке обработок в информационную базу
// БезопасныйРежим – Булево – Если истина, обработка будет запущена в безопасном режиме.
//							Более подбробная информация в справке.
//
// Информация - Строка- краткая информация по обработке, описание обработки
//
// Команды - ТаблицаЗначений - команды, поставляемые обработкой, одная строка таблицы соотвествует
//							одной команде
//				колонки: 
//				 - Представление - строка - представление команды конечному пользователю
//				 - Идентификатор - строка - идентефикатор команды. В случае печатных форм
//											перечисление через запятую списка макетов
//				 - Использование - строка - варианты запуска обработки:
//						"ОткрытиеФормы" - открыть форму обработки
//						"ВызовКлиентскогоМетода" - вызов клиентского экспортного метода из формы обработки
//						"ВызовСерверногоМетода" - вызов серверного экспортного метода из модуля объекта обработки
//				 - ПоказыватьОповещение – Булево – если Истина, требуется оказывать оповещение при начале
//								и при окончании запуска обработки. Прим. Имеет смысл только
//								при запуске обработки без открытия формы.
//				 - Модификатор – строка - для печатных форм MXL, которые требуется
//										отображать в форме ПечатьДокументов подсистемы Печать
//										требуется установить как "ПечатьMXL"
//
Функция СведенияОВнешнейОбработке() Экспорт
	
	ПараметрыРегистрации = Новый Структура;
	
	ПараметрыРегистрации.Вставить("Вид", "ДополнительнаяОбработка");
	ПараметрыРегистрации.Вставить("Назначение", Неопределено);
	ПараметрыРегистрации.Вставить("Наименование", НСтр("ru = 'ППФ Рассылка расчетных листков (новый)'"));
	ПараметрыРегистрации.Вставить("Версия", "0.1");
	ПараметрыРегистрации.Вставить("БезопасныйРежим", Ложь);
	ПараметрыРегистрации.Вставить("Информация", НСтр("ru = 'ППФ Рассылка расчетных листков (новый)'"));
	
	ТаблицаКоманд = ПолучитьТаблицуКоманд();
		
	ДобавитьКоманду(ТаблицаКоманд,
					НСтр("ru = 'ППФ Рассылка расчетных листков (новый)'"),
					"ППФ_ФормированиеРасчетныхЛистковПоЗП",
					"ОткрытиеФормы");
	
	ПараметрыРегистрации.Вставить("Команды", ТаблицаКоманд);
	
	Возврат ПараметрыРегистрации;
	
КонецФункции

/////////////////////////////////////////////////////////////////////////////
// ВСПОМОГАТЕЛЬНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ

Функция ПолучитьТаблицуКоманд()
	
	Команды = Новый ТаблицаЗначений;
	Команды.Колонки.Добавить("Представление", Новый ОписаниеТипов("Строка"));
	Команды.Колонки.Добавить("Идентификатор", Новый ОписаниеТипов("Строка"));
	Команды.Колонки.Добавить("Использование", Новый ОписаниеТипов("Строка"));
	Команды.Колонки.Добавить("ПоказыватьОповещение", Новый ОписаниеТипов("Булево"));
	Команды.Колонки.Добавить("Модификатор", Новый ОписаниеТипов("Строка"));
	
	Возврат Команды;
	
КонецФункции

Процедура ДобавитьКоманду(ТаблицаКоманд, Представление, Идентификатор, Использование, ПоказыватьОповещение = Ложь, Модификатор = "")
	
	НоваяКоманда = ТаблицаКоманд.Добавить();
	НоваяКоманда.Представление = Представление;
	НоваяКоманда.Идентификатор = Идентификатор;
	НоваяКоманда.Использование = Использование;
	НоваяКоманда.ПоказыватьОповещение = ПоказыватьОповещение;
	НоваяКоманда.Модификатор = Модификатор;
	
КонецПроцедуры

