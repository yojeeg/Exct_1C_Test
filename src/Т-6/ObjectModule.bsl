Перем СоответствиеДолжностьПечатнойФормы;

/////////////////////////////////////////////////////////////////////////
///////СВЕДЕНИЯ ОБ ОБРАБОТКЕ

Функция ПолучитьТаблицуКоманд()
	
	Команды = Новый ТаблицаЗначений;
	// Как будет выглядеть описание печатной формы для пользователя
	Команды.Колонки.Добавить("Представление", Новый ОписаниеТипов("Строка"));
	// Имя нашего макета, что бы могли отличить вызванную команду в обработке печати
	Команды.Колонки.Добавить("Идентификатор", Новый ОписаниеТипов("Строка"));
	// Тут задается, как должна вызваться команда обработки
	// Возможные варианты:
	// - ОткрытиеФормы - в этом случае в колонке идентификатор должно быть указано имя формы, которое должна будет открыть система
	// - ВызовКлиентскогоМетода - вызвать клиентскую экспортную процедуру из модуля формы обработки
	// - ВызовСерверногоМетода - вызвать серверную экспортную процедуру из модуля объекта обработки
	Команды.Колонки.Добавить("Использование", Новый ОписаниеТипов("Строка"));
	// Следующий параметр указывает, необходимо ли показывать оповещение при начале и завершению работы обработки. Не имеет смысла при открытии формы
	Команды.Колонки.Добавить("ПоказыватьОповещение", Новый ОписаниеТипов("Булево"));
	// Для печатной формы должен содержать строку ПечатьMXL 
	Команды.Колонки.Добавить("Модификатор", Новый ОписаниеТипов("Строка"));
	
	Возврат Команды;
	
КонецФункции

Функция ДобавитьКоманду(ТаблицаКоманд, Представление, Идентификатор, Использование, ПоказыватьОповещение = Ложь, Модификатор = "")
	НоваяКоманда = ТаблицаКоманд.Добавить();
	НоваяКоманда. Представление = Представление;
	НоваяКоманда. Идентификатор= Идентификатор;
	НоваяКоманда. Использование= Использование;
	НоваяКоманда. ПоказыватьОповещение= ПоказыватьОповещение;
	НоваяКоманда. Модификатор= Модификатор;
КонецФункции

Функция СведенияОВнешнейОбработке() Экспорт
	ПараметрыРегистрации = Новый Структура;
	МассивНазначений = Новый Массив;
	МассивНазначений.Добавить("Документ.Отпуск");
	МассивНазначений.Добавить("Документ.ОтпускПоУходуЗаРебенком");
	МассивНазначений.Добавить("Документ.ОплатаДнейУходаЗаДетьмиИнвалидами");
	ПараметрыРегистрации.Вставить("Вид", "ПечатнаяФорма"); //может быть - ЗаполнениеОбъекта, ДополнительныйОтчет, СозданиеСвязанныхОбъектов... 
	ПараметрыРегистрации.Вставить("Назначение", МассивНазначений);
	ПараметрыРегистрации.Вставить("Наименование", " Приказ на отпуск Т-6 "); //имя под которым обработка будет зарегестрирована в справочнике внешних обработок
	ПараметрыРегистрации.Вставить("Версия", "1.0");
	ПараметрыРегистрации.Вставить("БезопасныйРежим", Ложь);
	ПараметрыРегистрации.Вставить("Информация", " Приказ на отпуск Т-6 ");//так будет выглядеть описание печ.формы для пользователя
	ТаблицаКоманд = ПолучитьТаблицуКоманд();
	ДобавитьКоманду(ТаблицаКоманд, "ППФ Приказ о предоставлении отпуска (Т-6)", "ПФ_MXL_Т6", "ВызовСерверногоМетода", Истина);
	ПараметрыРегистрации.Вставить("Команды", ТаблицаКоманд);
	Возврат ПараметрыРегистрации;
КонецФункции

/////////////////////////////////////////////////////////////////////////

/////////////////////////////////////////////////////////////////////////
///////СЕРВИСНЫЕ ПРОЦЕДУРЫ И ФУКНЦИИ


// Процедура печати документа.
// Возвращает табличный документ - сформированную печатную форму приказа о предоставлении отпуска 
//
// Параметры:
//	МассивОбъектов - массив сотрудников
//  ОбъектыПечати  - Список значений  - Объекты печати (значение - ссылка на объект, представление - имя области в которой был выведен объект)
//
// Возвращаемое значение:
//	Табличный документ
//

Функция ТабличныйДокументПриказаТ6(Макет, МассивОбъектов, ОбъектыПечати)
	
	Если МассивОбъектов.Количество()>0 И ТипЗнч(МассивОбъектов[0].Ссылка) = Тип("ДокументСсылка.ОплатаДнейУходаЗаДетьмиИнвалидами") Тогда 
		ДокументРезультат = Новый ТабличныйДокумент;
		ДокументРезультат.ОриентацияСтраницы = ОриентацияСтраницы.Портрет;
		ДокументРезультат.АвтоМасштаб = Истина;
		ДокументРезультат.КлючПараметровПечати = "ПараметрыПечати_ПриказОПредоставленииОтпуска";
		
		НомерСтрокиНачало = ДокументРезультат.ВысотаТаблицы + 1;
		
		МассивПараметров = ПолучитьДанныеПоОплатеДнейУхода(МассивОбъектов[0].Ссылка);
		Для Каждого ПараметрыМакета Из МассивПараметров Цикл 
			Если Макет <> Неопределено Тогда
				
				МакетШапка = Макет.ПолучитьОбласть("Шапка");
				МакетШапка.Параметры.Заполнить(ПараметрыМакета);
				ДокументРезультат.Вывести(МакетШапка);
				
				МакетРаботник = Макет.ПолучитьОбласть("Работник");
				МакетРаботник.Параметры.Заполнить(ПараметрыМакета);
				
				ДокументРезультат.Вывести(МакетРаботник);
				
				МакетПодвал = Макет.ПолучитьОбласть("Подвал");
				МакетПодвал.Параметры.Заполнить(ПараметрыМакета);
				ДокументРезультат.Вывести(МакетПодвал);				
				УправлениеПечатью.ЗадатьОбластьПечатиДокумента(ДокументРезультат, НомерСтрокиНачало, ОбъектыПечати, ПараметрыМакета.Ссылка);
				
				ДокументРезультат.АвтоМасштаб = Истина;
			КонецЕсли;
		КонецЦикла;
		Возврат ДокументРезультат;
		
	Иначе 
		ДокументРезультат = Новый ТабличныйДокумент;
		ДокументРезультат.ОриентацияСтраницы = ОриентацияСтраницы.Портрет;
		ДокументРезультат.АвтоМасштаб = Истина;
		
		НомерСтрокиНачало = ДокументРезультат.ВысотаТаблицы + 1;
		
		ДокументРезультат.КлючПараметровПечати = "ПараметрыПечати_ПриказОПредоставленииОтпуска";
		МассивДанныхЗаполнения = ДанныеДляПечатиКадровогоПриказаТ6(МассивОбъектов);
		
		Если Макет <> Неопределено Тогда
			
			ПервыйПриказ = Истина;
			Для каждого ПараметрыМакета из МассивДанныхЗаполнения Цикл
				
				НомерСтрокиНачало = ДокументРезультат.ВысотаТаблицы + 1;
				
				Если Не ПервыйПриказ Тогда
					ДокументРезультат.ВывестиГоризонтальныйРазделительСтраниц();
				Иначе
					ПервыйПриказ = Ложь;
				КонецЕсли;
				
				МакетШапка = Макет.ПолучитьОбласть("Шапка");
				МакетШапка.Параметры.Заполнить(ПараметрыМакета);
				ДокументРезультат.Вывести(МакетШапка);
				
				МакетРаботник = Макет.ПолучитьОбласть("Работник");
				МакетРаботник.Параметры.Заполнить(ПараметрыМакета);
				
				ДокументРезультат.Вывести(МакетРаботник);
				
				МакетПодвал = Макет.ПолучитьОбласть("Подвал");
				МакетПодвал.Параметры.Заполнить(ПараметрыМакета);
				ДокументРезультат.Вывести(МакетПодвал);				
				УправлениеПечатью.ЗадатьОбластьПечатиДокумента(ДокументРезультат, НомерСтрокиНачало, ОбъектыПечати, ПараметрыМакета.Ссылка);
				
				ДокументРезультат.АвтоМасштаб = Истина;
				
			КонецЦикла;
			
		КонецЕсли;
		
		ДокументРезультат.АвтоМасштаб = Истина;
		
		Возврат ДокументРезультат;

	КонецЕсли;
	
	
КонецФункции

Функция ПолучитьДанныеПоОплатеДнейУхода(МассивОбъектов)
	
	МассивПараметров = Новый Массив;
	
	Запрос = Новый Запрос();
	Запрос.Текст = "ВЫБРАТЬ
	               |	ОплатаДнейУходаЗаДетьмиИнвалидами.Сотрудник.Код КАК ТабельныйНомер,
	               |	ФИОФизическихЛицСрезПоследних.Фамилия +  "" "" + ФИОФизическихЛицСрезПоследних.Имя + "" ""+ФИОФизическихЛицСрезПоследних.Отчество КАК ФИОПолностью,
	               |	ТекущиеКадровыеДанныеСотрудников.ТекущаяДолжность КАК Должность,
				   //|	ОплатаДнейУходаЗаДетьмиИнвалидами.ДатаНачала КАК ДатаСДоп,
				   //|	ОплатаДнейУходаЗаДетьмиИнвалидами.ДатаОкончания КАК ДатаПоДоп,
	               |	""Дополнительные оплачиваемые выходные дни для ухода за ребенком-инвалидом (ст.262 ТК.РФ)"" КАК ВидДопОтпуска,
	               |	ОплатаДнейУходаЗаДетьмиИнвалидами.Номер КАК НомерДок,
	               |	ОплатаДнейУходаЗаДетьмиИнвалидами.Дата КАК ДатаДок,
	               |	ОплатаДнейУходаЗаДетьмиИнвалидами.Организация.НаименованиеПолное КАК НазваниеОрганизации,
	               |	ОплатаДнейУходаЗаДетьмиИнвалидами.Организация.КодПоОКПО КАК КодПоОКПО,
	               |	ТекущиеКадровыеДанныеСотрудников.ТекущееПодразделение.Наименование + "" "" + ЕСТЬNULL(ТекущиеКадровыеДанныеСотрудников.ТекущееПодразделение.Родитель.Наименование,"""")+ "" "" + ЕСТЬNULL(ТекущиеКадровыеДанныеСотрудников.ТекущееПодразделение.Родитель.Родитель.Наименование,"""") КАК Подразделение,
	               |	ОплатаДнейУходаЗаДетьмиИнвалидами.ФизическоеЛицо.Пол КАК Пол,
	               |	ОплатаДнейУходаЗаДетьмиИнвалидами.Организация
	               |ИЗ
	               |	Документ.ОплатаДнейУходаЗаДетьмиИнвалидами КАК ОплатаДнейУходаЗаДетьмиИнвалидами
	               |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ФИОФизическихЛиц.СрезПоследних КАК ФИОФизическихЛицСрезПоследних
	               |		ПО ОплатаДнейУходаЗаДетьмиИнвалидами.ФизическоеЛицо = ФИОФизическихЛицСрезПоследних.ФизическоеЛицо
	               |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ТекущиеКадровыеДанныеСотрудников КАК ТекущиеКадровыеДанныеСотрудников
	               |		ПО ОплатаДнейУходаЗаДетьмиИнвалидами.Сотрудник = ТекущиеКадровыеДанныеСотрудников.Сотрудник
	               |ГДЕ
	               |	ОплатаДнейУходаЗаДетьмиИнвалидами.Ссылка = &Ссылка";
	Запрос.УстановитьПараметр("Ссылка",МассивОбъектов);				   
	Результат = Запрос.Выполнить();
	Если Не Результат.Пустой() Тогда 
		
		Если МассивОбъектов.ДниУхода.Количество()=0 Тогда 
			Возврат МассивПараметров;
		Иначе 
			// Проверка интервала дней на прерывание			
			МассивДней = СформироватьИнтервалыДнейУхода(МассивОбъектов.ДниУхода.ВыгрузитьКолонку("Дата"));
			Для  Каждого Интервал Из МассивДней Цикл 
				СтруктураПараметров = Новый Структура;
				Выборка = Результат.Выбрать();
				Если Выборка.Следующий() Тогда 
					СтруктураПараметров.Вставить("ТабельныйНомер",Выборка.ТабельныйНомер);
					РезультатСклонения = "";
					ФизическиеЛицаЗарплатаКадры.Просклонять(Выборка.ФИОПолностью, 3, РезультатСклонения, Выборка.Пол);
					СтруктураПараметров.Вставить("Ссылка",			МассивОбъектов);
					СтруктураПараметров.Вставить("Работник",		РезультатСклонения);
					СтруктураПараметров.Вставить("Должность",		Выборка.Должность);
					СтруктураПараметров.Вставить("ВидДопОтпуска",	Выборка.ВидДопОтпуска);
					
					ПредставлениеДатыНачалаДопОтпуска  		= Формат(Интервал[0], "ДЛФ=DD");
					СтруктураПараметров.Вставить("ДатаСДопЧисло",			СокрЛП(Лев(ПредставлениеДатыНачалаДопОтпуска,2)));
					СтруктураПараметров.Вставить("ДатаСДопМесяцГод", 		СокрЛП(Прав(ПредставлениеДатыНачалаДопОтпуска, СтрДлина(ПредставлениеДатыНачалаДопОтпуска)-2)));
					СтруктураПараметров.Вставить("ДатаНачалаВсегоЧисло",	СтруктураПараметров.ДатаСДопЧисло);
					СтруктураПараметров.Вставить("ДатаНачалаВсегоМесяцГод", СтруктураПараметров.ДатаСДопМесяцГод);			
					
					
					ПредставлениеДатыОкончанияДопОтпуска  	= Формат(Интервал[Интервал.Количество()-1], "ДЛФ=DD");
					СтруктураПараметров.Вставить("ДатаПоДопЧисло",				СокрЛП(Лев(ПредставлениеДатыОкончанияДопОтпуска,2)));
					СтруктураПараметров.Вставить("ДатаПоДопМесяцГод",			СокрЛП(Прав(ПредставлениеДатыОкончанияДопОтпуска, СтрДлина(ПредставлениеДатыОкончанияДопОтпуска)-2)));
					СтруктураПараметров.Вставить("ДатаОкончанияВсегоЧисло",		СтруктураПараметров.ДатаПоДопЧисло);
					СтруктураПараметров.Вставить("ДатаОкончанияВсегоМесяцГод", 	СтруктураПараметров.ДатаПоДопМесяцГод);						
					
					СтруктураПараметров.Вставить("ПродолжительностьДоп",	Интервал.Количество());
					СтруктураПараметров.Вставить("ПродолжительностьВсего",	Интервал.Количество());
					СтруктураПараметров.Вставить("НомерДок",				Выборка.НомерДок);
					СтруктураПараметров.Вставить("ДатаДок",					Выборка.ДатаДок);
					СтруктураПараметров.Вставить("НазваниеОрганизации",		Выборка.НазваниеОрганизации);
					СтруктураПараметров.Вставить("КодПоОКПО",				Выборка.КодПоОКПО);
					СтруктураПараметров.Вставить("Подразделение",			СокрЛП(Выборка.Подразделение));
					
					Сведения = "РуководительКадровойСлужбы,ДолжностьРуководителяКадровойСлужбы";
					ОтветственныеЛица = СведенияОбОтветственныхЛицах.СведенияОбОтветственныхЛицах(Выборка.Организация, Сведения, Выборка.ДатаДок);			
					СтруктураПараметров.Вставить("ДолжностьРуководителя",	ОтветственныеЛица.ДолжностьРуководителяКадровойСлужбы);
					
					ЗапросФИОФизЛица = Новый Запрос();
					ЗапросФИОФизЛица.Текст = "ВЫБРАТЬ
					|	ФИОФизическихЛицСрезПоследних.Фамилия,
					|	ФИОФизическихЛицСрезПоследних.Имя,
					|	ФИОФизическихЛицСрезПоследних.Отчество
					|ИЗ
					|	РегистрСведений.ФИОФизическихЛиц.СрезПоследних(&Период, ФизическоеЛицо = &ФизическоеЛицо) КАК ФИОФизическихЛицСрезПоследних";
					ЗапросФИОФизЛица.УстановитьПараметр("Период",Выборка.ДатаДок);
					ЗапросФИОФизЛица.УстановитьПараметр("ФизическоеЛицо",ОтветственныеЛица.РуководительКадровойСлужбы);			
					ВыборкаЗапросФИОФизЛица = ЗапросФИОФизЛица.Выполнить().Выбрать();			
					Если ВыборкаЗапросФИОФизЛица.Следующий() Тогда 
						СтруктураПараметров.Вставить("РуководительРасшифровкаПодписи", Лев(ВыборкаЗапросФИОФизЛица.Имя,1) +"."+ Лев(ВыборкаЗапросФИОФизЛица.Отчество,1) +". "+ ВыборкаЗапросФИОФизЛица.Фамилия);			
					Иначе 
						СтруктураПараметров.Вставить("РуководительРасшифровкаПодписи", ОтветственныеЛица.РуководительКадровойСлужбы);
					КонецЕсли;
					
					МассивПараметров.Добавить(СтруктураПараметров);
				КонецЕсли;
			КонецЦикла;
			
			Возврат МассивПараметров;
			
		КонецЕсли;
	Иначе 
		Возврат МассивПараметров;
	КонецЕсли;
	
КонецФункции

Функция СформироватьИнтервалыДнейУхода(МассивДат)
	СекундВСутках = 24*60*60;
	МассивИнтервалов = Новый Массив;
	КоличествоДат = МассивДат.Количество();
	Если КоличествоДат = 1 Тогда 
		МассивИнтервалов.Добавить(МассивДат);
		Возврат МассивИнтервалов;
	Иначе 
		МассивНовыхДат = Новый Массив;
		МассивНовыхДат.Добавить(МассивДат[0]);
		Для сч=1 По КоличествоДат-1 Цикл 
			Если МассивДат[сч]-МассивДат[сч-1]>СекундВСутках Тогда 
				МассивИнтервалов.Добавить(МассивНовыхДат);
				МассивНовыхДат = Новый Массив;
				МассивНовыхДат.Добавить(МассивДат[сч]);
			Иначе 
				МассивНовыхДат.Добавить(МассивДат[сч]);
			КонецЕсли;
		КонецЦикла; 
		МассивИнтервалов.Добавить(МассивНовыхДат);
		Возврат МассивИнтервалов;
	КонецЕсли;
КонецФункции

Функция ДанныеДляПечатиКадровогоПриказаТ6(МассивОбъектов)
	
	МассивПараметров = Новый Массив;
	НомерДополнительногоОтпуска = 1;
	
	Результат = КадровыйУчет.СформироватьЗапросДляТ6(МассивОбъектов);
	
	Если Результат.Пустой() Тогда
		Возврат МассивПараметров
	КонецЕсли;  	
	
	ВыборкаПоСсылкам = Результат.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	Пока ВыборкаПоСсылкам.Следующий() Цикл
		
		Выборка = ВыборкаПоСсылкам.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
		
		Пока Выборка.Следующий() Цикл
			
			Параметры = СтруктураПараметровПриказаТ6();
			
			ВыборкаПоВидуОтпуска = Выборка.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);   
			
			ДатаНачалаВсего = '00010101';
			ДатаОкончанияВсего = '00010101';
			ШапкаЗаполнена = Ложь;
			ПродолжительностьВсего = 0;
			ОрганизацияДокумента = Неопределено;
			Если ВыборкаПоВидуОтпуска.НайтиСледующий(Новый Структура("ЭтоОсновнойОтпуск", Истина)) Тогда
				
				КадровыйУчет.ЗаполнитьПараметрыКадровогоПриказа(Параметры, ВыборкаПоВидуОтпуска);
				
				Параметры.ДатаДок = Формат(ВыборкаПоВидуОтпуска.ДатаДок, "ДЛФ=Д");
				ШапкаЗаполнена = Истина;
				
				ПредставлениеДатыНачалаОсновногоОтпуска  = Формат(ВыборкаПоВидуОтпуска.ДатаНачала, "ДЛФ=DD");
				Параметры.ДатаНачалаЧисло = ?(ЗначениеЗаполнено(ВыборкаПоВидуОтпуска.ДатаНачала), СокрЛП(Лев(ПредставлениеДатыНачалаОсновногоОтпуска,2)), "      ");
				Параметры.ДатаНачалаМесяцГод = ?(ЗначениеЗаполнено(ВыборкаПоВидуОтпуска.ДатаНачала),  СокрЛП(Прав(ПредставлениеДатыНачалаОсновногоОтпуска, СтрДлина(ПредставлениеДатыНачалаОсновногоОтпуска)-2)), "                     г.");
				
				ПредставлениеДатыОкончанияОсновногоОтпуска  = Формат(ВыборкаПоВидуОтпуска.ДатаОкончания, "ДЛФ=DD");
				Параметры.ДатаОкончанияЧисло = ?(ЗначениеЗаполнено(ВыборкаПоВидуОтпуска.ДатаОкончания), СокрЛП(Лев(ПредставлениеДатыОкончанияОсновногоОтпуска,2)), "      ");
				Параметры.ДатаОкончанияМесяцГод = ?(ЗначениеЗаполнено(ВыборкаПоВидуОтпуска.ДатаОкончания),  СокрЛП(Прав(ПредставлениеДатыОкончанияОсновногоОтпуска, СтрДлина(ПредставлениеДатыОкончанияОсновногоОтпуска)-2)), "                     г.");
				
				Если ЗначениеЗаполнено(ВыборкаПоВидуОтпуска.Продолжительность) Тогда
					Параметры.Продолжительность = ВыборкаПоВидуОтпуска.Продолжительность;
					ПродолжительностьВсего  = ВыборкаПоВидуОтпуска.Продолжительность;
				КонецЕсли;
				
				Если ЗначениеЗаполнено(ВыборкаПоВидуОтпуска.ДатаНачала) Тогда
					ДатаНачалаВсего = ВыборкаПоВидуОтпуска.ДатаНачала;
				КонецЕсли;	
				
				Если  ЗначениеЗаполнено(ВыборкаПоВидуОтпуска.ДатаОкончания) Тогда
					ДатаОкончанияВсего = ВыборкаПоВидуОтпуска.ДатаОкончания;
				КонецЕсли;
			КонецЕсли;
			
			ВыборкаПоВидуОтпуска.Сбросить();
			
			ДатаНачалаДоп = '00010101';
			ДатаОкончанияДоп = '00010101';
			СтрокаВидДопОтпуска = "";
			ПродолжительностьДоп = 0;
			
			Пока ВыборкаПоВидуОтпуска.НайтиСледующий(Новый Структура("ЭтоОсновнойОтпуск", Ложь)) Цикл
				Если НЕ ШапкаЗаполнена  Тогда
					КадровыйУчет.ЗаполнитьПараметрыКадровогоПриказа(Параметры, ВыборкаПоВидуОтпуска);
					Параметры.Продолжительность  = 0;
					Параметры.ДатаДок = Формат(?(ЗначениеЗаполнено(ВыборкаПоВидуОтпуска.ДатаДок), ВыборкаПоВидуОтпуска.ДатаДок, ТекущаяДатаСеанса()), "ДЛФ=Д");
					ШапкаЗаполнена = Истина;
				КонецЕсли;
				
				Если НЕ ЗначениеЗаполнено(ДатаНачалаДоп) ИЛИ ДатаНачалаДоп > ВыборкаПоВидуОтпуска.ДатаНачала Тогда
					ДатаНачалаДоп = ВыборкаПоВидуОтпуска.ДатаНачала;
				КонецЕсли;
				
				Если НЕ ЗначениеЗаполнено(ДатаОкончанияДоп) ИЛИ ДатаОкончанияДоп < ВыборкаПоВидуОтпуска.ДатаОкончания Тогда
					ДатаОкончанияДоп = ВыборкаПоВидуОтпуска.ДатаОкончания; 
				КонецЕсли;
				
				Если ЗначениеЗаполнено(ВыборкаПоВидуОтпуска.ПолноеНаименованиеОтпуска) Тогда
					СтрокаВидДопОтпуска = СтрокаВидДопОтпуска + ", " + Строка(ВыборкаПоВидуОтпуска.ПолноеНаименованиеОтпуска);
				КонецЕсли;
				
				Если ЗначениеЗаполнено(ВыборкаПоВидуОтпуска.Продолжительность) Тогда
					ПродолжительностьДоп = ПродолжительностьДоп + ВыборкаПоВидуОтпуска.Продолжительность;
				КонецЕсли;
				
				// Заполнение параметров приложения к приказу
				ПараметрыДопОтпуска = Новый Структура;
				ПараметрыДопОтпуска.Вставить("НомерОтпуска", НомерДополнительногоОтпуска);
				ПараметрыДопОтпуска.Вставить("НазваниеОтпуска", Строка(ВыборкаПоВидуОтпуска.ПолноеНаименованиеОтпуска));
				ПараметрыДопОтпуска.Вставить("Продолжительность", ВыборкаПоВидуОтпуска.Продолжительность);
				ПараметрыДопОтпуска.Вставить("Основание", ВыборкаПоВидуОтпуска.Основание);
				ПараметрыДопОтпуска.Вставить("УказанПериодЗаКоторыйПредоставляетсяОтпуск", ЗначениеЗаполнено(ВыборкаПоВидуОтпуска.НачалоПериодаЗаКоторыйПредоставляетсяОтпуск));
				
				ПредставлениеДаты  = Формат(ВыборкаПоВидуОтпуска.ДатаНачала, "ДЛФ=DD");
				ПараметрыДопОтпуска.Вставить("ДатаНачалаЧисло", ?(ЗначениеЗаполнено(ВыборкаПоВидуОтпуска.ДатаНачала), СокрЛП(Лев(ПредставлениеДаты,2)), "      "));
				ПараметрыДопОтпуска.Вставить("ДатаНачалаМесяцГод", ?(ЗначениеЗаполнено(ВыборкаПоВидуОтпуска.ДатаНачала),  СокрЛП(Прав(ПредставлениеДаты, СтрДлина(ПредставлениеДаты)-2)), "                     г."));
				
				ПредставлениеДаты  = Формат(ВыборкаПоВидуОтпуска.ДатаОкончания, "ДЛФ=DD");
				ПараметрыДопОтпуска.Вставить("ДатаОкончанияЧисло", ?(ЗначениеЗаполнено(ВыборкаПоВидуОтпуска.ДатаОкончания), СокрЛП(Лев(ПредставлениеДаты,2)), "      "));
				ПараметрыДопОтпуска.Вставить("ДатаОкончанияМесяцГод", ?(ЗначениеЗаполнено(ВыборкаПоВидуОтпуска.ДатаОкончания),  СокрЛП(Прав(ПредставлениеДаты, СтрДлина(ПредставлениеДаты)-2)), "                     г."));
				
				ПредставлениеДаты  = Формат(ВыборкаПоВидуОтпуска.НачалоПериодаЗаКоторыйПредоставляетсяОтпуск, "ДЛФ=DD");
				ПараметрыДопОтпуска.Вставить("ДатаНачалаПериодаЧисло", ?(ЗначениеЗаполнено(ВыборкаПоВидуОтпуска.НачалоПериодаЗаКоторыйПредоставляетсяОтпуск), СокрЛП(Лев(ПредставлениеДаты,2)), "      "));
				ПараметрыДопОтпуска.Вставить("ДатаНачалаПериодаМесяцГод", ?(ЗначениеЗаполнено(ВыборкаПоВидуОтпуска.НачалоПериодаЗаКоторыйПредоставляетсяОтпуск),  СокрЛП(Прав(ПредставлениеДаты, СтрДлина(ПредставлениеДаты)-2)), "                     г."));
				
				ПредставлениеДаты  = Формат(ВыборкаПоВидуОтпуска.КонецПериодаЗаКоторыйПредоставляетсяОтпуск, "ДЛФ=DD");
				ПараметрыДопОтпуска.Вставить("ДатаОкончанияПериодаЧисло", ?(ЗначениеЗаполнено(ВыборкаПоВидуОтпуска.КонецПериодаЗаКоторыйПредоставляетсяОтпуск), СокрЛП(Лев(ПредставлениеДаты,2)), "      "));
				ПараметрыДопОтпуска.Вставить("ДатаОкончанияПериодаМесяцГод", ?(ЗначениеЗаполнено(ВыборкаПоВидуОтпуска.КонецПериодаЗаКоторыйПредоставляетсяОтпуск),  СокрЛП(Прав(ПредставлениеДаты, СтрДлина(ПредставлениеДаты)-2)), "                     г."));
				
				Параметры.ДополнительныеОтпуска.Добавить(ПараметрыДопОтпуска);
				
				НомерДополнительногоОтпуска = НомерДополнительногоОтпуска + 1;
				
			КонецЦикла;
			
			ПредставлениеДатыНачалаДопОтпуска  = Формат(ДатаНачалаДоп, "ДЛФ=DD");
			Параметры.ДатаСДопЧисло = ?(ЗначениеЗаполнено(ДатаНачалаДоп), СокрЛП(Лев(ПредставлениеДатыНачалаДопОтпуска,2)), "      ");
			Параметры.ДатаСДопМесяцГод = ?(ЗначениеЗаполнено(ДатаНачалаДоп),  СокрЛП(Прав(ПредставлениеДатыНачалаДопОтпуска, СтрДлина(ПредставлениеДатыНачалаДопОтпуска)-2)), "                     г.");
			
			ПредставлениеДатыОкончанияДопОтпуска  = Формат(ДатаОкончанияДоп, "ДЛФ=DD");
			Параметры.ДатаПоДопЧисло = ?(ЗначениеЗаполнено(ДатаОкончанияДоп), СокрЛП(Лев(ПредставлениеДатыОкончанияДопОтпуска,2)), "      ");
			Параметры.ДатаПоДопМесяцГод = ?(ЗначениеЗаполнено(ДатаОкончанияДоп),  СокрЛП(Прав(ПредставлениеДатыОкончанияДопОтпуска, СтрДлина(ПредставлениеДатыОкончанияДопОтпуска)-2)), "                     г.");
			
			Если ЗначениеЗаполнено(ПродолжительностьДоп) Тогда
				Параметры.ПродолжительностьДоп = ПродолжительностьДоп;
				ПродолжительностьВсего = ПродолжительностьВсего + ПродолжительностьДоп;
			КонецЕсли;
			
			Если ЗначениеЗаполнено(ПродолжительностьВсего) Тогда
				Параметры.ПродолжительностьВсего = ПродолжительностьВсего;
			КонецЕсли;
			
			Если ЗначениеЗаполнено(СтрокаВидДопОтпуска) Тогда
				СтрокаВидДопОтпуска = Прав(СтрокаВидДопОтпуска,СтрДлина(СтрокаВидДопОтпуска) - 2);
				Параметры.ВидДопОтпуска = СтрокаВидДопОтпуска;
			КонецЕсли;
			
			Если ТипЗнч(ВыборкаПоВидуОтпуска.Ссылка) = Тип("ДокументСсылка.ОтпускПоУходуЗаРебенком") Тогда 
				Параметры.ВидДопОтпуска = "Отпуск по уходу за ребенком до 3-х лет";
			КонецЕсли;
			
			Если НЕ ЗначениеЗаполнено(ДатаНачалаВсего) ИЛИ (ЗначениеЗаполнено(ДатаНачалаДоп) И ДатаНачалаВсего > ДатаНачалаДоп) Тогда
				ДатаНачалаВсего = ДатаНачалаДоп;
			КонецЕсли;
			
			Если НЕ ЗначениеЗаполнено(ДатаОкончанияВсего) ИЛИ (ЗначениеЗаполнено(ДатаОкончанияДоп) И ДатаОкончанияВсего < ДатаОкончанияДоп) Тогда
				ДатаОкончанияВсего = ДатаОкончанияДоп;
			КонецЕсли;
			
			ПредставлениеДатыНачалаВсего  = Формат(ДатаНачалаВсего, "ДЛФ=DD");
			Параметры.ДатаНачалаВсегоЧисло = ?(ЗначениеЗаполнено(ДатаНачалаВсего), СокрЛП(Лев(ПредставлениеДатыНачалаВсего,2)), "      ");
			Параметры.ДатаНачалаВсегоМесяцГод = ?(ЗначениеЗаполнено(ДатаНачалаВсего),  СокрЛП(Прав(ПредставлениеДатыНачалаВсего, СтрДлина(ПредставлениеДатыНачалаВсего)-2)), "                     г.");
			
			ПредставлениеДатыОкончанияВсего  = Формат(ДатаОкончанияВсего, "ДЛФ=DD");
			Параметры.ДатаОкончанияВсегоЧисло = ?(ЗначениеЗаполнено(ДатаОкончанияВсего), СокрЛП(Лев(ПредставлениеДатыОкончанияВсего,2)), "      ");
			Параметры.ДатаОкончанияВсегоМесяцГод = ?(ЗначениеЗаполнено(ДатаОкончанияВсего),  СокрЛП(Прав(ПредставлениеДатыОкончанияВсего, СтрДлина(ПредставлениеДатыОкончанияВсего)-2)), "                     г.");
			
			Если Параметры.Свойство("Подразделение") Тогда 
				Подразделение = Параметры.Подразделение;
				
				ЗапросПоПодразделениям = Новый Запрос;
				ТекстЗапроса = "ВЫБРАТЬ
				|	ПРЕДСТАВЛЕНИЕ(ПодразделенияОрганизаций.Ссылка) КАК Ссылка
				|ИЗ
				|	Справочник.ПодразделенияОрганизаций КАК ПодразделенияОрганизаций
				|ГДЕ
				|	ПодразделенияОрганизаций.Ссылка = &Ссылка
				|
				|ОБЪЕДИНИТЬ ВСЕ
				|
				|ВЫБРАТЬ
				|	ПРЕДСТАВЛЕНИЕ(ПодразделенияОрганизаций.Ссылка)
				|ИЗ
				|	Справочник.ПодразделенияОрганизаций КАК ПодразделенияОрганизаций
				|ГДЕ
				|	ПодразделенияОрганизаций.Ссылка = &СсылкаРодитель
				|
				|ОБЪЕДИНИТЬ ВСЕ
				|
				|ВЫБРАТЬ
				|	ПРЕДСТАВЛЕНИЕ(ПодразделенияОрганизаций.Ссылка)
				|ИЗ
				|	Справочник.ПодразделенияОрганизаций КАК ПодразделенияОрганизаций
				|ГДЕ
				|	ПодразделенияОрганизаций.Ссылка = &СсылкаРодительРодитель";
				ЗапросПоПодразделениям.Текст = ТекстЗапроса;
				ЗапросПоПодразделениям.УстановитьПараметр("Ссылка",Подразделение);
				ЗапросПоПодразделениям.УстановитьПараметр("СсылкаРодитель",Подразделение.Родитель);
				ЗапросПоПодразделениям.УстановитьПараметр("СсылкаРодительРодитель",Подразделение.Родитель.Родитель);
				
				ВыборкаПодразделений = ЗапросПоПодразделениям.Выполнить().Выбрать();
				
				СтрокаПодразделения = "";
				
				Пока ВыборкаПодразделений.Следующий() Цикл 			
					Если НРег(ВыборкаПодразделений.Ссылка) = "штат" Тогда Продолжить; КонецЕсли;
					Если НРег(ВыборкаПодразделений.Ссылка) = "агенты" Тогда Продолжить; КонецЕсли;
					СтрокаПодразделения = СтрокаПодразделения  + " " + ВыборкаПодразделений.Ссылка;
				КонецЦикла;
				
				Параметры.Подразделение = СтрокаПодразделения;
				
			КонецЕсли;
			
			РезультатСклонения = "";
			ФизическиеЛицаЗарплатаКадры.Просклонять(Параметры.Работник, 3, РезультатСклонения, Параметры.Пол);
			Параметры.Работник	= РезультатСклонения;
			
			Сведения = "РуководительКадровойСлужбы,ДолжностьРуководителяКадровойСлужбы";
			ОтветственныеЛица = СведенияОбОтветственныхЛицах.СведенияОбОтветственныхЛицах(Параметры.Ссылка.Организация, Сведения, Параметры.Ссылка.Дата);
			
			//Параметры.ДолжностьРуководителя = "Заместитель начальника отдела кадрового администрирования";
			Параметры.ДолжностьРуководителя = ОтветственныеЛица.ДолжностьРуководителяКадровойСлужбы;
			
			ЗапросФИОФизЛица = Новый Запрос();
			ЗапросФИОФизЛица.Текст = "ВЫБРАТЬ
			|	ФИОФизическихЛицСрезПоследних.Фамилия,
			|	ФИОФизическихЛицСрезПоследних.Имя,
			|	ФИОФизическихЛицСрезПоследних.Отчество
			|ИЗ
			|	РегистрСведений.ФИОФизическихЛиц.СрезПоследних(&Период, ФизическоеЛицо = &ФизическоеЛицо) КАК ФИОФизическихЛицСрезПоследних";
			ЗапросФИОФизЛица.УстановитьПараметр("Период",Параметры.Ссылка.Дата);
			ЗапросФИОФизЛица.УстановитьПараметр("ФизическоеЛицо",ОтветственныеЛица.РуководительКадровойСлужбы);
			
			ВыборкаЗапросФИОФизЛица = ЗапросФИОФизЛица.Выполнить().Выбрать();
			
			Если ВыборкаЗапросФИОФизЛица.Следующий() Тогда 
				Параметры.РуководительРасшифровкаПодписи = Лев(ВыборкаЗапросФИОФизЛица.Имя,1) +"."+ Лев(ВыборкаЗапросФИОФизЛица.Отчество,1) +". "+ ВыборкаЗапросФИОФизЛица.Фамилия;			
			Иначе 
				Параметры.РуководительРасшифровкаПодписи = ОтветственныеЛица.РуководительКадровойСлужбы;
			КонецЕсли;
			МассивПараметров.Добавить(Параметры);
			
		КонецЦикла;
	КонецЦикла;
	
	Возврат МассивПараметров;
КонецФункции 

Функция СтруктураПараметровПриказаТ6()
	Параметры = КадровыйУчет.ПараметрыКадровогоПриказа();
	
	Параметры.Вставить("НазваниеОрганизации");				
	Параметры.Вставить("КодПоОКПО");
    Параметры.Вставить("Работник");						
	Параметры.Вставить("НомерДок");	
	Параметры.Вставить("ДатаДок");	
	Параметры.Вставить("ТабельныйНомер");
	Параметры.Вставить("Подразделение");							
	Параметры.Вставить("Должность");
	Параметры.Вставить("НачалоПериодаЗаКоторыйПредоставляетсяОтпуск");	
	Параметры.Вставить("КонецПериодаЗаКоторыйПредоставляетсяОтпуск");
	Параметры.Вставить("Продолжительность");
	Параметры.Вставить("ДатаНачалаЧисло");
	Параметры.Вставить("ДатаНачалаМесяцГод"); 
	Параметры.Вставить("ДатаОкончанияЧисло"); 
	Параметры.Вставить("ДатаОкончанияМесяцГод");  
	Параметры.Вставить("ПродолжительностьДоп");
	Параметры.Вставить("ДатаСДопЧисло");
	Параметры.Вставить("ДатаСДопМесяцГод");
	Параметры.Вставить("ДатаПоДопЧисло");
	Параметры.Вставить("ДатаПоДопМесяцГод");
    Параметры.Вставить("ВидДопОтпуска");						
	Параметры.Вставить("ПродолжительностьВсего");
	Параметры.Вставить("ДатаНачалаВсегоЧисло");
	Параметры.Вставить("ДатаНачалаВсегоМесяцГод");
	Параметры.Вставить("ДатаОкончанияВсегоЧисло");
	Параметры.Вставить("ДатаОкончанияВсегоМесяцГод");
	
	Параметры.Вставить("ДолжностьРуководителя");
	Параметры.Вставить("РуководительРасшифровкаПодписи");	
	
	Параметры.Вставить("ДополнительныеОтпуска", Новый Массив);

	Возврат Параметры;
КонецФункции 

/////////////////////////////////////////////////////////////////////////

/////////////////////////////////////////////////////////////////////////
///////ПРОЦЕДУРА ПЕЧАТИ

Процедура Печать(МассивОбъектов, КоллекцияПечатныхФорм, ОбъектыПечати, ПараметрыВывода) Экспорт
	
	Макет = ПолучитьМакет("ПФ_MXL_Т6");
	
	Если УправлениеПечатью.НужноПечататьМакет(КоллекцияПечатныхФорм, "ПФ_MXL_Т6") Тогда
		УправлениеПечатью.ВывестиТабличныйДокументВКоллекцию(КоллекцияПечатныхФорм,
		"ПФ_MXL_Т6", "Приказ на отпуск Т-6",	ТабличныйДокументПриказаТ6(Макет,МассивОбъектов, ОбъектыПечати));
	КонецЕсли;
	
КонецПроцедуры

/////////////////////////////////////////////////////////////////////////

СоответствиеДолжностьПечатнойФормы = Новый Соответствие;
СоответствиеДолжностьПечатнойФормы.Вставить(Справочники.Должности.НайтиПоНаименованию("Начальник отдела"),"Начальник отдела кадрового администрирования");