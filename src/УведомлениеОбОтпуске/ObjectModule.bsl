Перем ТаблицаОтправленныхУведомлений;
Перем АдресЭППолучателяУведомления;
Перем СпециалистыПолучателиКопии;
Перем МассивДолжностейДиректоров;
Перем ТаблицаКопий;
////////////////////////////////////////////////////////////////////////////////
// ПРОГРАММНЫЙ ИНТЕРФЕЙС

#Область ПрограммныйИнтерфейс

// Возвращает сведения о внешней обработке.
Функция СведенияОВнешнейОбработке() Экспорт
	
	РегистрационныеДанные = Новый Структура;
	РегистрационныеДанные.Вставить("Наименование", "Уведомление об отпуске");
	РегистрационныеДанные.Вставить("БезопасныйРежим", Ложь);
	РегистрационныеДанные.Вставить("Версия", "1.0");
	РегистрационныеДанные.Вставить("Вид", "ДополнительнаяОбработка");
	РегистрационныеДанные.Вставить("Информация", "Уведомление об отпуске");
	
	Команды = Новый ТаблицаЗначений;
	Команды.Колонки.Добавить("Идентификатор");
	Команды.Колонки.Добавить("Представление");
	Команды.Колонки.Добавить("Модификатор");
	Команды.Колонки.Добавить("ПоказыватьОповещение");
	Команды.Колонки.Добавить("Использование");
	
	Команда = Команды.Добавить();
	Команда.Идентификатор = "1";
	Команда.Представление = "Уведомление об отпуске";
	Команда.ПоказыватьОповещение = Истина;
	Команда.Использование = "ВызовСерверногоМетода";
	
	РегистрационныеДанные.Вставить("Команды", Команды);
	
	Возврат РегистрационныеДанные;
	
	
КонецФункции

Процедура ВыполнитьКоманду(ИдентификаторКоманды = Неопределено) Экспорт
	ИдентификаторПроцесса = НачатьПроцесс("18");
	
	ОтослатьУведомление();
	
	ЗавершитьПроцесс(ИдентификаторПроцесса, 2);
КонецПроцедуры

#КонецОбласти

#Область ОсновныеПроцедурыИФункции

Процедура ОтослатьУведомление()
	
	Если Не ЗначениеЗаполнено(ДатаОтправки) Тогда 
		ДатаОтправки = НачалоДня(ТекущаяДата());
	КонецЕсли;
	
	// сформируем список для отправки	
	ТаблицаСотрудников = ПолучитьМассивСотрудниковДляУведомления();
		
	Если НЕ ТаблицаСотрудников = Неопределено Тогда 
		
		МассивДолжностейДиректоров 		= ПолучитьМассивДолжностейДиректоров();
		ВыборкаДиректораАгентскойСети 	= ПолучитьВыборкуДиректораАгентскойСети();
		АдресЭППолучателяУведомления 	= ПолучитьАдресЭППолучателяУведомления();
		СпециалистыПолучателиКопии		= ПолучитьТаблицуСпециалистовПолучателейКопии(); 		
		
		ТаблицаОтправленныхУведомлений = Новый ТаблицаЗначений;
		ТаблицаОтправленныхУведомлений.Колонки.Добавить("Сотрудник");
		ТаблицаОтправленныхУведомлений.Колонки.Добавить("ТабНомер");
		ТаблицаОтправленныхУведомлений.Колонки.Добавить("Должность");
		ТаблицаОтправленныхУведомлений.Колонки.Добавить("Подразделение");
		ТаблицаОтправленныхУведомлений.Колонки.Добавить("Адрес");
		
		ТаблицаКопий = Новый ТаблицаЗначений;
		ТаблицаКопий.Колонки.Добавить("Сотрудник");
		ТаблицаКопий.Колонки.Добавить("ТабНомер");
		ТаблицаКопий.Колонки.Добавить("Подразделение");
		ТаблицаКопий.Колонки.Добавить("Адрес");
		
		ТаблицаСотрудников.Колонки.Добавить("ДиректорСотрудник");
		ТаблицаСотрудников.Колонки.Добавить("ДиректорФизическоеЛицо");
		ТаблицаСотрудников.Колонки.Добавить("ДиректорАдрес");
		
		МассивПодразделений = ТаблицаСотрудников.ВыгрузитьКолонку("ТекущееПодразделение");		
		ДиректораПодразделений = НайтиДиректоров(МассивПодразделений);
		Если НЕ ДиректораПодразделений = Неопределено Тогда 
			Для Каждого СтрокаСотрудников Из ТаблицаСотрудников Цикл 
				НайденныеСтроки = ДиректораПодразделений.НайтиСтроки(Новый Структура("Подразделение",СтрокаСотрудников.ТекущееПодразделение));
				Если НайденныеСтроки.Количество()>0 Тогда 
					ЗаполнитьЗначенияСвойств(СтрокаСотрудников, НайденныеСтроки[0]);
				КонецЕсли; 				
			КонецЦикла;				
		КонецЕсли;
		
		Для Каждого СтрокаСотрудников Из ТаблицаСотрудников Цикл 
			ПроверкаНаДопОфис(СтрокаСотрудников);
			ПроверкаНаДиректорскиеДолжности(СтрокаСотрудников, ВыборкаДиректораАгентскойСети);
			Попытка
				СформироватьУведомлениеИОтправитьПоПочте(СтрокаСотрудников);
			Исключение
				ЗаписьЖурналаРегистрации("Ошибка уведомления об отпуске",УровеньЖурналаРегистрации.Ошибка, , ,ОписаниеОшибки()); 
			КонецПопытки;
		КонецЦикла;
		
		ОтправитьПисьмоПолучателюУведомления();
		
	КонецЕсли;
	
КонецПроцедуры

Процедура СформироватьУведомлениеИОтправитьПоПочте(СтрокаДанных)
	
	Макет = ПолучитьМакет("МакетТабличныйДокумент");
	ТабДок = Новый ТабличныйДокумент;
	ДанныеДляПечати = ПолучитьДанныеПечати(СтрокаДанных);  		
	ОбластьДанных = Макет.ПолучитьОбласть("ОбластьДанных");
	Для Каждого СтрокаДанныхПечати Из ДанныеДляПечати Цикл 
		ОбластьДанных.Параметры[СтрокаДанныхПечати.Ключ] = СтрокаДанныхПечати.Значение;
	КонецЦикла;
	ТабДок.Вывести(ОбластьДанных);
	ТабДок.АвтоМасштаб = Истина; 
	ОтправитьФайлПоПочте(СтрокаДанных, ТабДок);	
	
КонецПроцедуры

Процедура ОтправитьФайлПоПочте(СтрокаДанных, Файл)
	
	СотрудникВРодПадеже = "";
	ФизическиеЛицаЗарплатаКадры.Просклонять(Строка(СтрокаДанных.ФизическоеЛицо), 2, СотрудникВРодПадеже, СтрокаДанных.Пол);
	
	Если МассивДолжностейДиректоров.Найти(СтрокаДанных.ТекущаяДолжность) = Неопределено Тогда 
		// в копию ставим список специалистов агентсва и адрес директора агентства
		Копии = Новый СписокЗначений;
		Если СтрокаДанных.ДиректорАдрес <> СтрокаДанных.Адрес И СтрокаДанных.ДиректорСотрудник<>Неопределено Тогда 
			Копии.Добавить(СтрокаДанных.ДиректорАдрес);
			НоваяСтрокаКопий = ТаблицаКопий.Добавить();
			НоваяСтрокаКопий.Сотрудник 		= СтрокаДанных.ДиректорСотрудник;
			НоваяСтрокаКопий.ТабНомер 		= СтрокаДанных.ДиректорСотрудник.Код;
			НоваяСтрокаКопий.Подразделение 	= СтрокаДанных.ТекущееПодразделение;
			НоваяСтрокаКопий.Адрес 			= СтрокаДанных.ДиректорАдрес;
		КонецЕсли;
		НайденныеСтрокиСпециалистов = СпециалистыПолучателиКопии.НайтиСтроки(Новый Структура("Подразделение",ПроверкаНаДопОфисИВозвратАгентства(СтрокаДанных.ТекущееПодразделение)));
		Для Каждого СтрокаСпециалиста Из НайденныеСтрокиСпециалистов Цикл 
			Если СтрокаДанных.Адрес <>СтрокаСпециалиста.Адрес Тогда 
				Копии.Добавить(СтрокаСпециалиста.Адрес);
				НоваяСтрокаКопий = ТаблицаКопий.Добавить();
				НоваяСтрокаКопий.Сотрудник 		= СтрокаСпециалиста.Сотрудник;
				НоваяСтрокаКопий.ТабНомер 		= СтрокаСпециалиста.Сотрудник.Код;
				НоваяСтрокаКопий.Подразделение 	= СтрокаСпециалиста.Подразделение;
				НоваяСтрокаКопий.Адрес 			= СтрокаСпециалиста.Адрес; 
			КонецЕсли;
		КонецЦикла;
	Иначе 
		// в копию ставим только адрес директора агентской сети
		Если  СтрокаДанных.ДиректорАдрес <> СтрокаДанных.Адрес Тогда 
			Копии = СтрокаДанных.ДиректорАдрес;
			НоваяСтрокаКопий = ТаблицаКопий.Добавить();
			НоваяСтрокаКопий.Сотрудник 		= СтрокаДанных.ДиректорСотрудник;
			НоваяСтрокаКопий.ТабНомер 		= СтрокаДанных.ДиректорСотрудник.Код;
			НоваяСтрокаКопий.Подразделение 	= СтрокаДанных.ТекущееПодразделение;
			НоваяСтрокаКопий.Адрес 			= СтрокаДанных.ДиректорАдрес;
		Иначе 
			Копии = "";
		КонецЕсли;
		
		Если СтрокаДанных.ТекущееПодразделение = Справочники.ПодразделенияОрганизаций.НайтиПоКоду("519") Тогда 
			НайденныеСтрокиСпециалистов = СпециалистыПолучателиКопии.НайтиСтроки(Новый Структура("Подразделение",ПроверкаНаДопОфисИВозвратАгентства(СтрокаДанных.ТекущееПодразделение)));
			Для Каждого СтрокаСпециалиста Из НайденныеСтрокиСпециалистов Цикл 
				Если СтрокаДанных.Адрес <>СтрокаСпециалиста.Адрес Тогда 
					Копии_Дубль = Копии;
					Копии = Новый СписокЗначений;
					Если ТипЗнч(Копии_Дубль)= Тип("Строка") Тогда 
						Копии.Добавить(Копии_Дубль);
					ИначеЕсли  ТипЗнч(Копии_Дубль)= Тип("СписокЗначений") Тогда 
						Копии.ЗагрузитьЗначения(Копии_Дубль.ВыгрузитьЗначения())
					КонецЕсли;
					Копии.Добавить(СтрокаСпециалиста.Адрес);
					НоваяСтрокаКопий = ТаблицаКопий.Добавить();
					НоваяСтрокаКопий.Сотрудник 		= СтрокаСпециалиста.Сотрудник;
					НоваяСтрокаКопий.ТабНомер 		= СтрокаСпециалиста.Сотрудник.Код;
					НоваяСтрокаКопий.Подразделение 	= СтрокаСпециалиста.Подразделение;
					НоваяСтрокаКопий.Адрес 			= СтрокаСпециалиста.Адрес; 
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
		
	КонецЕсли;
	
	Если ТипЗнч(Копии) = Тип("СписокЗначений") Тогда 
		Копии.ЗагрузитьЗначения(ОбщегоНазначенияКлиентСервер.СвернутьМассив(Копии.ВыгрузитьЗначения()));
	КонецЕсли; 
	
	Вложения = Новый ТаблицаЗначений;
	Вложения.Колонки.Добавить("Представление");
	Вложения.Колонки.Добавить("АдресВоВременномХранилище");
	Вложения.Колонки.Добавить("Кодировка");
	Вложения.Колонки.Добавить("ПутьКФайлу");
	
	ФорматыСохранения = Новый Массив;
	ФорматыСохранения.Добавить(ТипФайлаТабличногоДокумента.PDF);	
	ПараметрыОтправки = Новый Структура;
	ПараметрыОтправки.Вставить("Тема", "Уведомление на отпуск");
	ПараметрыОтправки.Вставить("Вложения", ПоместитьТабличныеДокументыВоВременноеХранилище(ФорматыСохранения,Файл));
	ПараметрыОтправки.Вставить("УдалятьФайлыПослеОтправки", Истина);	
	ПараметрыОтправки.Вставить("Кому", СтрокаДанных.Адрес);
	ПараметрыОтправки.Вставить("Копии",Копии);
	
	Для Каждого Вложение Из ПараметрыОтправки.Вложения Цикл
		ОписаниеВложения = Вложения.Добавить();
		Если ТипЗнч(ПараметрыОтправки.Вложения) = Тип("СписокЗначений") Тогда
			ОписаниеВложения.Представление = Вложение.Представление;
			Если ТипЗнч(Вложение.Значение) = Тип("ДвоичныеДанные") Тогда
				ОписаниеВложения.АдресВоВременномХранилище = ПоместитьВоВременноеХранилище(Вложение.Значение, Новый УникальныйИдентификатор);
			Иначе
				Если ЭтоАдресВременногоХранилища(Вложение.Значение) Тогда
					ОписаниеВложения.АдресВоВременномХранилище = ПоместитьВоВременноеХранилище(ПолучитьИзВременногоХранилища(Вложение.Значение), Новый УникальныйИдентификатор);
				Иначе
					ОписаниеВложения.ПутьКФайлу = Вложение.Значение;
				КонецЕсли;
			КонецЕсли;
		Иначе // ТипЗнч(Параметры.Вложения) = "массив структур"
			ЗаполнитьЗначенияСвойств(ОписаниеВложения, Вложение);
			Если Не ПустаяСтрока(ОписаниеВложения.АдресВоВременномХранилище) Тогда
				ОписаниеВложения.АдресВоВременномХранилище = ПоместитьВоВременноеХранилище(
				ПолучитьИзВременногоХранилища(ОписаниеВложения.АдресВоВременномХранилище), Новый УникальныйИдентификатор);
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	Если ТипЗнч(ПараметрыОтправки.Кому) = Тип("СписокЗначений") Тогда
		ПочтовыйАдресПолучателя = "";
		Для Каждого ЭлементПочтовыйАдрес Из ПараметрыОтправки.Кому Цикл
			Если ЗначениеЗаполнено(ЭлементПочтовыйАдрес.Представление) Тогда 
				ПочтовыйАдресПолучателя = ПочтовыйАдресПолучателя
				+ ЭлементПочтовыйАдрес.Представление
				+ " <"
				+ ЭлементПочтовыйАдрес.Значение
				+ ">; "
			Иначе
				ПочтовыйАдресПолучателя = ПочтовыйАдресПолучателя 
				+ ЭлементПочтовыйАдрес.Значение
				+ "; ";
			КонецЕсли;
		КонецЦикла;
	ИначеЕсли ТипЗнч(ПараметрыОтправки.Кому) = Тип("Строка") Тогда
		ПочтовыйАдресПолучателя = ПараметрыОтправки.Кому;
	ИначеЕсли ТипЗнч(ПараметрыОтправки.Кому) = Тип("Массив") Тогда
		Для Каждого СтруктураПолучателя Из ПараметрыОтправки.Кому Цикл
			МассивАдресов = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(СтруктураПолучателя.Адрес, ";");
			Для Каждого Адрес Из МассивАдресов Цикл
				Если ПустаяСтрока(Адрес) Тогда 
					Продолжить;
				КонецЕсли;
				ПочтовыйАдресПолучателя = ПочтовыйАдресПолучателя + СтруктураПолучателя.Представление + " <" + СокрЛП(Адрес) + ">; ";
			КонецЦикла;
		КонецЦикла;
	КонецЕсли;
	
	Попытка
		ПриведенныйПочтовыйАдресКому = ОбщегоНазначенияКлиентСервер.РазобратьСтрокуСПочтовымиАдресами(ПочтовыйАдресПолучателя);
	Исключение
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
		КраткоеПредставлениеОшибки(ИнформацияОбОшибке()), ,
		ПочтовыйАдресПолучателя);
		Возврат;
	КонецПопытки;
	
	/////////////////////////////
	Если ТипЗнч(ПараметрыОтправки.Копии) = Тип("СписокЗначений") Тогда
		ПочтовыйАдресПолучателя = "";
		Для Каждого ЭлементПочтовыйАдрес Из ПараметрыОтправки.Копии Цикл
			Если ЗначениеЗаполнено(ЭлементПочтовыйАдрес.Представление) Тогда 
				ПочтовыйАдресПолучателя = ПочтовыйАдресПолучателя
				+ ЭлементПочтовыйАдрес.Представление
				+ " <"
				+ ЭлементПочтовыйАдрес.Значение
				+ ">; "
			Иначе
				ПочтовыйАдресПолучателя = ПочтовыйАдресПолучателя 
				+ ЭлементПочтовыйАдрес.Значение
				+ "; ";
			КонецЕсли;
		КонецЦикла;
	ИначеЕсли ТипЗнч(ПараметрыОтправки.Копии) = Тип("Строка") Тогда
		ПочтовыйАдресПолучателя = ПараметрыОтправки.Копии;
	ИначеЕсли ТипЗнч(ПараметрыОтправки.Кому) = Тип("Массив") Тогда
		Для Каждого СтруктураПолучателя Из ПараметрыОтправки.Копии Цикл
			МассивАдресов = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(СтруктураПолучателя.Адрес, ";");
			Для Каждого Адрес Из МассивАдресов Цикл
				Если ПустаяСтрока(Адрес) Тогда 
					Продолжить;
				КонецЕсли;
				ПочтовыйАдресПолучателя = ПочтовыйАдресПолучателя + СтруктураПолучателя.Представление + " <" + СокрЛП(Адрес) + ">; ";
			КонецЦикла;
		КонецЦикла;
	КонецЕсли;
	
	Попытка
		ПриведенныйПочтовыйАдресКопии = ОбщегоНазначенияКлиентСервер.РазобратьСтрокуСПочтовымиАдресами(ПочтовыйАдресПолучателя);
	Исключение
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
		КраткоеПредставлениеОшибки(ИнформацияОбОшибке()), ,
		ПочтовыйАдресПолучателя);
		Возврат;
	КонецПопытки;
	
	
	ПараметрыПисьма = Новый Структура;
	ПараметрыПисьма.Вставить("Кому",  ПриведенныйПочтовыйАдресКому);
	ПараметрыПисьма.Вставить("Копии", ПриведенныйПочтовыйАдресКопии);
	ПараметрыПисьма.Вставить("Тема", "Уведомление на отпуск");	
	ПараметрыПисьма.Вставить("Вложения", Вложения(Вложения));
	ПараметрыПисьма.Вставить("Тело", "Во вложении находится уведомление на отпуск"+?(ПустаяСтрока(СотрудникВРодПадеже),".", " сотрудника "+СотрудникВРодПадеже+".")+"Сообщение сформировано автоматически из системы 1С:ЗиУП. Отвечать на письмо не требуется.");
	
	УчетнаяЗапись = ПолучитьУчетнуюЗапись();
	
	Попытка
		ОтправитьПочтовоеСообщение(УчетнаяЗапись, ПараметрыПисьма);
		СтрокаТаблицыОтправленных = ТаблицаОтправленныхУведомлений.Добавить();
		СтрокаТаблицыОтправленных.Сотрудник 	= 	СтрокаДанных.Сотрудник;
		СтрокаТаблицыОтправленных.ТабНомер 		= 	СтрокаДанных.ТабНомер;
		СтрокаТаблицыОтправленных.Должность 	= 	СтрокаДанных.ТекущаяДолжность;
		СтрокаТаблицыОтправленных.Подразделение = 	СтрокаДанных.ТекущееПодразделение;
		СтрокаТаблицыОтправленных.Адрес 		= 	СтрокаДанных.Адрес;
	Исключение
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(КраткоеПредставлениеОшибки(ИнформацияОбОшибке()));
		Возврат;
	КонецПопытки;
	
КонецПроцедуры

Процедура ОтправитьПисьмоПолучателюУведомления()
	Если ТаблицаОтправленныхУведомлений<>Неопределено И ТаблицаОтправленныхУведомлений.Количество()<>0 Тогда 
		Индекс = ТаблицаОтправленныхУведомлений.Количество()-1;
		Пока Индекс>=0 Цикл 
			Строка = ТаблицаОтправленныхУведомлений[Индекс];
			Если Не ЗначениеЗаполнено(Строка.ТабНомер) И Не ЗначениеЗаполнено(Строка.Адрес) Тогда 
				ТаблицаОтправленныхУведомлений.Удалить(Строка);
			КонецЕсли;
			Индекс = Индекс - 1;
		КонецЦикла; 		
		ТелоТекста = "Уведомления об отпуске отправлены следующим сотрудникам:"+Символы.ВК;
		счетчик = 1;
		Для Каждого Строка Из ТаблицаОтправленныхУведомлений Цикл 
			ТелоТекста = ТелоТекста + Строка(счетчик)+"."+Строка.Сотрудник + "("+Строка.ТабНомер+"), "+Строка.Должность + ", "+ Строка.Подразделение + ", "+Строка.Адрес+Символы.ВК;
			счетчик = счетчик + 1;
		КонецЦикла;			
		
		Индекс = ТаблицаКопий.Количество()-1;
		Пока Индекс>=0 Цикл 
			Строка = ТаблицаКопий[Индекс];
			Если Не ЗначениеЗаполнено(Строка.ТабНомер) И Не ЗначениеЗаполнено(Строка.Адрес) Тогда 
				ТаблицаКопий.Удалить(Строка);
			КонецЕсли;
			Индекс = Индекс - 1;
		КонецЦикла; 
		Если ТаблицаКопий<>Неопределено И ТаблицаКопий.Количество()>0 Тогда 
			ТелоТекста = ТелоТекста + "Копии отправлены следующим сотрудникам:" + Символы.ВК;
			ТаблицаКопий.Свернуть("Сотрудник, ТабНомер,Подразделение,Адрес");
		КонецЕсли;		
		Для Каждого Строка Из ТаблицаКопий Цикл 
			ТелоТекста = ТелоТекста + Строка(счетчик)+"."+Строка.Сотрудник + "("+Строка.ТабНомер+"), "+ Строка.Подразделение + ", "+Строка.Адрес+Символы.ВК;
			счетчик = счетчик + 1;
		КонецЦикла;
		
		Если ТипЗнч(АдресЭППолучателяУведомления) = Тип("СписокЗначений") Тогда
			ПочтовыйАдресПолучателя = "";
			Для Каждого ЭлементПочтовыйАдрес Из АдресЭППолучателяУведомления Цикл
				Если ЗначениеЗаполнено(ЭлементПочтовыйАдрес.Представление) Тогда 
					ПочтовыйАдресПолучателя = ПочтовыйАдресПолучателя
					+ ЭлементПочтовыйАдрес.Представление
					+ " <"
					+ ЭлементПочтовыйАдрес.Значение
					+ ">; "
				Иначе
					ПочтовыйАдресПолучателя = ПочтовыйАдресПолучателя 
					+ ЭлементПочтовыйАдрес.Значение
					+ "; ";
				КонецЕсли;
			КонецЦикла;
		ИначеЕсли ТипЗнч(АдресЭППолучателяУведомления) = Тип("Строка") Тогда
			ПочтовыйАдресПолучателя = АдресЭППолучателяУведомления;
		ИначеЕсли ТипЗнч(АдресЭППолучателяУведомления) = Тип("Массив") Тогда
			Для Каждого СтруктураПолучателя Из АдресЭППолучателяУведомления Цикл
				МассивАдресов = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(СтруктураПолучателя.Адрес, ";");
				Для Каждого Адрес Из МассивАдресов Цикл
					Если ПустаяСтрока(Адрес) Тогда 
						Продолжить;
					КонецЕсли;
					ПочтовыйАдресПолучателя = ПочтовыйАдресПолучателя + СтруктураПолучателя.Представление + " <" + СокрЛП(Адрес) + ">; ";
				КонецЦикла;
			КонецЦикла;
		КонецЕсли;
		
		Попытка
			ПриведенныйПочтовыйАдресКому = ОбщегоНазначенияКлиентСервер.РазобратьСтрокуСПочтовымиАдресами(ПочтовыйАдресПолучателя);
		Исключение
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
			КраткоеПредставлениеОшибки(ИнформацияОбОшибке()), ,
			ПочтовыйАдресПолучателя);
			Возврат;
		КонецПопытки;
		
		ПараметрыПисьма = Новый Структура;
		ПараметрыПисьма.Вставить("Кому",  ПриведенныйПочтовыйАдресКому);
		ПараметрыПисьма.Вставить("Тема", "Отправленные уведомления на отпуск с "+Формат(ДатаОтправки+14*24*60*60,"ДЛФ=DD"));	
		ПараметрыПисьма.Вставить("Тело", ТелоТекста);
		
		УчетнаяЗапись = ПолучитьУчетнуюЗапись();
		
		Попытка
			ОтправитьПочтовоеСообщение(УчетнаяЗапись, ПараметрыПисьма);
		Исключение
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(КраткоеПредставлениеОшибки(ИнформацияОбОшибке()));
			Возврат;
		КонецПопытки;
		
	КонецЕсли;
КонецПроцедуры
#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Функция ПолучитьТаблицуСпециалистовПолучателейКопии()
	// массив специалистов - получают копию
	МассивДолжностейПолучателейКопии = Новый Массив;
	МассивДолжностейПолучателейКопии.Добавить(Справочники.Должности.НайтиПоНаименованию("Ведущий специалист по сопровождению продаж"));
	МассивДолжностейПолучателейКопии.Добавить(Справочники.Должности.НайтиПоНаименованию("Специалист по сопровождению продаж"));
	МассивДолжностейПолучателейКопии.Добавить(Справочники.Должности.НайтиПоНаименованию("Старший специалист по сопровождению продаж"));
	ЗапросПоКопиям = Новый Запрос;
	ЗапросПоКопиям.Текст = "ВЫБРАТЬ
	                       |	ТекущиеКадровыеДанныеСотрудников.ФизическоеЛицо КАК ФизическоеЛицо,
	                       |	ТекущиеКадровыеДанныеСотрудников.Сотрудник КАК Сотрудник,
	                       |	КадроваяИсторияСотрудниковСрезПоследних.Подразделение КАК Подразделение,
	                       |	ВЫБОР
	                       |		КОГДА ВложенныйЗапросРабочийEmail.АдресЭП ЕСТЬ NULL
	                       |			ТОГДА ВложенныйЗапросЛичныйEmail.АдресЭП
	                       |		ИНАЧЕ ВложенныйЗапросРабочийEmail.АдресЭП
	                       |	КОНЕЦ КАК Адрес
	                       |ИЗ
	                       |	РегистрСведений.ТекущиеКадровыеДанныеСотрудников КАК ТекущиеКадровыеДанныеСотрудников
	                       |		ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
	                       |			ФизическиеЛицаКонтактнаяИнформация.АдресЭП КАК АдресЭП,
	                       |			ФизическиеЛицаКонтактнаяИнформация.Ссылка КАК Ссылка
	                       |		ИЗ
	                       |			Справочник.ФизическиеЛица.КонтактнаяИнформация КАК ФизическиеЛицаКонтактнаяИнформация
	                       |		ГДЕ
	                       |			ФизическиеЛицаКонтактнаяИнформация.Вид = ЗНАЧЕНИЕ(Справочник.ВидыКонтактнойИнформации.EMailФизическиеЛица)) КАК ВложенныйЗапросЛичныйEmail
	                       |		ПО ТекущиеКадровыеДанныеСотрудников.ФизическоеЛицо = ВложенныйЗапросЛичныйEmail.Ссылка
	                       |		ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
	                       |			ФизическиеЛицаКонтактнаяИнформация.АдресЭП КАК АдресЭП,
	                       |			ФизическиеЛицаКонтактнаяИнформация.Ссылка КАК Ссылка
	                       |		ИЗ
	                       |			Справочник.ФизическиеЛица.КонтактнаяИнформация КАК ФизическиеЛицаКонтактнаяИнформация
	                       |		ГДЕ
	                       |			ФизическиеЛицаКонтактнаяИнформация.Вид = &EmailРабочий) КАК ВложенныйЗапросРабочийEmail
	                       |		ПО ТекущиеКадровыеДанныеСотрудников.ФизическоеЛицо = ВложенныйЗапросРабочийEmail.Ссылка
	                       |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.КадроваяИсторияСотрудников.СрезПоследних КАК КадроваяИсторияСотрудниковСрезПоследних
	                       |		ПО ТекущиеКадровыеДанныеСотрудников.Сотрудник = КадроваяИсторияСотрудниковСрезПоследних.Сотрудник
	                       |ГДЕ
	                       |	КадроваяИсторияСотрудниковСрезПоследних.Должность В(&ТекущаяДолжность)
	                       |	И ТекущиеКадровыеДанныеСотрудников.ДатаУвольнения = ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)";
	ЗапросПоКопиям.УстановитьПараметр("ТекущаяДолжность",МассивДолжностейПолучателейКопии);
	ЗапросПоКопиям.УстановитьПараметр("EmailРабочий",Справочники.ВидыКонтактнойИнформации.НайтиПоНаименованию("Email (рабочий)"));
	ВыгрузкаПоКопиям = ЗапросПоКопиям.Выполнить().Выгрузить();
	Возврат ВыгрузкаПоКопиям;
КонецФункции

Функция ПолучитьАдресЭППолучателяУведомления()
	ЗапросПолучателейРассылки = Новый Запрос;
	ЗапросПолучателейРассылки.Текст = "ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ДополнительныеСведения.Объект.ФизическоеЛицо КАК ОбъектФизическоеЛицо,
	|	ВЫБОР
	|		КОГДА ВложенныйЗапросРабочийEmail.АдресЭП ЕСТЬ NULL 
	|			ТОГДА ВложенныйЗапросЛичныйEmail.АдресЭП
	|		ИНАЧЕ ВложенныйЗапросРабочийEmail.АдресЭП
	|	КОНЕЦ КАК Адрес
	|ИЗ
	|	РегистрСведений.ДополнительныеСведения КАК ДополнительныеСведения
	|		ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
	|			ФизическиеЛицаКонтактнаяИнформация.АдресЭП КАК АдресЭП,
	|			ФизическиеЛицаКонтактнаяИнформация.Ссылка КАК Ссылка
	|		ИЗ
	|			Справочник.ФизическиеЛица.КонтактнаяИнформация КАК ФизическиеЛицаКонтактнаяИнформация
	|		ГДЕ
	|			ФизическиеЛицаКонтактнаяИнформация.Вид = ЗНАЧЕНИЕ(Справочник.ВидыКонтактнойИнформации.EMailФизическиеЛица)) КАК ВложенныйЗапросЛичныйEmail
	|		ПО ДополнительныеСведения.Объект.ФизическоеЛицо = ВложенныйЗапросЛичныйEmail.Ссылка
	|		ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
	|			ФизическиеЛицаКонтактнаяИнформация.АдресЭП КАК АдресЭП,
	|			ФизическиеЛицаКонтактнаяИнформация.Ссылка КАК Ссылка
	|		ИЗ
	|			Справочник.ФизическиеЛица.КонтактнаяИнформация КАК ФизическиеЛицаКонтактнаяИнформация
	|		ГДЕ
	|			ФизическиеЛицаКонтактнаяИнформация.Вид = &EmailРабочий) КАК ВложенныйЗапросРабочийEmail
	|		ПО ДополнительныеСведения.Объект.ФизическоеЛицо = ВложенныйЗапросРабочийEmail.Ссылка	
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ТекущиеКадровыеДанныеСотрудников КАК ТекущиеКадровыеДанныеСотрудников
	|		ПО ДополнительныеСведения.Объект = ТекущиеКадровыеДанныеСотрудников.Сотрудник
	|ГДЕ
	|	ДополнительныеСведения.Значение = ИСТИНА
	|	И ДополнительныеСведения.Свойство.Заголовок = &Заголовок
	|	И ТекущиеКадровыеДанныеСотрудников.ДатаУвольнения = ДАТАВРЕМЯ(1, 1, 1)";
	ЗапросПолучателейРассылки.УстановитьПараметр("Заголовок","Получатель рассылки по уведомлениям об отпуске");								  
	ЗапросПолучателейРассылки.УстановитьПараметр("EmailРабочий",Справочники.ВидыКонтактнойИнформации.НайтиПоНаименованию("Email (рабочий)"));
	РезультатЗапросаПолучателей = ЗапросПолучателейРассылки.Выполнить();
	Если РезультатЗапросаПолучателей.Пустой() Тогда 
		АдресЭППолучателяУведомления = "";
	Иначе 
		ВыгрузкаПолучателей = РезультатЗапросаПолучателей.Выгрузить();
		АдресЭППолучателяУведомления = Новый СписокЗначений;
		АдресЭППолучателяУведомления.ЗагрузитьЗначения(ВыгрузкаПолучателей.ВыгрузитьКолонку("Адрес"));
	КонецЕсли;     
	
	Возврат АдресЭППолучателяУведомления;
	
КонецФункции

Функция ПолучитьВыборкуДиректораАгентскойСети()
	ЗапросДиректорАгентскойСети = Новый Запрос;
	ЗапросДиректорАгентскойСети.Текст = "ВЫБРАТЬ
	|	ТекущиеКадровыеДанныеСотрудников.ФизическоеЛицо КАК ДиректорФизическоеЛицо,
	|	ТекущиеКадровыеДанныеСотрудников.Сотрудник КАК ДиректорСотрудник, 
	|	ВЫБОР
	|		КОГДА ВложенныйЗапросРабочийEmail.АдресЭП ЕСТЬ NULL 
	|			ТОГДА ВложенныйЗапросЛичныйEmail.АдресЭП
	|		ИНАЧЕ ВложенныйЗапросРабочийEmail.АдресЭП
	|	КОНЕЦ КАК ДиректорАдрес
	|ИЗ
	|	РегистрСведений.ТекущиеКадровыеДанныеСотрудников КАК ТекущиеКадровыеДанныеСотрудников
	|		ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
	|			ФизическиеЛицаКонтактнаяИнформация.АдресЭП КАК АдресЭП,
	|			ФизическиеЛицаКонтактнаяИнформация.Ссылка КАК Ссылка
	|		ИЗ
	|			Справочник.ФизическиеЛица.КонтактнаяИнформация КАК ФизическиеЛицаКонтактнаяИнформация
	|		ГДЕ
	|			ФизическиеЛицаКонтактнаяИнформация.Вид = ЗНАЧЕНИЕ(Справочник.ВидыКонтактнойИнформации.EMailФизическиеЛица)) КАК ВложенныйЗапросЛичныйEmail
	|		ПО ТекущиеКадровыеДанныеСотрудников.ФизическоеЛицо = ВложенныйЗапросЛичныйEmail.Ссылка
	|		ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
	|			ФизическиеЛицаКонтактнаяИнформация.АдресЭП КАК АдресЭП,
	|			ФизическиеЛицаКонтактнаяИнформация.Ссылка КАК Ссылка
	|		ИЗ
	|			Справочник.ФизическиеЛица.КонтактнаяИнформация КАК ФизическиеЛицаКонтактнаяИнформация
	|		ГДЕ
	|			ФизическиеЛицаКонтактнаяИнформация.Вид = &EmailРабочий) КАК ВложенныйЗапросРабочийEmail
	|		ПО ТекущиеКадровыеДанныеСотрудников.ФизическоеЛицо = ВложенныйЗапросРабочийEmail.Ссылка	
	|ГДЕ
	|	ТекущиеКадровыеДанныеСотрудников.ТекущаяДолжность = &ТекущаяДолжность";
	ЗапросДиректорАгентскойСети.УстановитьПараметр("ТекущаяДолжность",Справочники.Должности.НайтиПоНаименованию("Директор агентской сети"));											
	ЗапросДиректорАгентскойСети.УстановитьПараметр("EmailРабочий",Справочники.ВидыКонтактнойИнформации.НайтиПоНаименованию("Email (рабочий)"));
	РезультатЗапросаДиректораАгентскойСети = ЗапросДиректорАгентскойСети.Выполнить();
	Если Не РезультатЗапросаДиректораАгентскойСети.Пустой() Тогда 
		ВыборкаДиректораАгентскойСети = РезультатЗапросаДиректораАгентскойСети.Выбрать();
		ВыборкаДиректораАгентскойСети.Следующий();
	Иначе 
		ВыборкаДиректораАгентскойСети = Неопределено;
	КонецЕсли;
	
	Возврат ВыборкаДиректораАгентскойСети;

КонецФункции

Функция ПолучитьМассивДолжностейДиректоров()
	МассивДолжностейДиректоров = Новый Массив;
	МассивДолжностейДиректоров.Добавить(Справочники.Должности.НайтиПоНаименованию("Директор по продажам"));
	МассивДолжностейДиректоров.Добавить(Справочники.Должности.НайтиПоНаименованию("Региональный директор"));
	МассивДолжностейДиректоров.Добавить(Справочники.Должности.НайтиПоНаименованию("Старший региональный директор"));
	МассивДолжностейДиректоров.Добавить(Справочники.Должности.НайтиПоНаименованию("Территориальный директор"));
	МассивДолжностейДиректоров.Добавить(Справочники.Должности.НайтиПоНаименованию("Старший региональный директор"));
	Возврат МассивДолжностейДиректоров;
КонецФункции

Процедура ПроверкаНаДопОфис(СтрокаСотрудников)
	Если Не ЗначениеЗаполнено(СтрокаСотрудников.ДиректорСотрудник) И СтрНайти(СтрокаСотрудников.ТекущееПодразделение, "Дополнительный офис")<>0 Тогда 
		НомерСимвола = СтрНайти(СтрокаСотрудников.ТекущееПодразделение,"№");
		Если НомерСимвола<>0 Тогда 
			СтрокаДляРедактирования = Прав(СтрокаСотрудников.ТекущееПодразделение,СтрДлина(СтрокаСотрудников.ТекущееПодразделение)-НомерСимвола); 
			НомерПробела = СтрНайти(СтрокаДляРедактирования," ");
			НомерАгентства = Лев(СтрокаДляРедактирования, НомерПробела-1);
			Если Не ПустаяСтрока(НомерАгентства) Тогда 
				ЗапросПоПодразделениям = Новый Запрос;
				ЗапросПоПодразделениям.Текст = "ВЫБРАТЬ
				|	ПодразделенияОрганизаций.Ссылка
				|ИЗ
				|	Справочник.ПодразделенияОрганизаций КАК ПодразделенияОрганизаций
				|ГДЕ
				|	ПодразделенияОрганизаций.Наименование ПОДОБНО &Наименование
				|	И ПодразделенияОрганизаций.Расформировано = ЛОЖЬ
				|	И ПодразделенияОрганизаций.Сформировано = ИСТИНА";
				ЗапросПоПодразделениям.УстановитьПараметр("Наименование","Агентство №"+НомерАгентства+" %");												   
				РезультатПоПодр = ЗапросПоПодразделениям.Выполнить();
				Если Не РезультатПоПодр.Пустой() Тогда 
					ВыборкаПоПодр = РезультатПоПодр.Выбрать();
					ВыборкаПоПодр.Следующий();
					ПодразделениеПоиска = ВыборкаПоПодр.Ссылка;
					ДиректорПодразделения = НайтиДиректоров(ПодразделениеПоиска);
					Если Не ДиректорПодразделения = Неопределено Тогда 
						ЗаполнитьЗначенияСвойств(СтрокаСотрудников, ДиректорПодразделения[0]);
					КонецЕсли;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

Функция ПроверкаНаДопОфисИВозвратАгентства(ТекущееПодразделение)
	Если СтрНайти(ТекущееПодразделение, "Дополнительный офис")<>0 Тогда 
		НомерСимвола = СтрНайти(ТекущееПодразделение,"№");
		Если НомерСимвола<>0 Тогда 
			СтрокаДляРедактирования = Прав(ТекущееПодразделение,СтрДлина(ТекущееПодразделение)-НомерСимвола); 
			НомерПробела = СтрНайти(СтрокаДляРедактирования," ");
			НомерАгентства = Лев(СтрокаДляРедактирования, НомерПробела-1);
			Если Не ПустаяСтрока(НомерАгентства) Тогда 
				ЗапросПоПодразделениям = Новый Запрос;
				ЗапросПоПодразделениям.Текст = "ВЫБРАТЬ
				|	ПодразделенияОрганизаций.Ссылка
				|ИЗ
				|	Справочник.ПодразделенияОрганизаций КАК ПодразделенияОрганизаций
				|ГДЕ
				|	ПодразделенияОрганизаций.Наименование ПОДОБНО &Наименование
				|	И ПодразделенияОрганизаций.Расформировано = ЛОЖЬ
				|	И ПодразделенияОрганизаций.Сформировано = ИСТИНА";
				ЗапросПоПодразделениям.УстановитьПараметр("Наименование","Агентство №"+НомерАгентства+"%");												   
				РезультатПоПодр = ЗапросПоПодразделениям.Выполнить();
				Если Не РезультатПоПодр.Пустой() Тогда 
					ВыборкаПоПодр = РезультатПоПодр.Выбрать();
					ВыборкаПоПодр.Следующий();
					ПодразделениеАгентство = ВыборкаПоПодр.Ссылка;
					Возврат ПодразделениеАгентство;
				Иначе 
					Возврат ТекущееПодразделение;
				КонецЕсли;
			Иначе 
				Возврат ТекущееПодразделение;
			КонецЕсли;
		Иначе 
			Возврат ТекущееПодразделение;
		КонецЕсли;
	Иначе 
		Возврат ТекущееПодразделение;
	КонецЕсли;

КонецФункции

Процедура ПроверкаНаДиректорскиеДолжности(СтрокаСотрудников, ДанныеДиректораАгентскойСети)
	
	Если ДанныеДиректораАгентскойСети = Неопределено Тогда 
		Возврат;
	Иначе 
		Если МассивДолжностейДиректоров.Найти(СтрокаСотрудников.ТекущаяДолжность)<>Неопределено Тогда 
			ЗаполнитьЗначенияСвойств(СтрокаСотрудников, ДанныеДиректораАгентскойСети);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

Функция ПолучитьМассивСотрудниковДляУведомления()
	
	Искл_Подразделения 	= Новый СписокЗначений;
	Искл_Сотрудники		= Новый СписокЗначений;
	
	СтруктураНастроек = ППФ_Сервер.ПолучитьСтруктуруЗначенийИзХранилища("ППФ_ИсключенияИзСпискаУведомленийОбОтпуске");	
	Если ТипЗнч(СтруктураНастроек) = Тип("Структура") И СтруктураНастроек.Свойство("Искл_Подразделения") И СтруктураНастроек.Свойство("Искл_Сотрудники") Тогда 
		Искл_Подразделения 	= СтруктураНастроек.Искл_Подразделения;
		Искл_Сотрудники		= СтруктураНастроек.Искл_Сотрудники;
	КонецЕсли;
	
	Запрос = Новый Запрос();
	Запрос.Текст = "ВЫБРАТЬ
	               |	ПереносОтпуска.Сотрудник КАК Сотрудник,
	               |	ПереносОтпуска.ФизическоеЛицо КАК ФизическоеЛицо,
	               |	ПереносОтпуска.ВидОтпуска КАК ВидОтпуска,
	               |	ПереносОтпуска.ИсходнаяДатаНачала КАК ИсходнаяДатаНачала,
	               |	ПереносОтпуска.ДатаНачала КАК ДатаНачала,
	               |	ПереносОтпуска.ДатаОкончания КАК ДатаОкончания,
	               |	ПереносОтпуска.КоличествоДней КАК КоличествоДней
	               |ПОМЕСТИТЬ ВТ_ПЕРЕНОСЫ
	               |ИЗ
	               |	Документ.ПереносОтпуска КАК ПереносОтпуска
	               |ГДЕ
	               |	ПереносОтпуска.Проведен = ИСТИНА
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ РАЗЛИЧНЫЕ
	               |	ГрафикОтпусковСотрудники.Сотрудник КАК Сотрудник,
	               |	ГрафикОтпусковСотрудники.ФизическоеЛицо КАК ФизическоеЛицо,
	               |	ГрафикОтпусковСотрудники.ВидОтпуска КАК ВидОтпуска,
	               |	ГрафикОтпусковСотрудники.ДатаНачала КАК ДатаНачала,
	               |	ГрафикОтпусковСотрудники.ДатаОкончания КАК ДатаОкончания,
	               |	ГрафикОтпусковСотрудники.КоличествоДней КАК КоличествоДней,
	               |	ВЫБОР
	               |		КОГДА ВложенныйЗапросРабочийEmail.АдресЭП ЕСТЬ NULL
	               |			ТОГДА ВложенныйЗапросЛичныйEmail.АдресЭП
	               |		ИНАЧЕ ВложенныйЗапросРабочийEmail.АдресЭП
	               |	КОНЕЦ КАК Адрес,
	               |	КадроваяИсторияСотрудниковСрезПоследних.Подразделение КАК ТекущееПодразделение,
	               |	ГрафикОтпусковСотрудники.Сотрудник.Код КАК ТабНомер,
	               |	КадроваяИсторияСотрудниковСрезПоследних.Должность КАК ТекущаяДолжность,
	               |	ГрафикОтпусковСотрудники.ФизическоеЛицо.Пол КАК Пол
	               |ПОМЕСТИТЬ ВТ_ГРАФИКИ
	               |ИЗ
	               |	Документ.ГрафикОтпусков.Сотрудники КАК ГрафикОтпусковСотрудники
	               |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.КадроваяИсторияСотрудников.СрезПоследних(&ДатаНачала, ) КАК КадроваяИсторияСотрудниковСрезПоследних
	               |		ПО ГрафикОтпусковСотрудники.Сотрудник = КадроваяИсторияСотрудниковСрезПоследних.Сотрудник
	               |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ТекущиеКадровыеДанныеСотрудников КАК ТекущиеКадровыеДанныеСотрудников
	               |		ПО (ТекущиеКадровыеДанныеСотрудников.Сотрудник = ГрафикОтпусковСотрудники.Сотрудник)
	               |		ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
	               |			ФизическиеЛицаКонтактнаяИнформация.АдресЭП КАК АдресЭП,
	               |			ФизическиеЛицаКонтактнаяИнформация.Ссылка КАК Ссылка
	               |		ИЗ
	               |			Справочник.ФизическиеЛица.КонтактнаяИнформация КАК ФизическиеЛицаКонтактнаяИнформация
	               |		ГДЕ
	               |			ФизическиеЛицаКонтактнаяИнформация.Вид = &EmailРабочий) КАК ВложенныйЗапросРабочийEmail
	               |		ПО ГрафикОтпусковСотрудники.ФизическоеЛицо = ВложенныйЗапросРабочийEmail.Ссылка
	               |		ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
	               |			ФизическиеЛицаКонтактнаяИнформация.АдресЭП КАК АдресЭП,
	               |			ФизическиеЛицаКонтактнаяИнформация.Ссылка КАК Ссылка
	               |		ИЗ
	               |			Справочник.ФизическиеЛица.КонтактнаяИнформация КАК ФизическиеЛицаКонтактнаяИнформация
	               |		ГДЕ
	               |			ФизическиеЛицаКонтактнаяИнформация.Вид = ЗНАЧЕНИЕ(Справочник.ВидыКонтактнойИнформации.EMailФизическиеЛица)) КАК ВложенныйЗапросЛичныйEmail
	               |		ПО ГрафикОтпусковСотрудники.ФизическоеЛицо = ВложенныйЗапросЛичныйEmail.Ссылка
	               |ГДЕ
	               |	ТекущиеКадровыеДанныеСотрудников.ДатаПриема <> ДАТАВРЕМЯ(1, 1, 1)
	               |	И ТекущиеКадровыеДанныеСотрудников.ДатаУвольнения = ДАТАВРЕМЯ(1, 1, 1)
	               |	И ГрафикОтпусковСотрудники.Ссылка.ПометкаУдаления = ЛОЖЬ
	               |	И (ГрафикОтпусковСотрудники.Ссылка.Комментарий ПОДОБНО ""%Регионы%""
	               |			ИЛИ ГрафикОтпусковСотрудники.Ссылка.Комментарий ПОДОБНО ""%РЕГИОНЫ%""
	               |			ИЛИ ГрафикОтпусковСотрудники.Ссылка.Комментарий ПОДОБНО ""%регионы%"")
	               |	И НЕ ГрафикОтпусковСотрудники.Сотрудник В (&Искл_Сотрудники)
	               |	И НЕ ТекущиеКадровыеДанныеСотрудников.ТекущееПодразделение В (&Искл_Подразделения)
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	ВТ_ГРАФИКИ.Сотрудник КАК Сотрудник,
	               |	ВТ_ГРАФИКИ.ФизическоеЛицо КАК ФизическоеЛицо,
	               |	ВТ_ГРАФИКИ.ВидОтпуска КАК ВидОтпуска,
	               |	ВЫБОР
	               |		КОГДА ВТ_ПЕРЕНОСЫ.ДатаНачала ЕСТЬ NULL
	               |			ТОГДА ВТ_ГРАФИКИ.ДатаНачала
	               |		ИНАЧЕ ВТ_ПЕРЕНОСЫ.ДатаНачала
	               |	КОНЕЦ КАК ДатаНачала,
	               |	ВЫБОР
	               |		КОГДА ВТ_ПЕРЕНОСЫ.ДатаОкончания ЕСТЬ NULL
	               |			ТОГДА ВТ_ГРАФИКИ.ДатаОкончания
	               |		ИНАЧЕ ВТ_ПЕРЕНОСЫ.ДатаОкончания
	               |	КОНЕЦ КАК ДатаОкончания,
	               |	ВЫБОР
	               |		КОГДА ВТ_ПЕРЕНОСЫ.КоличествоДней ЕСТЬ NULL
	               |			ТОГДА ВТ_ГРАФИКИ.КоличествоДней
	               |		ИНАЧЕ ВТ_ПЕРЕНОСЫ.КоличествоДней
	               |	КОНЕЦ КАК КоличествоДней,
	               |	ВТ_ГРАФИКИ.Адрес КАК Адрес,
	               |	ВТ_ГРАФИКИ.ТекущееПодразделение КАК ТекущееПодразделение,
	               |	ВТ_ГРАФИКИ.ТабНомер КАК ТабНомер,
	               |	ВТ_ГРАФИКИ.ТекущаяДолжность КАК ТекущаяДолжность,
	               |	ВТ_ГРАФИКИ.Пол КАК Пол
	               |ПОМЕСТИТЬ ВТ_ПРЕДВАРИТЕЛЬНАЯ
	               |ИЗ
	               |	ВТ_ГРАФИКИ КАК ВТ_ГРАФИКИ
	               |		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_ПЕРЕНОСЫ КАК ВТ_ПЕРЕНОСЫ
	               |		ПО ВТ_ГРАФИКИ.Сотрудник = ВТ_ПЕРЕНОСЫ.Сотрудник
	               |			И ВТ_ГРАФИКИ.ДатаНачала = ВТ_ПЕРЕНОСЫ.ИсходнаяДатаНачала
	               |			И ВТ_ГРАФИКИ.ВидОтпуска = ВТ_ПЕРЕНОСЫ.ВидОтпуска
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	ВТ_ПРЕДВАРИТЕЛЬНАЯ.Сотрудник КАК Сотрудник,
	               |	ВТ_ПРЕДВАРИТЕЛЬНАЯ.ФизическоеЛицо КАК ФизическоеЛицо,
	               |	ВТ_ПРЕДВАРИТЕЛЬНАЯ.ВидОтпуска КАК ВидОтпуска,
	               |	ВТ_ПРЕДВАРИТЕЛЬНАЯ.ДатаНачала КАК ДатаНачала,
	               |	ВТ_ПРЕДВАРИТЕЛЬНАЯ.ДатаОкончания КАК ДатаОкончания,
	               |	ВТ_ПРЕДВАРИТЕЛЬНАЯ.КоличествоДней КАК КоличествоДней,
	               |	ВТ_ПРЕДВАРИТЕЛЬНАЯ.Адрес КАК Адрес,
	               |	ВТ_ПРЕДВАРИТЕЛЬНАЯ.ТекущееПодразделение КАК ТекущееПодразделение,
	               |	ВТ_ПРЕДВАРИТЕЛЬНАЯ.ТабНомер КАК ТабНомер,
	               |	ВТ_ПРЕДВАРИТЕЛЬНАЯ.ТекущаяДолжность КАК ТекущаяДолжность,
	               |	ВТ_ПРЕДВАРИТЕЛЬНАЯ.Пол КАК Пол
	               |ИЗ
	               |	ВТ_ПРЕДВАРИТЕЛЬНАЯ КАК ВТ_ПРЕДВАРИТЕЛЬНАЯ
	               |ГДЕ
	               |	ВТ_ПРЕДВАРИТЕЛЬНАЯ.ДатаНачала = ДОБАВИТЬКДАТЕ(&ДатаНачала, ДЕНЬ, 14)
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |УНИЧТОЖИТЬ ВТ_ПЕРЕНОСЫ
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |УНИЧТОЖИТЬ ВТ_ГРАФИКИ
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |УНИЧТОЖИТЬ ВТ_ПРЕДВАРИТЕЛЬНАЯ";
	Запрос.УстановитьПараметр("ДатаНачала",			НачалоДня(ДатаОтправки));
	Запрос.УстановитьПараметр("EmailРабочий",		Справочники.ВидыКонтактнойИнформации.НайтиПоНаименованию("Email (рабочий)"));
	Запрос.УстановитьПараметр("Искл_Подразделения",	Искл_Подразделения);
	Запрос.УстановитьПараметр("Искл_Сотрудники",	Искл_Сотрудники);
	РезультатЗапроса = Запрос.Выполнить();
	Если Не РезультатЗапроса.Пустой() Тогда 
		Возврат РезультатЗапроса.Выгрузить();
	Иначе 
		Возврат Неопределено;
	КонецЕсли;	
КонецФункции

Функция НайтиДиректоров(Подразделения)
	
	ЗапросПоРодителям = Новый Запрос();
	ЗапросПоРодителям.Текст = "ВЫБРАТЬ
	|	ПодразделенияОрганизаций.Ссылка КАК Подразделение,
	|	ПодразделенияОрганизаций.Родитель,
	|	ПодразделенияОрганизаций.Родитель.Родитель,
	|	ПодразделенияОрганизаций.Родитель.Родитель.Родитель
	|ИЗ
	|	Справочник.ПодразделенияОрганизаций КАК ПодразделенияОрганизаций
	|ГДЕ
	|	ПодразделенияОрганизаций.Ссылка В(&Подразделения)";
	ЗапросПоРодителям.УстановитьПараметр("Подразделения", Подразделения);
	ТаблицаПодразделений = ЗапросПоРодителям.Выполнить().Выгрузить();
	ТаблицаПодразделений.Колонки.Добавить("ДиректорСотрудник");
	ТаблицаПодразделений.Колонки.Добавить("ДиректорФизическоеЛицо");
	ТаблицаПодразделений.Колонки.Добавить("ДиректорАдрес");
	
	МассивДолжностейДиректоров1 = Новый Массив;
	МассивДолжностейДиректоров1.Добавить(Справочники.Должности.НайтиПоНаименованию("Директор по продажам"));
	МассивДолжностейДиректоров1.Добавить(Справочники.Должности.НайтиПоНаименованию("Старший директор по продажам"));
	
	// Найдем директоров всех подразделений
	Запрос = Новый Запрос();
	Запрос.Текст = "ВЫБРАТЬ
	               |	ТекущиеКадровыеДанныеСотрудников.ТекущееПодразделение,
	               |	ТекущиеКадровыеДанныеСотрудников.ФизическоеЛицо,
	               |	ТекущиеКадровыеДанныеСотрудников.Сотрудник,
	               |	ВЫБОР
	               |		КОГДА ВложенныйЗапросРабочийEmail.АдресЭП ЕСТЬ NULL 
	               |			ТОГДА ВложенныйЗапросЛичныйEmail.АдресЭП
	               |		ИНАЧЕ ВложенныйЗапросРабочийEmail.АдресЭП
	               |	КОНЕЦ КАК АдресЭП
	               |ИЗ
	               |	РегистрСведений.ТекущиеКадровыеДанныеСотрудников КАК ТекущиеКадровыеДанныеСотрудников
	               |		ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
	               |			ФизическиеЛицаКонтактнаяИнформация.АдресЭП КАК АдресЭП,
	               |			ФизическиеЛицаКонтактнаяИнформация.Ссылка КАК Ссылка
	               |		ИЗ
	               |			Справочник.ФизическиеЛица.КонтактнаяИнформация КАК ФизическиеЛицаКонтактнаяИнформация
	               |		ГДЕ
	               |			ФизическиеЛицаКонтактнаяИнформация.Вид = ЗНАЧЕНИЕ(Справочник.ВидыКонтактнойИнформации.EMailФизическиеЛица)) КАК ВложенныйЗапросЛичныйEmail
	               |		ПО ТекущиеКадровыеДанныеСотрудников.ФизическоеЛицо = ВложенныйЗапросЛичныйEmail.Ссылка
	               |		ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
	               |			ФизическиеЛицаКонтактнаяИнформация.АдресЭП КАК АдресЭП,
	               |			ФизическиеЛицаКонтактнаяИнформация.Ссылка КАК Ссылка
	               |		ИЗ
	               |			Справочник.ФизическиеЛица.КонтактнаяИнформация КАК ФизическиеЛицаКонтактнаяИнформация
	               |		ГДЕ
	               |			ФизическиеЛицаКонтактнаяИнформация.Вид = &EmailРабочий) КАК ВложенныйЗапросРабочийEmail
	               |		ПО ТекущиеКадровыеДанныеСотрудников.ФизическоеЛицо = ВложенныйЗапросРабочийEmail.Ссылка
	               |ГДЕ
	               |	ТекущиеКадровыеДанныеСотрудников.ТекущаяДолжность В(&ТекущаяДолжность)
	               |	И ТекущиеКадровыеДанныеСотрудников.ДатаУвольнения = ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)";
	Запрос.УстановитьПараметр("ТекущаяДолжность",МассивДолжностейДиректоров1);
	Запрос.УстановитьПараметр("EmailРабочий",Справочники.ВидыКонтактнойИнформации.НайтиПоНаименованию("Email (рабочий)"));
	Результат = Запрос.Выполнить();
	Если Не Результат.Пустой() Тогда 
		ВыгрузкаДиректоров = Результат.Выгрузить();
		
		Для Каждого СтрокаПодразделения Из ТаблицаПодразделений Цикл 
			НайденныеСтроки = ВыгрузкаДиректоров.НайтиСтроки(Новый Структура("ТекущееПодразделение", СтрокаПодразделения.Подразделение));
			Если НайденныеСтроки.Количество()>0 Тогда 
				ЗаполнитьДанныеТаблицыДиректоров(СтрокаПодразделения, НайденныеСтроки[0]);
			Иначе
				НайденныеСтроки = ВыгрузкаДиректоров.НайтиСтроки(Новый Структура("ТекущееПодразделение", СтрокаПодразделения.Родитель));
				Если НайденныеСтроки.Количество()>0 Тогда 
					ЗаполнитьДанныеТаблицыДиректоров(СтрокаПодразделения, НайденныеСтроки[0]);
				Иначе 
					НайденныеСтроки = ВыгрузкаДиректоров.НайтиСтроки(Новый Структура("ТекущееПодразделение", СтрокаПодразделения.РодительРодитель));
					Если НайденныеСтроки.Количество()>0 Тогда 
						ЗаполнитьДанныеТаблицыДиректоров(СтрокаПодразделения, НайденныеСтроки[0]);
					Иначе 
						НайденныеСтроки = ВыгрузкаДиректоров.НайтиСтроки(Новый Структура("ТекущееПодразделение", СтрокаПодразделения.РодительРодительРодитель));
						Если НайденныеСтроки.Количество()>0 Тогда 
							ЗаполнитьДанныеТаблицыДиректоров(СтрокаПодразделения, НайденныеСтроки[0]);
						КонецЕсли;
					КонецЕсли;					
				КонецЕсли;
			КонецЕсли;
		КонецЦикла; 
		
		Возврат ТаблицаПодразделений;
	Иначе 
		Возврат Неопределено;		
	КонецЕсли;	
КонецФункции

Функция ПолучитьДанныеПечати(СтрокаДанных)
	
	СоответствиеПараметров = Новый Структура;
	
	РезультатСклонения = "";
	Если ФизическиеЛицаЗарплатаКадры.Просклонять(Строка(СтрокаДанных.ФизическоеЛицо), 3, РезультатСклонения, СтрокаДанных.Пол) Тогда
		ДобавитьПараметр(СоответствиеПараметров, "ФИОПадеж", 	РезультатСклонения);
	Иначе 
		ДобавитьПараметр(СоответствиеПараметров, "ФИОПадеж", 	Строка(СтрокаДанных.ФизическоеЛицо));
	КонецЕсли;
	
	ДолжностьВПадеже = "";
	ТаблицаДолжностей	 	= ОпределитьДолжность(СтрокаДанных.ТекущаяДолжность);
	Для Каждого СтрокаДолжности Из ТаблицаДолжностей Цикл 
		Если СтрокаДолжности.Свойство.Заголовок = "Дательный падеж" Тогда 
			ДолжностьВПадеже = СтрокаДолжности.Значение;
		КонецЕсли;
	КонецЦикла;
	
	Если Не ПустаяСтрока(ДолжностьВПадеже) Тогда 
		ДобавитьПараметр(СоответствиеПараметров, "Должность", 	Строка(ДолжностьВПадеже));
	Иначе 
		ДобавитьПараметр(СоответствиеПараметров, "Должность", 	Строка(СтрокаДанных.ТекущаяДолжность));
	КонецЕсли;
	ДобавитьПараметр(СоответствиеПараметров, "Подразделение", 	Строка(СтрокаДанных.ТекущееПодразделение));
	ДобавитьПараметр(СоответствиеПараметров, "ТабНомер", 		СтрокаДанных.ТабНомер);
	ДобавитьПараметр(СоответствиеПараметров, "ДатаОтправки", 	Формат(ДатаОтправки,"ДЛФ=DD"));
	ДобавитьПараметр(СоответствиеПараметров, "Год", 			Формат(Год(СтрокаДанных.ДатаНачала),"ЧГ=0"));
	ДобавитьПараметр(СоответствиеПараметров, "ДатаНачала", 		Формат(СтрокаДанных.ДатаНачала,"ДЛФ=DD"));
	ДобавитьПараметр(СоответствиеПараметров, "ДатаОкончания", 	Формат(СтрокаДанных.ДатаОкончания,"ДЛФ=DD"));
	ДобавитьПараметр(СоответствиеПараметров, "ФИО", 			Строка(СтрокаДанных.ФизическоеЛицо));
	
	Возврат СоответствиеПараметров;
	
КонецФункции

Процедура ДобавитьПараметр(Структура, ИсходнаяСтрока, СтрокаЗамены)
	Структура.Вставить(ИсходнаяСтрока,СтрокаЗамены);
КонецПроцедуры

Процедура ЗаполнитьДанныеТаблицыДиректоров(СтрокаПриемник, СтрокаИсточник)
	СтрокаПриемник.ДиректорСотрудник 		= СтрокаИсточник.Сотрудник;
	СтрокаПриемник.ДиректорФизическоеЛицо 	= СтрокаИсточник.ФизическоеЛицо;
	СтрокаПриемник.ДиректорАдрес 			= СтрокаИсточник.АдресЭП;
КонецПроцедуры

Функция ОпределитьДолжность(Должность)
	
	ЗапросПоДолжностям = Новый Запрос;
	ТекстЗапроса = "ВЫБРАТЬ
	|	ДополнительныеСведения.Объект,
	|	ДополнительныеСведения.Свойство КАК Свойство,
	|	ДополнительныеСведения.Значение КАК Значение
	|ИЗ
	|	РегистрСведений.ДополнительныеСведения КАК ДополнительныеСведения
	|ГДЕ
	|	ДополнительныеСведения.Объект = &Объект";
	ЗапросПоДолжностям.Текст = ТекстЗапроса;
	ЗапросПоДолжностям.УстановитьПараметр("Объект",Должность);
	
	ВыгрузкаДолжностей = ЗапросПоДолжностям.Выполнить().Выгрузить();
	
	Возврат ВыгрузкаДолжностей;	
	
КонецФункции

Функция ПоместитьТабличныеДокументыВоВременноеХранилище(ВыбранныеФорматыСохранения, ТабличныйДокумент)
	Результат = Новый СписокЗначений;
	
	// Каталог временных файлов
	ИмяВременнойПапки = ПолучитьИмяВременногоФайла();
	СоздатьКаталог(ИмяВременнойПапки);
	ПолныйПутьКФайлу = ОбщегоНазначенияКлиентСервер.ДобавитьКонечныйРазделительПути(ИмяВременнойПапки);
	
	// Сохранение табличных документов.
	
	//Если ТабличныйДокумент.Значение.Вывод = ИспользованиеВывода.Запретить Тогда
	//	Продолжить;
	//КонецЕсли;
	
	Для Каждого ТипФайла Из ВыбранныеФорматыСохранения Цикл
		
		ИмяФайла = "Уведомление на отпуск." + Строка(ТипФайла);
		ПолноеИмяФайла = ПолныйПутьКФайлу + ИмяФайла;
		
		ТабличныйДокумент.Записать(ПолноеИмяФайла, ТипФайла);
		
		Результат.Добавить(ПоместитьВоВременноеХранилище(Новый ДвоичныеДанные(ПолноеИмяФайла), Новый УникальныйИдентификатор), ИмяФайла);
	КонецЦикла;
	
	
	УдалитьФайлы(ИмяВременнойПапки);
	
	Возврат Результат;
	
КонецФункции

Функция Вложения(Вложения)
	
	Результат = Новый Массив;
	Для Каждого Вложение Из Вложения Цикл
		ОписаниеВложения = Новый Структура;
		ОписаниеВложения.Вставить("Представление", Вложение.Представление);
		ОписаниеВложения.Вставить("АдресВоВременномХранилище", Вложение.АдресВоВременномХранилище);
		ОписаниеВложения.Вставить("Кодировка", Вложение.Кодировка);
		Результат.Добавить(ОписаниеВложения);
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

Функция ПолучитьУчетнуюЗапись()
	ДоступныеУчетныеЗаписи = РаботаСПочтовымиСообщениями.ДоступныеУчетныеЗаписи(Истина);
	Если ДоступныеУчетныеЗаписи.Количество() = 0 Тогда
		ТекстСообщения = НСтр("ru = 'Не обнаружены доступные учетные записи электронной почты, обратитесь к администратору системы.'");
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения,,,,);
		Возврат Неопределено;
	КонецЕсли;
	
	Возврат ДоступныеУчетныеЗаписи[0].Ссылка;
	
КонецФункции

Функция ОтправитьПочтовоеСообщение(Знач УчетнаяЗапись, Знач ПараметрыПисьма)
	
	Возврат РаботаСПочтовымиСообщениями.ОтправитьПочтовоеСообщение(УчетнаяЗапись, ПараметрыПисьма);
	
КонецФункции

Функция НачатьПроцесс(КодСервиса)
	
	Попытка
	
		Соединение = Новый HTTPСоединение("bg:8889/");	
		
		ИмяВыходногоФайла = ПолучитьимяВременногоФайла("txt");
		
		HTTPЗапрос = Новый HTTPЗапрос("/start/" + СокрЛП(КодСервиса));
		
		Соединение.Получить(HTTPЗапрос, ИмяВыходногоФайла);
		
		ЧтениеТекста = Новый ЧтениеТекста(имяВыходногоФайла);
		
		ИдентификаторПроцесса = ЧтениеТекста.Прочитать();
		
		ЧтениеТекста.Закрыть();	
		
		УдалитьФайлы(ИмяВыходногоФайла);
		
		Возврат ИдентификаторПроцесса;
	
	Исключение
		
		Возврат Неопределено;
		
	КонецПопытки;

КонецФункции // НачатьПроцесс()
   
Функция ЗавершитьПроцесс(ИдентификаторПроцесса, Отказ, ТекстСообщения = "")
	
	Если ИдентификаторПроцесса = Неопределено Тогда
		
		Возврат Неопределено;
		
	КонецЕсли;
	
	Попытка
	
		Соединение = Новый HTTPСоединение("bg:8889/");
		
		ИмяВременногоФайла = ПолучитьИмяВременногоФайла("txt");
		
		ЗаписьТекста = Новый ЗаписьТекста(ИмяВременногоФайла, "CESU-8");
		ЗаписьТекста.Записать(ТекстСообщения);
		ЗаписьТекста.Закрыть();
		
		ИмяВыходногоФайла = ПолучитьимяВременногоФайла("txt");
		
		ДвоичныеДанные = Новый ДвоичныеДанные(ИмяВременногоФайла);
		
		УдалитьФайлы(ИмяВременногоФайла);
		
		Строка = СтрЗаменить(СтрЗаменить(СтрЗаменить(Base64Строка(ДвоичныеДанные), "+", "PPF1PPF"), Символы.ПС, ""), " ", "");
		КоличествоСтрок = СтрЧислоСтрок(Строка);
		
		НоваяСтрока = "";
		
		Для Сч = 1 По КоличествоСтрок Цикл
			
			НоваяСтрока = НоваяСтрока + СтрПолучитьСтроку(Строка, Сч);	
		
		КонецЦикла;  
		
		HTTPЗапрос = Новый HTTPЗапрос("/end/" + СокрЛП(ИдентификаторПроцесса) + "/" + ?(Отказ = Истина, "3", "2") + "/" + НоваяСтрока);
		Соединение.Получить(HTTPЗапрос, имяВыходногоФайла);
		
		ЧтениеТекста = Новый ЧтениеТекста(имяВыходногоФайла);	
		Результат = ЧтениеТекста.Прочитать();
		ЧтениеТекста.Закрыть();	
		
		УдалитьФайлы(ИмяВыходногоФайла);
		
		Возврат Результат;
		
	Исключение
		
		Возврат Неопределено;
		
	КонецПопытки;
	
КонецФункции // ЗавершитьПроцесс()

#КонецОбласти
