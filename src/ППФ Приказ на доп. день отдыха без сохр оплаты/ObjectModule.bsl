/////////////////////////////////////////////////////////////////////////
///////СВЕДЕНИЯ ОБ ОБРАБОТКЕ

Функция ПолучитьТаблицуКоманд()
	
	Команды = Новый ТаблицаЗначений;
	// Как будет выглядеть описание печатной формы для пользователя
	Команды.Колонки.Добавить("Представление", Новый ОписаниеТипов("Строка"));
	// Имя нашего макета, что бы могли отличить вызванную команду в обработке печати
	Команды.Колонки.Добавить("Идентификатор", Новый ОписаниеТипов("Строка"));
	// Тут задается, как должна вызваться команда обработки
	// Возможные варианты:
	// - ОткрытиеФормы - в этом случае в колонке идентификатор должно быть указано имя формы, которое должна будет открыть система
	// - ВызовКлиентскогоМетода - вызвать клиентскую экспортную процедуру из модуля формы обработки
	// - ВызовСерверногоМетода - вызвать серверную экспортную процедуру из модуля объекта обработки
	Команды.Колонки.Добавить("Использование", Новый ОписаниеТипов("Строка"));
	// Следующий параметр указывает, необходимо ли показывать оповещение при начале и завершению работы обработки. Не имеет смысла при открытии формы
	Команды.Колонки.Добавить("ПоказыватьОповещение", Новый ОписаниеТипов("Булево"));
	// Для печатной формы должен содержать строку ПечатьMXL 
	Команды.Колонки.Добавить("Модификатор", Новый ОписаниеТипов("Строка"));
	
	Возврат Команды;
	
КонецФункции

Функция ДобавитьКоманду(ТаблицаКоманд, Представление, Идентификатор, Использование, ПоказыватьОповещение = Ложь, Модификатор = "")
	НоваяКоманда = ТаблицаКоманд.Добавить();
	НоваяКоманда. Представление = Представление;
	НоваяКоманда. Идентификатор= Идентификатор;
	НоваяКоманда. Использование= Использование;
	НоваяКоманда. ПоказыватьОповещение= ПоказыватьОповещение;
	НоваяКоманда. Модификатор= Модификатор;
КонецФункции

Функция СведенияОВнешнейОбработке() Экспорт
	ПараметрыРегистрации = Новый Структура;
	МассивНазначений = Новый Массив;
	МассивНазначений.Добавить("Документ.ОтпускБезСохраненияОплаты");
	ПараметрыРегистрации.Вставить("Вид", "ПечатнаяФорма"); //может быть - ЗаполнениеОбъекта, ДополнительныйОтчет, СозданиеСвязанныхОбъектов... 
	ПараметрыРегистрации.Вставить("Назначение", МассивНазначений);
	ПараметрыРегистрации.Вставить("Наименование", " Приказ на дополнительный день отдыха (без сохранения оплаты) "); //имя под которым обработка будет зарегестрирована в справочнике внешних обработок
	ПараметрыРегистрации.Вставить("Версия", "1.0");
	ПараметрыРегистрации.Вставить("БезопасныйРежим", Ложь);
	ПараметрыРегистрации.Вставить("Информация", " Приказ на дополнительный день отдыха (без сохранения оплаты)");//так будет выглядеть описание печ.формы для пользователя
	ТаблицаКоманд = ПолучитьТаблицуКоманд();
	ДобавитьКоманду(ТаблицаКоманд, "ППФ Приказ на дополнительный день отдыха (без сохранения оплаты)", "ПФ_MXL", "ВызовСерверногоМетода", Истина);
	ПараметрыРегистрации.Вставить("Команды", ТаблицаКоманд);
	Возврат ПараметрыРегистрации;
КонецФункции

/////////////////////////////////////////////////////////////////////////

/////////////////////////////////////////////////////////////////////////
///////СЕРВИСНЫЕ ПРОЦЕДУРЫ И ФУКНЦИИ


// Процедура печати документа.
// Возвращает табличный документ - сформированную печатную форму приказа о предоставлении отпуска 
//
// Параметры:
//	МассивОбъектов - массив сотрудников
//  ОбъектыПечати  - Список значений  - Объекты печати (значение - ссылка на объект, представление - имя области в которой был выведен объект)
//
// Возвращаемое значение:
//	Табличный документ
//

Функция ТабличныйДокументПриказаТ6(Макет, МассивОбъектов, ОбъектыПечати)
	
	ДокументРезультат = Новый ТабличныйДокумент;
	ДокументРезультат.ОриентацияСтраницы = ОриентацияСтраницы.Портрет;
	ДокументРезультат.АвтоМасштаб = Истина;
	ДокументРезультат.КлючПараметровПечати = "ПараметрыПечати_ПриказОПредоставленииОтпуска";
	
	ПараметрыМакета = ПолучитьДанныеДляПечати(МассивОбъектов[0].Ссылка);
	
	НомерСтрокиНачало = ДокументРезультат.ВысотаТаблицы + 1;
	
	Если Макет <> Неопределено Тогда
		
		МакетШапка = Макет.ПолучитьОбласть("Шапка");
		МакетШапка.Параметры.Заполнить(ПараметрыМакета);
		ДокументРезультат.Вывести(МакетШапка);
		
		МакетРаботник = Макет.ПолучитьОбласть("Работник");
		МакетРаботник.Параметры.Заполнить(ПараметрыМакета);
		
		ДокументРезультат.Вывести(МакетРаботник);
		
		МакетПодвал = Макет.ПолучитьОбласть("Подвал");
		МакетПодвал.Параметры.Заполнить(ПараметрыМакета);
		ДокументРезультат.Вывести(МакетПодвал);				
		УправлениеПечатью.ЗадатьОбластьПечатиДокумента(ДокументРезультат, НомерСтрокиНачало, ОбъектыПечати, ПараметрыМакета.Ссылка);
		
		ДокументРезультат.АвтоМасштаб = Истина;
	КонецЕсли;
	Возврат ДокументРезультат;
	
КонецФункции

&НаСервере
Функция ПолучитьДанныеДляПечати(Документ)
	
	СтруктураПараметров = Новый Структура;
	СтруктураПараметров.Вставить("Ссылка");
	СтруктураПараметров.Вставить("КодПоОКПО");
	СтруктураПараметров.Вставить("НазваниеОрганизации");
	СтруктураПараметров.Вставить("НомерДок");
	СтруктураПараметров.Вставить("ДатаДок");
	СтруктураПараметров.Вставить("ТабельныйНомер");
	СтруктураПараметров.Вставить("Работник");
	СтруктураПараметров.Вставить("Подразделение");
	СтруктураПараметров.Вставить("Должность");
	
	СтруктураПараметров.Вставить("ДатаСДопЧисло");
	СтруктураПараметров.Вставить("ДатаСДопМесяцГод");
	СтруктураПараметров.Вставить("ДатаПоДопЧисло");
	СтруктураПараметров.Вставить("ДатаПоДопМесяцГод");
	
	СтруктураПараметров.Вставить("ДатаНачалаВсегоЧисло");
	СтруктураПараметров.Вставить("ДатаНачалаВсегоМесяцГод");
	СтруктураПараметров.Вставить("ДатаОкончанияВсегоЧисло");
	СтруктураПараметров.Вставить("ДатаОкончанияВсегоМесяцГод");
	
	СтруктураПараметров.Вставить("ПродолжительностьДоп");
	СтруктураПараметров.Вставить("ПродолжительностьВсего");
	СтруктураПараметров.Вставить("РуководительРасшифровкаПодписи");
	
	
	Запрос = Новый Запрос();
	Запрос.Текст = "ВЫБРАТЬ
	               |	ОтпускБезСохраненияОплаты.Организация,
	               |	ОтпускБезСохраненияОплаты.Организация.КодПоОКПО КАК КодПоОКПО,
	               |	ОтпускБезСохраненияОплаты.Организация.НаименованиеПолное КАК НазваниеОрганизации,
	               |	ОтпускБезСохраненияОплаты.Номер КАК НомерДок,
	               |	ОтпускБезСохраненияОплаты.Дата КАК ДатаДок,
	               |	ОтпускБезСохраненияОплаты.Сотрудник,
	               |	ЕСТЬNULL(ФИОФизическихЛицСрезПоследних.Фамилия, """") + "" "" + ЕСТЬNULL(ФИОФизическихЛицСрезПоследних.Имя, """") + "" "" + ЕСТЬNULL(ФИОФизическихЛицСрезПоследних.Отчество, """") КАК ФИО,
	               |	КадроваяИсторияСотрудниковСрезПоследних.Подразделение,
	               |	КадроваяИсторияСотрудниковСрезПоследних.Подразделение.Родитель,
	               |	КадроваяИсторияСотрудниковСрезПоследних.Подразделение.Родитель.Родитель,
	               |	КадроваяИсторияСотрудниковСрезПоследних.Должность,
	               |	ОтпускБезСохраненияОплаты.ДатаНачала,
	               |	ОтпускБезСохраненияОплаты.ДатаОкончания,
	               |	СведенияОбОтветственныхЛицахСрезПоследних.РуководительКадровойСлужбы,
	               |	ОтпускБезСохраненияОплаты.Сотрудник.Код КАК ТабельныйНомер,
	               |	ОтпускБезСохраненияОплаты.ФизическоеЛицо.Пол КАК Пол,
	               |	ФИОФизическихЛицСрезПоследних1.Фамилия КАК РФамилия,
	               |	ФИОФизическихЛицСрезПоследних1.Имя КАК РИмя,
	               |	ФИОФизическихЛицСрезПоследних1.Отчество КАК РОтчество,
	               |	ОтпускБезСохраненияОплаты.Ссылка
	               |ИЗ
	               |	Документ.ОтпускБезСохраненияОплаты КАК ОтпускБезСохраненияОплаты
	               |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ФИОФизическихЛиц.СрезПоследних(&ДатаСреза, ) КАК ФИОФизическихЛицСрезПоследних
	               |		ПО ОтпускБезСохраненияОплаты.ФизическоеЛицо = ФИОФизическихЛицСрезПоследних.ФизическоеЛицо
	               |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.КадроваяИсторияСотрудников.СрезПоследних КАК КадроваяИсторияСотрудниковСрезПоследних
	               |		ПО ОтпускБезСохраненияОплаты.Сотрудник = КадроваяИсторияСотрудниковСрезПоследних.Сотрудник,
	               |	РегистрСведений.СведенияОбОтветственныхЛицах.СрезПоследних(&ДатаСреза, ) КАК СведенияОбОтветственныхЛицахСрезПоследних
	               |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ФИОФизическихЛиц.СрезПоследних КАК ФИОФизическихЛицСрезПоследних1
	               |		ПО СведенияОбОтветственныхЛицахСрезПоследних.РуководительКадровойСлужбы = ФИОФизическихЛицСрезПоследних1.ФизическоеЛицо
	               |ГДЕ
	               |	ОтпускБезСохраненияОплаты.Ссылка = &Ссылка";
	Запрос.УстановитьПараметр("Ссылка",Документ);				   
	Запрос.УстановитьПараметр("ДатаСреза",Документ.Дата);  
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда 
		ЗаполнитьЗначенияСвойств(СтруктураПараметров, Выборка);
		РезультатСклонения = "";
		ФизическиеЛицаЗарплатаКадры.Просклонять(Выборка.ФИО, 3, РезультатСклонения, Выборка.Пол);
		СтруктураПараметров.Работник = РезультатСклонения;
		СтруктураПараметров.Подразделение = СтрЗаменить(СтрЗаменить("" + Выборка.Подразделение +" "+ Выборка.ПодразделениеРодитель +" "+ Выборка.ПодразделениеРодительРодитель, "ШТАТ", ""),"Штат","");
		СтруктураПараметров.ДатаСДопЧисло		= ?(День(Выборка.ДатаНачала)<10,"0","") + День(Выборка.ДатаНачала);
		СтруктураПараметров.ДатаСДопМесяцГод 	= "" + ПолучитьМесяц(Месяц(Выборка.ДатаНачала))+ " " + СтрЗаменить(Год(Выборка.ДатаНачала),Символы.НПП,"");
		СтруктураПараметров.ДатаПоДопЧисло		= ?(День(Выборка.ДатаОкончания)<10,"0","") + День(Выборка.ДатаОкончания);
		СтруктураПараметров.ДатаПоДопМесяцГод 	= "" + ПолучитьМесяц(Месяц(Выборка.ДатаОкончания))+ " " + СтрЗаменить(Год(Выборка.ДатаОкончания),Символы.НПП,"");
		
		СтруктураПараметров.ДатаНачалаВсегоЧисло		= ?(День(Выборка.ДатаНачала)<10,"0","") + День(Выборка.ДатаНачала);
		СтруктураПараметров.ДатаНачалаВсегоМесяцГод 	= "" + ПолучитьМесяц(Месяц(Выборка.ДатаНачала))+ " " + СтрЗаменить(Год(Выборка.ДатаНачала),Символы.НПП,"");
		СтруктураПараметров.ДатаОкончанияВсегоЧисло		= ?(День(Выборка.ДатаОкончания)<10,"0","") + День(Выборка.ДатаОкончания);
		СтруктураПараметров.ДатаОкончанияВсегоМесяцГод 	= "" + ПолучитьМесяц(Месяц(Выборка.ДатаОкончания))+ " " + СтрЗаменить(Год(Выборка.ДатаОкончания),Символы.НПП,"");
		
		СтруктураПараметров.ПродолжительностьДоп 	=  1+ (НачалоДня(Выборка.ДатаОкончания) - НачалоДня(Выборка.ДатаНачала)) / 86400;
		СтруктураПараметров.ПродолжительностьВсего 	=  1+ (НачалоДня(Выборка.ДатаОкончания) - НачалоДня(Выборка.ДатаНачала)) / 86400;			
		
		СтруктураПараметров.РуководительРасшифровкаПодписи = Лев(Выборка.РИмя,1)+"."+Лев(Выборка.РОтчество,1)+". "+Выборка.РФамилия;

	КонецЕсли;
	
	Возврат СтруктураПараметров;
	

	
КонецФункции
/////////////////////////////////////////////////////////////////////////

/////////////////////////////////////////////////////////////////////////
///////ПРОЦЕДУРА ПЕЧАТИ

Процедура Печать(МассивОбъектов, КоллекцияПечатныхФорм, ОбъектыПечати, ПараметрыВывода) Экспорт
	
	Макет = ПолучитьМакет("ПФ_MXL");
	
	Если УправлениеПечатью.НужноПечататьМакет(КоллекцияПечатныхФорм, "ПФ_MXL") Тогда
		УправлениеПечатью.ВывестиТабличныйДокументВКоллекцию(КоллекцияПечатныхФорм,
		"ПФ_MXL", "Приказ на дополнительный день отдыха",	ТабличныйДокументПриказаТ6(Макет,МассивОбъектов, ОбъектыПечати));
	КонецЕсли;
	
КонецПроцедуры

Функция ПолучитьМесяц(НомерМесяца)
	СоответствиеМесяцев = Новый Соответствие;
	СоответствиеМесяцев.Вставить(1,"января");
	СоответствиеМесяцев.Вставить(2,"февраля");
	СоответствиеМесяцев.Вставить(3,"марта");
	СоответствиеМесяцев.Вставить(4,"апреля");
	СоответствиеМесяцев.Вставить(5,"мая");
	СоответствиеМесяцев.Вставить(6,"июня");
	СоответствиеМесяцев.Вставить(7,"июля");
	СоответствиеМесяцев.Вставить(8,"августа");
	СоответствиеМесяцев.Вставить(9,"сентября");
	СоответствиеМесяцев.Вставить(10,"октября");
	СоответствиеМесяцев.Вставить(11,"ноября");
	СоответствиеМесяцев.Вставить(12,"декабря");
	
	Возврат СоответствиеМесяцев.Получить(НомерМесяца);
	
КонецФункции

/////////////////////////////////////////////////////////////////////////
