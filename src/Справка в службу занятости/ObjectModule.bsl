
//Функция Печать() Экспорт
//	
//	Если ЗначениеЗаполнено(СсылкаНаОбъект.ДатаУвольнения) Тогда
//		КонецПериода = СсылкаНаОбъект.ДатаУвольнения;
//	Иначе	
//		КонецПериода = ТекущаяДата();
//	КонецЕсли;

//	Если Не (ТипЗнч(СсылкаНаОбъект) = Тип("СправочникСсылка.СотрудникиОрганизаций")) Тогда
//		Предупреждение("Данная печатная форма предназначена только для элемента справочника <Сотрудники>", 10, "Формирование печатной формы невозможно");
//		Возврат Неопределено;
//	КонецЕсли;

//	Если Не ЗначениеЗаполнено(СсылкаНаОбъект.Организация) Тогда
//		Предупреждение("Справка не может быть сформирована для сотрудника без определенной организации", 10, "Формирование печатной формы невозможно");
//		Возврат Неопределено;
//	КонецЕсли;
//	
//	ВыборкаПоШапке = СформироватьЗапросПоШапкеОтчета(КонецПериода);
//	ВыборкаПоШапке.Следующий();
//	
//	ТабДокумент = Новый ТабличныйДокумент;
//	Макет = ПолучитьМакет("Макет");
//	
//	Запрос = Новый Запрос;
//	Запрос.Текст = "ВЫБРАТЬ
//	               |	ЮрАдрес.Представление КАК ЮрАдрес,
//	               |	Тел.Представление КАК Телефон
//	               |ИЗ
//	               |	РегистрСведений.КонтактнаяИнформация КАК ЮрАдрес,
//	               |	РегистрСведений.КонтактнаяИнформация КАК Тел
//	               |ГДЕ
//	               |	ЮрАдрес.Объект.Ссылка = &Организация
//	               |	И ЮрАдрес.Тип = ЗНАЧЕНИЕ(Перечисление.ТипыКонтактнойИнформации.Адрес)
//	               |	И ЮрАдрес.Вид = ЗНАЧЕНИЕ(Справочник.ВидыКонтактнойИнформации.ЮрАдресОрганизации)
//	               |	И Тел.Объект.Ссылка = &Организация
//	               |	И Тел.Тип = ЗНАЧЕНИЕ(Перечисление.ТипыКонтактнойИнформации.Телефон)
//	               |	И Тел.Вид = ЗНАЧЕНИЕ(Справочник.ВидыКонтактнойИнформации.ТелефонОрганизации)";

//	Запрос.УстановитьПараметр("Организация", СсылкаНаОбъект.Организация);
//	ВыборкаПоОрганизации = Запрос.Выполнить().Выбрать();
//	
//	Макет.Параметры.Организация   = СсылкаНаОбъект.Организация;
//	Макет.Параметры.ИНН           = СсылкаНаОбъект.Организация.ИНН;
//	Если ВыборкаПоОрганизации.Следующий() Тогда
//		Макет.Параметры.ЮрАдрес   = ВыборкаПоОрганизации.ЮрАдрес;
//		Макет.Параметры.Телефон   = ВыборкаПоОрганизации.Телефон;
//	КонецЕсли;
//	Макет.Параметры.Дата                 = Формат(ТекущаяДата(),"ДФ='«dd» MMMM yyyy ""г.""'");
//	Макет.Параметры.ФИОСотрудника        = ВРег(ПросклонятьФИОПоВозможности(ВыборкаПоШапке.ФизЛицо, ВыборкаПоШапке.Фамилия, ВыборкаПоШапке.Имя, ВыборкаПоШапке.Отчество, ВыборкаПоШапке.Пол, Ложь, 3));
//	Макет.Параметры.Сотрудник            = СсылкаНаОбъект;
//	Макет.Параметры.СутьПериодРаботы     = "в том, что " + ?(ВыборкаПоШапке.Пол = Перечисления.ПолФизическихЛиц.Мужской, "он ", "она ") +
//										   ?(ВыборкаПоШапке.Пол = Перечисления.ПолФизическихЛиц.Мужской, "работал, проходил службу ", "работала, проходила службу ") +
//										   "с "+Формат(ВыборкаПоШапке.ДатаПриема, "ДФ='«dd» MMMM yyyy ""г.""'; ДП=-") + " по " + Формат(ВыборкаПоШапке.ДатаУвольнения, "ДФ='«dd» MMMM yyyy ""г.""'; ДП='настоящее время'");
//	Макет.Параметры.ОрганизацияПолностью = СсылкаНаОбъект.Организация.НаименованиеПолное;
//	Макет.Параметры.Часов = 8;
//	Макет.Параметры.Дней  = 5;
//	
//	Для Н = 1 По 12 Цикл
//		Макет.Параметры["Год"+Н] = ДобавитьМесяц(НачалоМесяца(КонецПериода), Н-13);
//		Макет.Параметры["Мес"+Н] = ДобавитьМесяц(НачалоМесяца(КонецПериода), Н-13);
//	КонецЦикла;
//	
//	Н               = 0;
//	ИтогоНачисления = 0;
//	ИтогоПланДней   = 0;
//	ИтогоПланЧасов  = 0;
//	ИтогоФактДней   = 0;
//	ИтогоФактЧасов  = 0;
//	
//	ВыборкаПоПериду = СформироватьЗапросПоТабличнойЧасти(КонецПериода);
//	
//	Пока ВыборкаПоПериду.Следующий() Цикл
//		Н = Н + 1;
//		Если Н > 9 Тогда
//			ИтогоНачисления = ИтогоНачисления + ВыборкаПоПериду.Начислено;
//			ИтогоПланДней   = ИтогоПланДней   + ВыборкаПоПериду.НормаДней;
//			ИтогоПланЧасов  = ИтогоПланЧасов  + ВыборкаПоПериду.НормаЧасов;
//			ИтогоФактДней   = ИтогоФактДней   + ВыборкаПоПериду.ОтработаноДней;
//			ИтогоФактЧасов  = ИтогоФактЧасов  + ВыборкаПоПериду.ОтработаноЧасов;
//			Макет.Параметры["Начислено"+Н] = ВыборкаПоПериду.Начислено;
//			Макет.Параметры["План"     +Н] = Строка(ВыборкаПоПериду.НормаДней     )+" ("+Строка(ВыборкаПоПериду.НормаЧасов     )+")";
//			Макет.Параметры["Факт"     +Н] = Строка(ВыборкаПоПериду.ОтработаноДней)+" ("+Строка(ВыборкаПоПериду.ОтработаноЧасов)+")";
//		КонецЕсли;
//		
//		СтрокаКоментария = "";
//		
//		ВыборкаПоНачислениям = ВыборкаПоПериду.Выбрать();
//		Пока ВыборкаПоНачислениям.Следующий() Цикл
//			Если ЗначениеЗаполнено(ВыборкаПоНачислениям.НачалоВытеснения) Тогда
//				Разделитель = ?(ПустаяСтрока(СтрокаКоментария), "", ","+Символы.ПС);
//				Если      ВыборкаПоНачислениям.ВидРасчетаВытеснения = ПланыВидовРасчета.ОсновныеНачисленияОрганизаций.ОплатаБЛПоТравмеВБыту             Или
//						  ВыборкаПоНачислениям.ВидРасчетаВытеснения = ПланыВидовРасчета.ОсновныеНачисленияОрганизаций.ОплатаБЛПоТравмеНаПроизводстве    Или
//						  ВыборкаПоНачислениям.ВидРасчетаВытеснения = ПланыВидовРасчета.ОсновныеНачисленияОрганизаций.ОплатаПоСреднемуБЛ                Или
//						  ВыборкаПоНачислениям.ВидРасчетаВытеснения = ПланыВидовРасчета.ОсновныеНачисленияОрганизаций.ОтсутствиеПоБолезни               Или
//						  ВыборкаПоНачислениям.ВидРасчетаВытеснения = ПланыВидовРасчета.ОсновныеНачисленияОрганизаций.ОтсутствиеПоБолезниПоБеременности
//						  Тогда	ГдеБылСотрудник = ?(ВыборкаПоШапке.Пол = Перечисления.ПолФизическихЛиц.Мужской, " болел", " болела");
//				ИначеЕсли ВыборкаПоНачислениям.ВидРасчетаВытеснения = ПланыВидовРасчета.ОсновныеНачисленияОрганизаций.ОтпускБезОплатыУчебный            Или
//						  ВыборкаПоНачислениям.ВидРасчетаВытеснения = ПланыВидовРасчета.ОсновныеНачисленияОрганизаций.ОплатаПоСреднемуОтпКалендарныеДни Или
//						  ВыборкаПоНачислениям.ВидРасчетаВытеснения = ПланыВидовРасчета.ОсновныеНачисленияОрганизаций.ОплатаПоСреднемуОтпШестидневка    Или
//						  ВыборкаПоНачислениям.ВидРасчетаВытеснения = ПланыВидовРасчета.ОсновныеНачисленияОрганизаций.ОтпускЗаСвойСчет                  Или
//						  ВыборкаПоНачислениям.ВидРасчетаВытеснения = ПланыВидовРасчета.ОсновныеНачисленияОрганизаций.ОтпускПоБеременностиИРодам        Или
//						  ВыборкаПоНачислениям.ВидРасчетаВытеснения = ПланыВидовРасчета.ОсновныеНачисленияОрганизаций.ОтпускПоУходуЗаРебенкомБезОплаты
//						  Тогда ГдеБылСотрудник = " отпуск";
//				ИначеЕсли ВыборкаПоНачислениям.ВидРасчетаВытеснения = ПланыВидовРасчета.ОсновныеНачисленияОрганизаций.ОплатаПоСреднему
//						  Тогда ГдеБылСотрудник = " командировка";
//				ИначеЕсли ВыборкаПоНачислениям.ВидРасчетаВытеснения = ПланыВидовРасчета.ОсновныеНачисленияОрганизаций.ПростойТарифДневной               Или
//						  ВыборкаПоНачислениям.ВидРасчетаВытеснения = ПланыВидовРасчета.ОсновныеНачисленияОрганизаций.ПростойТарифЧасовой
//						  Тогда	ГдеБылСотрудник = " простой";
//				ИначеЕсли ВыборкаПоНачислениям.ВидРасчетаВытеснения = ПланыВидовРасчета.ОсновныеНачисленияОрганизаций.Невыход                           Или
//						  ВыборкаПоНачислениям.ВидРасчетаВытеснения = ПланыВидовРасчета.ОсновныеНачисленияОрганизаций.Прогул
//						  Тогда	ГдеБылСотрудник = " прогул";
//				Иначе
//					ГдеБылСотрудник = " отсутств.";
//				КонецЕсли;
//				Коментарий = "с " + Формат(ВыборкаПоНачислениям.НачалоВытеснения, "ДФ=dd") + " по " + Формат(ВыборкаПоНачислениям.КонецВытеснения, "ДФ=dd") + " " + ГдеБылСотрудник;
//				СтрокаКоментария = СтрокаКоментария + Разделитель + Коментарий;
//			КонецЕсли;
//		КонецЦикла;
//		
//		Макет.Параметры["Причина"+Н] = СтрокаКоментария;
//		
//	КонецЦикла;
//	
//	Макет.Параметры["ИтогоНачислено"] = ИтогоНачисления;
//	Макет.Параметры["ИтогоПлан"     ] = Строка(ИтогоПланДней)+" ("+Строка(ИтогоПланЧасов)+")";
//	Макет.Параметры["ИтогоФакт"     ] = Строка(ИтогоФактДней)+" ("+Строка(ИтогоФактЧасов)+")";
//	
//	СреднийЗаработок = ?(ИтогоФактДней = 0, 0, ИтогоНачисления * ИтогоПланДней / ИтогоФактДней / 3);
//	Макет.Параметры.СреднийЗаработокЦифрами  = Строка(Цел(СреднийЗаработок)) + " руб. " + Строка(Окр(СреднийЗаработок - Цел(СреднийЗаработок), 2, 1) * 100) + " коп.";
//	Макет.Параметры.СреднийЗаработокПрописью = ЧислоПрописью(СреднийЗаработок, "L=ru_RU", "рубль, рубля, рублей, м, копейка, копейки, копеек, ж, 2");
//	
//	Макет.Параметры.ФИОРуководителя = ПросклонятьФИОПоВозможности(ВыборкаПоШапке.ФизЛицоРуководителя, ВыборкаПоШапке.ФамилияРуководителя, ВыборкаПоШапке.ИмяРуководителя, ВыборкаПоШапке.ОтчествоРуководителя, ВыборкаПоШапке.ПолРуководителя, Истина, 1);
//	Макет.Параметры.ФИОГлБухгалтера = ПросклонятьФИОПоВозможности(ВыборкаПоШапке.ФизЛицоГлБухгалтера, ВыборкаПоШапке.ФамилияГлБухгалтера, ВыборкаПоШапке.ИмяГлБухгалтера, ВыборкаПоШапке.ОтчествоГлБухгалтера, ВыборкаПоШапке.ПолГлБухгалтера, Истина, 1);
//	
//	ТабДокумент.Вывести(Макет);
//	
//	ТабДокумент.ИмяПараметровПечати = "ПАРАМЕТРЫ_ПЕЧАТИ_СправкаЗанятости";
//	ТабДокумент.ОриентацияСтраницы    = ОриентацияСтраницы.Портрет;
//	ТабДокумент.АвтоМасштаб           = Истина;
//	ТабДокумент.ОтображатьГруппировки = Ложь;
//	ТабДокумент.ОтображатьЗаголовки   = Ложь;
//	ТабДокумент.ОтображатьСетку       = Ложь;
//	
//	Возврат ТабДокумент;

//КонецФункции

Функция СформироватьЗапросПоТабличнойЧасти(КонецПериода)
	
	МассивИсключаемыхПВР = Новый Массив;
	// Необходимо уточнить список Начислений
	//МассивИсключаемыхПВР.Добавить(ПланыВидовРасчета.Начисления.ОплатаБЛПоТравмеВБыту);
	//МассивИсключаемыхПВР.Добавить(ПланыВидовРасчета.Начисления.ДоплатаПоСреднемуБЛ);
	//МассивИсключаемыхПВР.Добавить(ПланыВидовРасчета.Начисления.ОплатаБЛПоТравмеНаПроизводстве);
	//МассивИсключаемыхПВР.Добавить(ПланыВидовРасчета.Начисления.ОплатаПоСреднемуБЛ);
	//МассивИсключаемыхПВР.Добавить(ПланыВидовРасчета.Начисления.ОплатаВыходныхДнейПоУходуЗаДетьмиИнвалидами);
	//МассивИсключаемыхПВР.Добавить(ПланыВидовРасчета.Начисления.ОплатаПоСреднемуОтпКалендарныеДни);
	//МассивИсключаемыхПВР.Добавить(ПланыВидовРасчета.Начисления.ОплатаПоСреднемуОтпШестидневка);
	//МассивИсключаемыхПВР.Добавить(ПланыВидовРасчета.Начисления.ОплатаПоСреднему);
	//МассивИсключаемыхПВР.Добавить(ПланыВидовРасчета.Начисления.ОтпускПоБеременностиИРодам);
	//МассивИсключаемыхПВР.Добавить(ПланыВидовРасчета.Начисления.ОтпускПоУходуЗаРебенкомБезОплаты);
	//МассивИсключаемыхПВР.Добавить(ПланыВидовРасчета.Начисления.ОтсутствиеПоБолезни);
	//МассивИсключаемыхПВР.Добавить(ПланыВидовРасчета.Начисления.ОтсутствиеПоБолезниПоБеременности);
	//МассивИсключаемыхПВР.Добавить(ПланыВидовРасчета.Начисления.ПособиеПоУходуЗаРебенкомДо1_5Лет);
	//МассивИсключаемыхПВР.Добавить(ПланыВидовРасчета.Начисления.ПособиеПоУходуЗаРебенкомДо3Лет);
	//МассивИсключаемыхПВР.Добавить(ПланыВидовРасчета.ДополнительныеНачисленияОрганизаций.ВыходноеПособие);
	//МассивИсключаемыхПВР.Добавить(ПланыВидовРасчета.ДополнительныеНачисленияОрганизаций.КомпенсацияОтпускаКалендарныеДниБезУвольнения);
	//МассивИсключаемыхПВР.Добавить(ПланыВидовРасчета.ДополнительныеНачисленияОрганизаций.КомпенсацияОтпускаШестидневкаБезУвольнения);
	//МассивИсключаемыхПВР.Добавить(ПланыВидовРасчета.ДополнительныеНачисленияОрганизаций.КомпенсацияОтпускаКалендарныеДни);
	//МассивИсключаемыхПВР.Добавить(ПланыВидовРасчета.ДополнительныеНачисленияОрганизаций.КомпенсацияОтпускаШестидневка);
	//МассивИсключаемыхПВР.Добавить(ПланыВидовРасчета.ДополнительныеНачисленияОрганизаций.ДоговорПодряда);
	//МассивИсключаемыхПВР.Добавить(ПланыВидовРасчета.ДополнительныеНачисленияОрганизаций.ВСвязиСоСмертью);
	//МассивИсключаемыхПВР.Добавить(ПланыВидовРасчета.ДополнительныеНачисленияОрганизаций.ПриПостановкеНаУчетВРанниеСрокиБеременности);
	//МассивИсключаемыхПВР.Добавить(ПланыВидовРасчета.ДополнительныеНачисленияОрганизаций.ПриРожденииРебенка);
	//МассивИсключаемыхПВР.Добавить(ПланыВидовРасчета.ДополнительныеНачисленияОрганизаций.ПриУсыновленииРебенка);
	//МассивИсключаемыхПВР.Добавить(ПланыВидовРасчета.ДополнительныеНачисленияОрганизаций.УдержаниеЗаНеотработанныйОтпускКалендарныеДни);
	//МассивИсключаемыхПВР.Добавить(ПланыВидовРасчета.ДополнительныеНачисленияОрганизаций.УдержаниеЗаНеотработанныйОтпускШестидневка);


//	Запрос = Новый Запрос;
//	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
//	Запрос.УстановитьПараметр("НачалоПериода"          , ДобавитьМесяц(НачалоМесяца(КонецПериода), - 12));
//	Запрос.УстановитьПараметр("КонецПериода"           , НачалоМесяца(КонецПериода)-1);
//	Запрос.УстановитьПараметр("НачалоНачислений"       , ДобавитьМесяц(НачалоМесяца(КонецПериода), - 12));
//	Запрос.УстановитьПараметр("НевключаемыеВидыРасчета", МассивИсключаемыхПВР);
//	Запрос.УстановитьПараметр("Организация"            , СсылкаНаОбъект.Организация);
//	Запрос.УстановитьПараметр("Сотрудник"              , СсылкаНаОбъект);

//	Запрос.Текст = "
//	|ВЫБРАТЬ
//	|	ОсновныеНачисленияРаботниковОрганизацийФактическийПериодДействия.ПериодДействия КАК ПериодДействия,
//	|	СУММА(ОсновныеНачисленияРаботниковОрганизацийФактическийПериодДействия.НормаДней) КАК ВытесненоДней,
//	|	СУММА(ОсновныеНачисленияРаботниковОрганизацийФактическийПериодДействия.НормаЧасов) КАК ВытесненоЧасов,
//	|	ОсновныеНачисленияРаботниковОрганизацийФактическийПериодДействия.ВидРасчета,
//	|	ОсновныеНачисленияРаботниковОрганизацийФактическийПериодДействия.ПериодДействияНачало,
//	|	ОсновныеНачисленияРаботниковОрганизацийФактическийПериодДействия.ПериодДействияКонец
//	|ПОМЕСТИТЬ ВТ_Вытеснения
//	|ИЗ
//	|	РегистрРасчета.ОсновныеНачисленияРаботниковОрганизаций.ФактическийПериодДействия(
//	|			Организация = &Организация
//	|				И Сотрудник = &Сотрудник
//	|				И (ПериодДействия МЕЖДУ &НачалоПериода И &КонецПериода)
//	|				И (ОтработаноДней = 0
//	|					И ОтработаноЧасов = 0)
//	|				И ВидРасчета.ЗачетНормыВремени) КАК ОсновныеНачисленияРаботниковОрганизацийФактическийПериодДействия
//	|
//	|СГРУППИРОВАТЬ ПО
//	|	ОсновныеНачисленияРаботниковОрганизацийФактическийПериодДействия.ВидРасчета,
//	|	ОсновныеНачисленияРаботниковОрганизацийФактическийПериодДействия.ПериодДействияНачало,
//	|	ОсновныеНачисленияРаботниковОрганизацийФактическийПериодДействия.ПериодДействия,
//	|	ОсновныеНачисленияРаботниковОрганизацийФактическийПериодДействия.ПериодДействияКонец
//	|
//	|ИНДЕКСИРОВАТЬ ПО
//	|	ПериодДействия";

//	Запрос.Выполнить();


//	Запрос.Текст = "ВЫБРАТЬ
//	|	ОсновныеНачисленияРаботниковОрганизаций.ПериодДействия КАК ПериодДействия,
//	|	СУММА(ОсновныеНачисленияРаботниковОрганизаций.Результат) КАК Результат
//	|ПОМЕСТИТЬ ВТ_НачисленияПредварительная
//	|ИЗ
//	|	РегистрРасчета.ОсновныеНачисленияРаботниковОрганизаций КАК ОсновныеНачисленияРаботниковОрганизаций
//	|ГДЕ
//	|	ОсновныеНачисленияРаботниковОрганизаций.ПериодДействия МЕЖДУ &НачалоНачислений И &КонецПериода
//	|	И ОсновныеНачисленияРаботниковОрганизаций.Организация = &Организация
//	|	И ОсновныеНачисленияРаботниковОрганизаций.Сотрудник = &Сотрудник
//	|	И (НЕ ОсновныеНачисленияРаботниковОрганизаций.ВидРасчета В (&НевключаемыеВидыРасчета))
//	|	И (НЕ ОсновныеНачисленияРаботниковОрганизаций.Результат = 0)
//	|
//	|СГРУППИРОВАТЬ ПО
//	|	ОсновныеНачисленияРаботниковОрганизаций.ПериодДействия
//	|
//	|ОБЪЕДИНИТЬ ВСЕ
//	|
//	|ВЫБРАТЬ
//	|	НАЧАЛОПЕРИОДА(ДополнительныеНачисленияРаботниковОрганизаций.ПериодРегистрации, МЕСЯЦ),
//	|	СУММА(ДополнительныеНачисленияРаботниковОрганизаций.Результат)
//	|ИЗ
//	|	РегистрРасчета.ДополнительныеНачисленияРаботниковОрганизаций КАК ДополнительныеНачисленияРаботниковОрганизаций
//	|ГДЕ
//	|	ДополнительныеНачисленияРаботниковОрганизаций.ПериодРегистрации МЕЖДУ &НачалоНачислений И &КонецПериода
//	|	И ДополнительныеНачисленияРаботниковОрганизаций.Организация = &Организация
//	|	И ДополнительныеНачисленияРаботниковОрганизаций.Сотрудник = &Сотрудник
//	|	И (НЕ ДополнительныеНачисленияРаботниковОрганизаций.ВидРасчета В (&НевключаемыеВидыРасчета))
//	|	И (НЕ ДополнительныеНачисленияРаботниковОрганизаций.Результат = 0)
//	|
//	|СГРУППИРОВАТЬ ПО
//	|	НАЧАЛОПЕРИОДА(ДополнительныеНачисленияРаботниковОрганизаций.ПериодРегистрации, МЕСЯЦ)
//	|
//	|ИНДЕКСИРОВАТЬ ПО
//	|	ПериодДействия";

//	Запрос.Выполнить();


//	Запрос.Текст = "ВЫБРАТЬ
//	|	ВТ_НачисленияПредварительная.ПериодДействия КАК ПериодДействия,
//	|	СУММА(ВТ_НачисленияПредварительная.Результат) КАК Результат
//	|ПОМЕСТИТЬ ВТ_Начисления
//	|ИЗ
//	|	ВТ_НачисленияПредварительная КАК ВТ_НачисленияПредварительная
//	|
//	|СГРУППИРОВАТЬ ПО
//	|	ВТ_НачисленияПредварительная.ПериодДействия
//	|
//	|ИНДЕКСИРОВАТЬ ПО
//	|	ПериодДействия
//	|;
//	|
//	|////////////////////////////////////////////////////////////////////////////////
//	|УНИЧТОЖИТЬ ВТ_НачисленияПредварительная";

//	Запрос.Выполнить();

//	Запрос.Текст = "ВЫБРАТЬ
//	               |	ОсновныеНачисленияРаботниковОрганизаций.Сотрудник,
//	               |	ОсновныеНачисленияРаботниковОрганизаций.ПериодДействия КАК ПериодДействия,
//	               |	СУММА(ОсновныеНачисленияРаботниковОрганизаций.НормаДней) КАК НормаДней,
//	               |	СУММА(ОсновныеНачисленияРаботниковОрганизаций.НормаЧасов) КАК НормаЧасов,
//	               |	СУММА(ОсновныеНачисленияРаботниковОрганизаций.ОтработаноДней) КАК ОтработаноДней,
//	               |	СУММА(ОсновныеНачисленияРаботниковОрганизаций.ОтработаноЧасов) КАК ОтработаноЧасов,
//	               |	СУММА(ЕСТЬNULL(ВТ_Вытеснения.ВытесненоДней, 0)) КАК ВытесненоДней,
//	               |	СУММА(ЕСТЬNULL(ВТ_Вытеснения.ВытесненоЧасов, 0)) КАК ВытесненоЧасов,
//	               |	ЕСТЬNULL(ВТ_Вытеснения.ВидРасчета, НЕОПРЕДЕЛЕНО) КАК ВидРасчетаВытеснения,
//	               |	ЕСТЬNULL(ВТ_Вытеснения.ПериодДействияНачало, ДАТАВРЕМЯ(1, 1, 1)) КАК НачалоВытеснения,
//	               |	ЕСТЬNULL(ВТ_Вытеснения.ПериодДействияКонец, ДАТАВРЕМЯ(1, 1, 1)) КАК КонецВытеснения,
//	               |	МАКСИМУМ(ЕСТЬNULL(ВТ_Начисления.Результат, 0)) КАК Начислено,
//	               |	МАКСИМУМ(&КонецПериода) КАК ДатаСправки
//	               |ИЗ
//	               |	РегистрРасчета.ОсновныеНачисленияРаботниковОрганизаций КАК ОсновныеНачисленияРаботниковОрганизаций
//	               |		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_Вытеснения КАК ВТ_Вытеснения
//	               |		ПО ОсновныеНачисленияРаботниковОрганизаций.ПериодДействия = ВТ_Вытеснения.ПериодДействия
//	               |		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_Начисления КАК ВТ_Начисления
//	               |		ПО ОсновныеНачисленияРаботниковОрганизаций.ПериодДействия = ВТ_Начисления.ПериодДействия
//	               |ГДЕ
//	               |	ОсновныеНачисленияРаботниковОрганизаций.ПериодДействия МЕЖДУ &НачалоПериода И &КонецПериода
//	               |	И ОсновныеНачисленияРаботниковОрганизаций.Организация = &Организация
//	               |	И ОсновныеНачисленияРаботниковОрганизаций.Сотрудник = &Сотрудник
//	               |
//	               |СГРУППИРОВАТЬ ПО
//	               |	ОсновныеНачисленияРаботниковОрганизаций.ПериодДействия,
//	               |	ОсновныеНачисленияРаботниковОрганизаций.Сотрудник,
//	               |	ЕСТЬNULL(ВТ_Вытеснения.ВидРасчета, НЕОПРЕДЕЛЕНО),
//	               |	ЕСТЬNULL(ВТ_Вытеснения.ПериодДействияНачало, ДАТАВРЕМЯ(1, 1, 1)),
//	               |	ЕСТЬNULL(ВТ_Вытеснения.ПериодДействияКонец, ДАТАВРЕМЯ(1, 1, 1))
//	               |
//	               |УПОРЯДОЧИТЬ ПО
//	               |	ПериодДействия,
//	               |	НачалоВытеснения
//	               |ИТОГИ
//	               |	СРЕДНЕЕ(НормаДней),
//	               |	СРЕДНЕЕ(НормаЧасов),
//	               |	СРЕДНЕЕ(ОтработаноДней),
//	               |	СРЕДНЕЕ(ОтработаноЧасов),
//	               |	СРЕДНЕЕ(ВытесненоДней),
//	               |	СРЕДНЕЕ(ВытесненоЧасов),
//	               |	СРЕДНЕЕ(Начислено)
//	               |ПО
//	               |	ПериодДействия";

//	РезультатЗапроса = Запрос.Выполнить();

//	Возврат РезультатЗапроса.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);

КонецФункции

/////////////////////////////////////////////
//                                         //
//                                         //
/////////////////////////////////////////////

Функция ПолучитьТаблицуКоманд()
	
	Команды = Новый ТаблицаЗначений;
	// Как будет выглядеть описание печатной формы для пользователя
	Команды.Колонки.Добавить("Представление", Новый ОписаниеТипов("Строка"));
	// Имя нашего макета, что бы могли отличить вызванную команду в обработке печати
	Команды.Колонки.Добавить("Идентификатор", Новый ОписаниеТипов("Строка"));
	// Тут задается, как должна вызваться команда обработки
	// Возможные варианты:
	// - ОткрытиеФормы - в этом случае в колонке идентификатор должно быть указано имя формы, которое должна будет открыть система
	// - ВызовКлиентскогоМетода - вызвать клиентскую экспортную процедуру из модуля формы обработки
	// - ВызовСерверногоМетода - вызвать серверную экспортную процедуру из модуля объекта обработки
	Команды.Колонки.Добавить("Использование", Новый ОписаниеТипов("Строка"));
	// Следующий параметр указывает, необходимо ли показывать оповещение при начале и завершению работы обработки. Не имеет смысла при открытии формы
	Команды.Колонки.Добавить("ПоказыватьОповещение", Новый ОписаниеТипов("Булево"));
	// Для печатной формы должен содержать строку ПечатьMXL 
	Команды.Колонки.Добавить("Модификатор", Новый ОписаниеТипов("Строка"));
	
	Возврат Команды;
	
КонецФункции

//Создает в таблице команд новую строку

Функция ДобавитьКоманду(ТаблицаКоманд, Представление, Идентификатор, Использование, ПоказыватьОповещение = Ложь, Модификатор = "")
	НоваяКоманда = ТаблицаКоманд.Добавить();
	НоваяКоманда. Представление = Представление;
	НоваяКоманда. Идентификатор= Идентификатор;
	НоваяКоманда. Использование= Использование;
	НоваяКоманда. ПоказыватьОповещение= ПоказыватьОповещение;
	НоваяКоманда. Модификатор= Модификатор;
КонецФункции

Функция СведенияОВнешнейОбработке() Экспорт
	ПараметрыРегистрации = Новый Структура;
	МассивНазначений = Новый Массив;
	МассивНазначений.Добавить("Справочник.Сотрудники");
	ПараметрыРегистрации.Вставить("Вид", "ПечатнаяФорма"); //может быть - ЗаполнениеОбъекта, ДополнительныйОтчет, СозданиеСвязанныхОбъектов... 
	ПараметрыРегистрации.Вставить("Назначение", МассивНазначений);
	ПараметрыРегистрации.Вставить("Наименование", " Справка в службу занятости "); //имя под которым обработка будет зарегестрирована в справочнике внешних обработок
	ПараметрыРегистрации.Вставить("Версия", "1.0");
	ПараметрыРегистрации.Вставить("БезопасныйРежим", Ложь);
	ПараметрыРегистрации.Вставить("Информация", " Справка в службу занятости ");//так будет выглядеть описание печ.формы для пользователя
	ТаблицаКоманд = ПолучитьТаблицуКоманд();
	ДобавитьКоманду(ТаблицаКоманд, "Справка в службу занятости", "СправкаВСлужбуЗанятости", "ВызовСерверногоМетода", Истина);
	ПараметрыРегистрации.Вставить("Команды", ТаблицаКоманд);
	Возврат ПараметрыРегистрации;
КонецФункции

Процедура Печать(МассивОбъектов, КоллекцияПечатныхФорм, ОбъектыПечати, ПараметрыВывода) Экспорт
	
	КоллекцияПечатныхФорм = УправлениеПечатью.ПодготовитьКоллекциюПечатныхФорм("СправкаВСлужбуЗанятости");
	
	УправлениеПечатью.ВывестиТабличныйДокументВКоллекцию(КоллекцияПечатныхФорм,
	"СправкаВСлужбуЗанятости", "Справка в службу занятости",	ПечататьСправку(МассивОбъектов));
	
КонецПроцедуры

Функция ПечататьСправку(МассивОбъектов)
	
	КонецПериода = ТекущаяДата();
	
	Если ТипЗнч(МассивОбъектов)<>Тип("Массив") Тогда 
		Возврат Неопределено;
	КонецЕсли;
	
	Если МассивОбъектов.Количество()=0 Тогда 
		Возврат Неопределено;
	КонецЕсли;
	
	ВыборкаПоШапке = СформироватьЗапросПоШапкеОтчета(МассивОбъектов[0]);
	ВыборкаПоШапке.Следующий();
	
	ТабДокумент = Новый ТабличныйДокумент;
	Макет = ПолучитьМакет("СправкаВСлужбуЗанятости");
	
	//Запрос = Новый Запрос;
	//Запрос.Текст = "ВЫБРАТЬ
	//               |	ЮрАдрес.Представление КАК ЮрАдрес,
	//               |	Тел.Представление КАК Телефон
	//               |ИЗ
	//               |	РегистрСведений.КонтактнаяИнформация КАК ЮрАдрес,
	//               |	РегистрСведений.КонтактнаяИнформация КАК Тел
	//               |ГДЕ
	//               |	ЮрАдрес.Объект.Ссылка = &Организация
	//               |	И ЮрАдрес.Тип = ЗНАЧЕНИЕ(Перечисление.ТипыКонтактнойИнформации.Адрес)
	//               |	И ЮрАдрес.Вид = ЗНАЧЕНИЕ(Справочник.ВидыКонтактнойИнформации.ЮрАдресОрганизации)
	//               |	И Тел.Объект.Ссылка = &Организация
	//               |	И Тел.Тип = ЗНАЧЕНИЕ(Перечисление.ТипыКонтактнойИнформации.Телефон)
	//               |	И Тел.Вид = ЗНАЧЕНИЕ(Справочник.ВидыКонтактнойИнформации.ТелефонОрганизации)";

	//Запрос.УстановитьПараметр("Организация", СсылкаНаОбъект.Организация);
	//ВыборкаПоОрганизации = Запрос.Выполнить().Выбрать();
	
	//Макет.Параметры.Организация   = СсылкаНаОбъект.Организация;
	//Макет.Параметры.ИНН           = СсылкаНаОбъект.Организация.ИНН;
	//Если ВыборкаПоОрганизации.Следующий() Тогда
	//	Макет.Параметры.ЮрАдрес   = ВыборкаПоОрганизации.ЮрАдрес;
	//	Макет.Параметры.Телефон   = ВыборкаПоОрганизации.Телефон;
	//КонецЕсли;
	Макет.Параметры.Дата                 = Формат(ТекущаяДата(),"ДФ='«dd» MMMM yyyy ""г.""'");
	Макет.Параметры.ФИОСотрудника        = ВРег(ПросклонятьФИОПоВозможности(ВыборкаПоШапке.ФизическоеЛицо, ВыборкаПоШапке.Пол, 3));
	Макет.Параметры.Сотрудник            = МассивОбъектов[0];
	Макет.Параметры.СутьПериодРаботы     = "в том, что " + ?(ВыборкаПоШапке.Пол = Перечисления.ПолФизическогоЛица.Мужской, "он ", "она ") +
										   ?(ВыборкаПоШапке.Пол = Перечисления.ПолФизическихЛиц.Мужской, "работал, проходил службу ", "работала, проходила службу ") +
										   "с "+Формат(ВыборкаПоШапке.ДатаПриема, "ДФ='«dd» MMMM yyyy ""г.""'; ДП=-") + " по " + Формат(ВыборкаПоШапке.ДатаУвольнения, "ДФ='«dd» MMMM yyyy ""г.""'; ДП='настоящее время'");
	//Макет.Параметры.ОрганизацияПолностью = СсылкаНаОбъект.Организация.НаименованиеПолное;
	Макет.Параметры.Часов = 8;
	Макет.Параметры.Дней  = 5;
	
	Для Н = 1 По 12 Цикл
		Макет.Параметры["Год"+Н] = ДобавитьМесяц(НачалоМесяца(КонецПериода), Н-13);
		Макет.Параметры["Мес"+Н] = ДобавитьМесяц(НачалоМесяца(КонецПериода), Н-13);
	КонецЦикла;
	
	Н               = 0;
	ИтогоНачисления = 0;
	ИтогоПланДней   = 0;
	ИтогоПланЧасов  = 0;
	ИтогоФактДней   = 0;
	ИтогоФактЧасов  = 0;
	
	ВыборкаПоПериду = СформироватьЗапросПоТабличнойЧасти(КонецПериода);
	
	Пока ВыборкаПоПериду.Следующий() Цикл
		Н = Н + 1;
		Если Н > 9 Тогда
			ИтогоНачисления = ИтогоНачисления + ВыборкаПоПериду.Начислено;
			ИтогоПланДней   = ИтогоПланДней   + ВыборкаПоПериду.НормаДней;
			ИтогоПланЧасов  = ИтогоПланЧасов  + ВыборкаПоПериду.НормаЧасов;
			ИтогоФактДней   = ИтогоФактДней   + ВыборкаПоПериду.ОтработаноДней;
			ИтогоФактЧасов  = ИтогоФактЧасов  + ВыборкаПоПериду.ОтработаноЧасов;
			Макет.Параметры["Начислено"+Н] = ВыборкаПоПериду.Начислено;
			Макет.Параметры["План"     +Н] = Строка(ВыборкаПоПериду.НормаДней     )+" ("+Строка(ВыборкаПоПериду.НормаЧасов     )+")";
			Макет.Параметры["Факт"     +Н] = Строка(ВыборкаПоПериду.ОтработаноДней)+" ("+Строка(ВыборкаПоПериду.ОтработаноЧасов)+")";
		КонецЕсли;
		
		СтрокаКоментария = "";
		
		ВыборкаПоНачислениям = ВыборкаПоПериду.Выбрать();
		Пока ВыборкаПоНачислениям.Следующий() Цикл
			Если ЗначениеЗаполнено(ВыборкаПоНачислениям.НачалоВытеснения) Тогда
				Разделитель = ?(ПустаяСтрока(СтрокаКоментария), "", ","+Символы.ПС);
				//Если      ВыборкаПоНачислениям.ВидРасчетаВытеснения = ПланыВидовРасчета.ОсновныеНачисленияОрганизаций.ОплатаБЛПоТравмеВБыту             Или
				//		  ВыборкаПоНачислениям.ВидРасчетаВытеснения = ПланыВидовРасчета.ОсновныеНачисленияОрганизаций.ОплатаБЛПоТравмеНаПроизводстве    Или
				//		  ВыборкаПоНачислениям.ВидРасчетаВытеснения = ПланыВидовРасчета.ОсновныеНачисленияОрганизаций.ОплатаПоСреднемуБЛ                Или
				//		  ВыборкаПоНачислениям.ВидРасчетаВытеснения = ПланыВидовРасчета.ОсновныеНачисленияОрганизаций.ОтсутствиеПоБолезни               Или
				//		  ВыборкаПоНачислениям.ВидРасчетаВытеснения = ПланыВидовРасчета.ОсновныеНачисленияОрганизаций.ОтсутствиеПоБолезниПоБеременности
				//		  Тогда	ГдеБылСотрудник = ?(ВыборкаПоШапке.Пол = Перечисления.ПолФизическихЛиц.Мужской, " болел", " болела");
				//ИначеЕсли ВыборкаПоНачислениям.ВидРасчетаВытеснения = ПланыВидовРасчета.ОсновныеНачисленияОрганизаций.ОтпускБезОплатыУчебный            Или
				//		  ВыборкаПоНачислениям.ВидРасчетаВытеснения = ПланыВидовРасчета.ОсновныеНачисленияОрганизаций.ОплатаПоСреднемуОтпКалендарныеДни Или
				//		  ВыборкаПоНачислениям.ВидРасчетаВытеснения = ПланыВидовРасчета.ОсновныеНачисленияОрганизаций.ОплатаПоСреднемуОтпШестидневка    Или
				//		  ВыборкаПоНачислениям.ВидРасчетаВытеснения = ПланыВидовРасчета.ОсновныеНачисленияОрганизаций.ОтпускЗаСвойСчет                  Или
				//		  ВыборкаПоНачислениям.ВидРасчетаВытеснения = ПланыВидовРасчета.ОсновныеНачисленияОрганизаций.ОтпускПоБеременностиИРодам        Или
				//		  ВыборкаПоНачислениям.ВидРасчетаВытеснения = ПланыВидовРасчета.ОсновныеНачисленияОрганизаций.ОтпускПоУходуЗаРебенкомБезОплаты
				//		  Тогда ГдеБылСотрудник = " отпуск";
				//ИначеЕсли ВыборкаПоНачислениям.ВидРасчетаВытеснения = ПланыВидовРасчета.ОсновныеНачисленияОрганизаций.ОплатаПоСреднему
				//		  Тогда ГдеБылСотрудник = " командировка";
				//ИначеЕсли ВыборкаПоНачислениям.ВидРасчетаВытеснения = ПланыВидовРасчета.ОсновныеНачисленияОрганизаций.ПростойТарифДневной               Или
				//		  ВыборкаПоНачислениям.ВидРасчетаВытеснения = ПланыВидовРасчета.ОсновныеНачисленияОрганизаций.ПростойТарифЧасовой
				//		  Тогда	ГдеБылСотрудник = " простой";
				//ИначеЕсли ВыборкаПоНачислениям.ВидРасчетаВытеснения = ПланыВидовРасчета.ОсновныеНачисленияОрганизаций.Невыход                           Или
				//		  ВыборкаПоНачислениям.ВидРасчетаВытеснения = ПланыВидовРасчета.ОсновныеНачисленияОрганизаций.Прогул
				//		  Тогда	ГдеБылСотрудник = " прогул";
				//Иначе
				//	ГдеБылСотрудник = " отсутств.";
				//КонецЕсли;
				//Коментарий = "с " + Формат(ВыборкаПоНачислениям.НачалоВытеснения, "ДФ=dd") + " по " + Формат(ВыборкаПоНачислениям.КонецВытеснения, "ДФ=dd") + " " + ГдеБылСотрудник;
				//СтрокаКоментария = СтрокаКоментария + Разделитель + Коментарий;
			КонецЕсли;
		КонецЦикла;
		
		Макет.Параметры["Причина"+Н] = СтрокаКоментария;
		
	КонецЦикла;
	
	Макет.Параметры["ИтогоНачислено"] = ИтогоНачисления;
	Макет.Параметры["ИтогоПлан"     ] = Строка(ИтогоПланДней)+" ("+Строка(ИтогоПланЧасов)+")";
	Макет.Параметры["ИтогоФакт"     ] = Строка(ИтогоФактДней)+" ("+Строка(ИтогоФактЧасов)+")";
	
	СреднийЗаработок = ?(ИтогоФактДней = 0, 0, ИтогоНачисления * ИтогоПланДней / ИтогоФактДней / 3);
	Макет.Параметры.СреднийЗаработокЦифрами  = Строка(Цел(СреднийЗаработок)) + " руб. " + Строка(Окр(СреднийЗаработок - Цел(СреднийЗаработок), 2, 1) * 100) + " коп.";
	Макет.Параметры.СреднийЗаработокПрописью = ЧислоПрописью(СреднийЗаработок, "L=ru_RU", "рубль, рубля, рублей, м, копейка, копейки, копеек, ж, 2");
	
	Макет.Параметры.ФИОРуководителя = ПросклонятьФИОПоВозможности(ВыборкаПоШапке.ФизЛицоРуководителя, ВыборкаПоШапке.ПолРуководителя, 1);
	Макет.Параметры.ФИОГлБухгалтера = ПросклонятьФИОПоВозможности(ВыборкаПоШапке.ФизЛицоГлБухгалтера, ВыборкаПоШапке.ПолГлБухгалтера, 1);
	
	ТабДокумент.Вывести(Макет);

	
	ТабДокумент.ОриентацияСтраницы    = ОриентацияСтраницы.Портрет;
	ТабДокумент.АвтоМасштаб           = Истина;
	ТабДокумент.ОтображатьГруппировки = Ложь;
	ТабДокумент.ОтображатьЗаголовки   = Ложь;
	ТабДокумент.ОтображатьСетку       = Ложь;
	
	Возврат ТабДокумент;


	
КонецФункции

Функция СформироватьЗапросПоШапкеОтчета(Сотрудник)
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	Запрос.УстановитьПараметр("Организация"       , Справочники.Организации.НайтиПоНаименованию("ППФ Страхование жизни ООО"));
	Запрос.УстановитьПараметр("СсылкаНаОбъект"    , Сотрудник);
	Запрос.УстановитьПараметр("КонецПериода"      , ТекущаяДата());
	Запрос.УстановитьПараметр("ТекущаяДата"       , ТекущаяДата());
	Запрос.УстановитьПараметр("ФизЛицоИсполнителя", ПараметрыСеанса.ТекущийПользователь.ФизическоеЛицо);

	Запрос.Текст = "ВЫБРАТЬ
	               |	СведенияОбОтветственныхЛицахСрезПоследних.Руководитель КАК ФизЛицоРуководителя,
	               |	СведенияОбОтветственныхЛицахСрезПоследних.ДолжностьРуководителя,
	               |	СведенияОбОтветственныхЛицахСрезПоследних.ГлавныйБухгалтер КАК ФизЛицоГлБухгалтера
				   |ПОМЕСТИТЬ ВТ_ОтветственныеЛица
	               |ИЗ
	               |	РегистрСведений.СведенияОбОтветственныхЛицах.СрезПоследних(&ТекущаяДата, ) КАК СведенияОбОтветственныхЛицахСрезПоследних";

	Запрос.Выполнить();


	Запрос.Текст = "ВЫБРАТЬ
	|	МАКСИМУМ(ВТ_ОтветственныеЛица.ФизЛицоРуководителя) КАК ФизЛицоРуководителя,
	|	МАКСИМУМ(ВЫБОР
	|			КОГДА ВТ_ОтветственныеЛица.ФизЛицоРуководителя = ФИОФизЛицСрезПоследних.ФизическоеЛицо
	|				ТОГДА ФИОФизЛицСрезПоследних.Фамилия
	|			ИНАЧЕ """"
	|		КОНЕЦ) КАК ФамилияРуководителя,
	|	МАКСИМУМ(ВЫБОР
	|			КОГДА ВТ_ОтветственныеЛица.ФизЛицоРуководителя = ФИОФизЛицСрезПоследних.ФизическоеЛицо
	|				ТОГДА ФИОФизЛицСрезПоследних.Имя
	|			ИНАЧЕ """"
	|		КОНЕЦ) КАК ИмяРуководителя,
	|	МАКСИМУМ(ВЫБОР
	|			КОГДА ВТ_ОтветственныеЛица.ФизЛицоРуководителя = ФИОФизЛицСрезПоследних.ФизическоеЛицо
	|				ТОГДА ФИОФизЛицСрезПоследних.Отчество
	|			ИНАЧЕ """"
	|		КОНЕЦ) КАК ОтчествоРуководителя,
	|	МАКСИМУМ(ВТ_ОтветственныеЛица.ФизЛицоРуководителя.Пол) КАК ПолРуководителя,
	|	МАКСИМУМ(ВТ_ОтветственныеЛица.ДолжностьРуководителя) КАК ДолжностьРуководителя,
	|	МАКСИМУМ(ВТ_ОтветственныеЛица.ФизЛицоГлБухгалтера) КАК ФизЛицоГлБухгалтера,
	|	МАКСИМУМ(ВЫБОР
	|			КОГДА ВТ_ОтветственныеЛица.ФизЛицоГлБухгалтера = ФИОФизЛицСрезПоследних.ФизическоеЛицо
	|				ТОГДА ФИОФизЛицСрезПоследних.Фамилия
	|			ИНАЧЕ """"
	|		КОНЕЦ) КАК ФамилияГлБухгалтера,
	|	МАКСИМУМ(ВЫБОР
	|			КОГДА ВТ_ОтветственныеЛица.ФизЛицоГлБухгалтера = ФИОФизЛицСрезПоследних.ФизическоеЛицо
	|				ТОГДА ФИОФизЛицСрезПоследних.Имя
	|			ИНАЧЕ """"
	|		КОНЕЦ) КАК ИмяГлБухгалтера,
	|	МАКСИМУМ(ВЫБОР
	|			КОГДА ВТ_ОтветственныеЛица.ФизЛицоГлБухгалтера = ФИОФизЛицСрезПоследних.ФизическоеЛицо
	|				ТОГДА ФИОФизЛицСрезПоследних.Отчество
	|			ИНАЧЕ """"
	|		КОНЕЦ) КАК ОтчествоГлБухгалтера,
	|	МАКСИМУМ(ВТ_ОтветственныеЛица.ФизЛицоГлБухгалтера.Пол) КАК ПолГлБухгалтера
	//|	МАКСИМУМ(ВТ_ОтветственныеЛица.ДолжностьГлБухгалтера) КАК ДолжностьГлБухгалтера
	|ПОМЕСТИТЬ ВТ_РуководителяПолная
	|ИЗ
	|	ВТ_ОтветственныеЛица КАК ВТ_ОтветственныеЛица
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ФИОФизическихЛиц.СрезПоследних КАК ФИОФизЛицСрезПоследних
	|		ПО (ВТ_ОтветственныеЛица.ФизЛицоРуководителя = ФИОФизЛицСрезПоследних.ФизическоеЛицо
	|				ИЛИ ВТ_ОтветственныеЛица.ФизЛицоГлБухгалтера = ФИОФизЛицСрезПоследних.ФизическоеЛицо)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ ВТ_ОтветственныеЛица";

	Запрос.Выполнить();


	Запрос.Текст = "ВЫБРАТЬ
	|	ФизическиеЛица.Ссылка КАК ФизЛицоИсполнителя,
	|	ФизическиеЛица.Пол КАК ПолИсполнителя,
	|	ЕСТЬNULL(ФИОФизЛицСрезПоследних.Фамилия, """") КАК ФимилияИсполнителя,
	|	ЕСТЬNULL(ФИОФизЛицСрезПоследних.Имя, """") КАК ИмяИсполнителя,
	|	ЕСТЬNULL(ФИОФизЛицСрезПоследних.Отчество, """") КАК ОтчетствоИсполнителя
	|ПОМЕСТИТЬ ВТ_Исполнителя
	|ИЗ
	|	Справочник.ФизическиеЛица КАК ФизическиеЛица
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ФИОФизическихЛиц.СрезПоследних(&КонецПериода, ФизическоеЛицо = &ФизЛицоИсполнителя) КАК ФИОФизЛицСрезПоследних
	|		ПО ФизическиеЛица.Ссылка = ФИОФизЛицСрезПоследних.ФизическоеЛицо
	|ГДЕ
	|	ФизическиеЛица.Ссылка = &ФизЛицоИсполнителя";

	Запрос.Выполнить();


	Запрос.Текст = "ВЫБРАТЬ
	               |	СотрудникиОрганизаций.ФизическоеЛицо.ИНН КАК ИНН,
	               |	СотрудникиОрганизаций.ФизическоеЛицо,
	               |	ЕСТЬNULL(ФИОФизЛицСрезПоследних.Фамилия, """") КАК Фамилия,
	               |	ЕСТЬNULL(ФИОФизЛицСрезПоследних.Имя, """") КАК Имя,
	               |	ЕСТЬNULL(ФИОФизЛицСрезПоследних.Отчество, """") КАК Отчество,
	               |	СотрудникиОрганизаций.ФизическоеЛицо.Пол КАК Пол,
	               |	ЕСТЬNULL(ВТ_РуководителяПолная.ФизЛицоРуководителя, ЗНАЧЕНИЕ(Справочник.ФизическиеЛица.ПустаяСсылка)) КАК ФизЛицоРуководителя,
	               |	ЕСТЬNULL(ВТ_РуководителяПолная.ФамилияРуководителя, """") КАК ФамилияРуководителя,
	               |	ЕСТЬNULL(ВТ_РуководителяПолная.ИмяРуководителя, """") КАК ИмяРуководителя,
	               |	ЕСТЬNULL(ВТ_РуководителяПолная.ОтчествоРуководителя, """") КАК ОтчествоРуководителя,
	               |	ЕСТЬNULL(ВТ_РуководителяПолная.ПолРуководителя, ЗНАЧЕНИЕ(Перечисление.ПолФизическогоЛица.Мужской)) КАК ПолРуководителя,
	               |	ЕСТЬNULL(ВТ_РуководителяПолная.ДолжностьРуководителя, ЗНАЧЕНИЕ(Справочник.Должности.ПустаяСсылка)) КАК ДолжностьРуководителя,
	               |	ЕСТЬNULL(ВТ_РуководителяПолная.ФизЛицоГлБухгалтера, ЗНАЧЕНИЕ(Справочник.ФизическиеЛица.ПустаяСсылка)) КАК ФизЛицоГлБухгалтера,
	               |	ЕСТЬNULL(ВТ_РуководителяПолная.ФамилияГлБухгалтера, """") КАК ФамилияГлБухгалтера,
	               |	ЕСТЬNULL(ВТ_РуководителяПолная.ИмяГлБухгалтера, """") КАК ИмяГлБухгалтера,
	               |	ЕСТЬNULL(ВТ_РуководителяПолная.ОтчествоГлБухгалтера, """") КАК ОтчествоГлБухгалтера,
	               |	ЕСТЬNULL(ВТ_РуководителяПолная.ПолГлБухгалтера, ЗНАЧЕНИЕ(Перечисление.ПолФизическогоЛица.Женский)) КАК ПолГлБухгалтера,
	               |	ЕСТЬNULL(ВТ_Исполнителя.ФизЛицоИсполнителя, ЗНАЧЕНИЕ(Справочник.ФизическиеЛица.ПустаяСсылка)) КАК ФизЛицоИсполнителя,
	               |	ЕСТЬNULL(ВТ_Исполнителя.ПолИсполнителя, ЗНАЧЕНИЕ(Перечисление.ПолФизическогоЛица.Мужской)) КАК ПолИсполнителя,
	               |	ЕСТЬNULL(ВТ_Исполнителя.ФимилияИсполнителя, """") КАК ФимилияИсполнителя,
	               |	ЕСТЬNULL(ВТ_Исполнителя.ИмяИсполнителя, """") КАК ИмяИсполнителя,
	               |	ЕСТЬNULL(ВТ_Исполнителя.ОтчетствоИсполнителя, """") КАК ОтчетствоИсполнителя,
	               |	&ТекущаяДата КАК ДатаСправки,
	               |	ТекущиеКадровыеДанныеСотрудников.ДатаПриема,
	               |	ТекущиеКадровыеДанныеСотрудников.ДатаУвольнения
	               |ИЗ
	               |	Справочник.Сотрудники КАК СотрудникиОрганизаций
	               |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ФИОФизическихЛиц.СрезПоследних(&КонецПериода, ) КАК ФИОФизЛицСрезПоследних
	               |		ПО СотрудникиОрганизаций.ФизическоеЛицо = ФИОФизЛицСрезПоследних.ФизическоеЛицо
	               |		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_РуководителяПолная КАК ВТ_РуководителяПолная
	               |		ПО (ИСТИНА)
	               |		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_Исполнителя КАК ВТ_Исполнителя
	               |		ПО (ИСТИНА)
	               |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ТекущиеКадровыеДанныеСотрудников КАК ТекущиеКадровыеДанныеСотрудников
	               |		ПО ТекущиеКадровыеДанныеСотрудников.Сотрудник = СотрудникиОрганизаций.Ссылка
	               |ГДЕ
	               |	СотрудникиОрганизаций.Ссылка = &СсылкаНаОбъект";

	РезультатЗапроса = Запрос.Выполнить();

	Возврат РезультатЗапроса.Выбрать();

КонецФункции

Функция ПросклонятьФИОПоВозможности(ФИО, Пол, Падеж)

	Результат = ФизическиеЛицаЗарплатаКадры.Просклонять(ФИО, Падеж, Результат, Пол);
	Возврат СокрЛП(Результат);

КонецФункции

