#Область Сведения_О_Внешней_Обработке

Функция СведенияОВнешнейОбработке() Экспорт
	
   РегистрационныеДанные = Новый Структура;
   
   РегистрационныеДанные.Вставить("Наименование", 		НСтр("ru = 'Обновление персональной информации агентов'"));
   РегистрационныеДанные.Вставить("БезопасныйРежим", 	Ложь);
   РегистрационныеДанные.Вставить("Версия", 			"2.0");
   РегистрационныеДанные.Вставить("Вид", 				"ДополнительнаяОбработка");
   РегистрационныеДанные.Вставить("Информация", 		НСтр("ru = 'Обновление персональной информации агентов'"));
   
   Команды = Новый ТаблицаЗначений;
   Команды.Колонки.Добавить("Идентификатор");
   Команды.Колонки.Добавить("Представление");
   Команды.Колонки.Добавить("Модификатор");
   Команды.Колонки.Добавить("ПоказыватьОповещение");
   Команды.Колонки.Добавить("Использование");
   
   Команда 						= Команды.Добавить();
   Команда.Идентификатор 		= "1";
   Команда.Представление 		= НСтр("ru = 'Обновление персональной информации агентов'");
   Команда.ПоказыватьОповещение = Истина;
   Команда.Использование 		= "ВызовСерверногоМетода";
   
   РегистрационныеДанные.Вставить("Команды", Команды);
   
   Возврат РегистрационныеДанные;
   
КонецФункции

Процедура ВыполнитьКоманду(ИдентификаторКоманды = Неопределено) Экспорт

	ВыполнитьЗагрузкуНачисленийИИнформацииПоАгентам();	
	
КонецПроцедуры

#КонецОбласти

#Область ЭкспортныеПроцедурыМодуляОбъекта

Процедура ВыполнитьЗагрузкуНачисленийИИнформацииПоАгентам() Экспорт
	
	Соединение = ППФ_Сервер.УстановитьСоединение("RP1");
	Если Соединение <> Неопределено Тогда
		
		//////////////////////////////////////////////////
		//// Выгрузка информациия по агентам
		////////////////////////////////////////////////// 
		
		//Получаем таблицу для выгрузки данных из 1С
		ТаблицаИнформацииПоАгентам = ПолучитьИнформациюПоАгентам();
		
		//Очистим таблицу в RP
		ТекстЗапросаОчисткаТаблицы = "DELETE FROM  t_dealer_1c_txt";
		РезультатОчисткиТаблицы = ППФ_Сервер.RP1_ВыполнитьЗапрос(ТекстЗапросаОчисткаТаблицы, Соединение);
		
		// Сформируем и выполним запрос загрузки данных из 1С в RP
		ТекстЗапросаЗаполненияТаблицы = "";
		ТекстЗапросаЗаполненияТаблицы1 = "";
		ТекстЗапросаЗаполненияТаблицы2 = "";
		КоличествоСтрок = ТаблицаИнформацииПоАгентам.Количество();
		Если КоличествоСтрок > 1 Тогда
			Переход = Окр(КоличествоСтрок / 2,0,РежимОкругления.Окр15как10);	
		Иначе
			Переход = Неопределено;	
		КонецЕсли;
		
		Сч = 1;
		Для Каждого Строка Из ТаблицаИнформацииПоАгентам Цикл
			
			ТекстЗапросаЗаполненияТаблицыНачало = 
			" INSERT INTO t_dealer_1c_txt(number,start_date,end_date,
			|surname,forename,middle,born_date,	sex,inn,pen_number,doc_type,doc_number,doc_author,doc_date,	unit_code,nationality,bik,
			|acc_num,reg_ind,reg_address_date,reg_district,reg_area,reg_city,reg_street,reg_entrance_num,reg_corpus,reg_flat,
			|pp_ind,pp_district,pp_area,pp_city,pp_street,pp_entrance_num,pp_corpus,pp_flat,kostl,reg_point,pp_point) ";
			
			ТекстЗапросаСтрока = " SELECT " + 
			"'"+
			СокрЛП(Строка.number)			+"','"+
			СокрЛП(Строка.start_date)		+"','"+
			СокрЛП(Строка.end_date)			+"','"+
			СокрЛП(Строка.surname)			+"','"+
			СокрЛП(Строка.forename)			+"','"+
			СокрЛП(Строка.middle)			+"','"+
			СокрЛП(Строка.born_date)		+"','"+
			СокрЛП(Строка.sex)				+"','"+
			СокрЛП(Строка.inn)				+"','"+
			СокрЛП(Строка.pen_number)		+"',"+
			Строка.doc_type					+",'"+
			СокрЛП(Строка.doc_number)		+"','"+
			СокрЛП(Строка.doc_author)		+"','"+
			СокрЛП(Строка.doc_date)			+"','"+
			СокрЛП(Строка.unit_code)		+"','"+
			СокрЛП(Строка.nationality)		+"','"+
			СокрЛП(Строка.bik)				+"','"+
			СокрЛП(Строка.acc_num)			+"',"+
			?(ЗначениеЗаполнено(Строка.reg_ind),Формат(Строка.reg_ind,"ЧГ="),0)		+",'"+
			СокрЛП(Строка.reg_address_date)	+"','"+
			СокрЛП(Строка.reg_district)		+"','"+
			СокрЛП(Строка.reg_area)			+"','"+
			СокрЛП(Строка.reg_city)			+"','"+
			СокрЛП(Строка.reg_street)		+"','"+
			СокрЛП(Строка.reg_entrance_num)	+"','"+
			СокрЛП(Строка.reg_corpus)		+"','"+
			СокрЛП(Строка.reg_flat)			+"',"+
			?(ЗначениеЗаполнено(Строка.pp_ind),Формат(Строка.pp_ind,"ЧГ="),0)		+",'"+
			СокрЛП(Строка.pp_district)		+"','"+
			СокрЛП(Строка.pp_area)			+"','"+
			СокрЛП(Строка.pp_city)			+"','"+
			СокрЛП(Строка.pp_street)		+"','"+
			СокрЛП(Строка.pp_entrance_num)	+"','"+
			СокрЛП(Строка.pp_corpus)		+"','"+
			СокрЛП(Строка.pp_flat)			+"','"+
			СокрЛП(Строка.kostl)			+"','"+
			СокрЛП(Строка.reg_point) 		+"','"+
			СокрЛП(Строка.pp_point)+"'; ";		
			
			Если Переход = Неопределено Тогда				
				ТекстЗапросаЗаполненияТаблицы = ТекстЗапросаЗаполненияТаблицы + ТекстЗапросаЗаполненияТаблицыНачало + ТекстЗапросаСтрока;				
			Иначе                                                                                                                        				
				Если Сч <= Переход Тогда					
					ТекстЗапросаЗаполненияТаблицы1 = ТекстЗапросаЗаполненияТаблицы1 + ТекстЗапросаЗаполненияТаблицыНачало + ТекстЗапросаСтрока;						
				Иначе                                                                                                                           					
					ТекстЗапросаЗаполненияТаблицы2 = ТекстЗапросаЗаполненияТаблицы2 + ТекстЗапросаЗаполненияТаблицыНачало + ТекстЗапросаСтрока;						
				КонецЕсли;				
			КонецЕсли;    				
			Сч = Сч + 1;
		КонецЦикла;
		
		Если Не ПустаяСтрока(ТекстЗапросаЗаполненияТаблицы) Тогда		
			РезультатЗаполненияТаблицы = ППФ_Сервер.RP1_ВыполнитьЗапрос(ТекстЗапросаЗаполненияТаблицы, Соединение);			
		Иначе			
			РезультатЗаполненияТаблицы1 = ППФ_Сервер.RP1_ВыполнитьЗапрос(ТекстЗапросаЗаполненияТаблицы1, Соединение);
			РезультатЗаполненияТаблицы2 = ППФ_Сервер.RP1_ВыполнитьЗапрос(ТекстЗапросаЗаполненияТаблицы2, Соединение);
		КонецЕсли;
		
		//////////////////////////////////////////////////
		////Информация по агентам
		////////////////////////////////////////////////// 
		
		ТекстЗапросаИнформацияПоАгентам = "exec p_dealer_1c_delta2";
		ИнформацияПоАгентам = ППФ_Сервер.RP1_ПолучитьРезультатЗапроса(ТекстЗапросаИнформацияПоАгентам, Соединение);
		Если ТипЗнч(ИнформацияПоАгентам) = Тип("ТаблицаЗначений") И ИнформацияПоАгентам.Количество() > 0  Тогда			
			МассивКодовСотрудников = ИнформацияПоАгентам.ВыгрузитьКолонку("number");
			СоответствиеМВЗ = ПолучитьСоответствиеМВЗ(МассивКодовСотрудников);
			Договора = ПолучитьДоговораАгентов(МассивКодовСотрудников);
			Для Каждого СтрокаДоговора Из Договора Цикл 
				СтрокаДоговора.number = СокрЛП(СтрокаДоговора.number);
			КонецЦикла;
			ВсеФИОФизлиц = ПолучитьФИОФизлиц();
			Если ВсеФИОФизлиц = Неопределено Тогда
				ППФ_Сервер.RP1_ЗаписатьВЖурналРегистрации(НСтр("ru = 'Не удалось получить ФИО всех физических лиц.'"), УровеньЖурналаРегистрации.Ошибка); 	
				Возврат;
			КонецЕсли;			
			СНИЛСФизиковШтатников = ПолучитьСНИЛСФизиковШтатников();
			Если СНИЛСФизиковШтатников.Количество() = 0 Тогда 
				ППФ_Сервер.RP1_ЗаписатьВЖурналРегистрации(НСтр("ru = 'Не удалось получить список Штатных сотрудников'"), УровеньЖурналаРегистрации.Ошибка); 	
				Возврат;
			КонецЕсли;
			ВсеСотрудники 		= ПолучитьВсехСотрудников();
			Если ВсеСотрудники.Количество() = 0 Тогда 
				ППФ_Сервер.RP1_ЗаписатьВЖурналРегистрации(НСтр("ru = 'Не удалось получить список сотрудников организации'"), УровеньЖурналаРегистрации.Ошибка); 	
				Возврат;
			КонецЕсли;
			ЕстьОшибка = Ложь;			
			Организация 		= Справочники.Организации.ОрганизацияПоУмолчанию();
			ПодразделениеАгенты = Справочники.ПодразделенияОрганизаций.НайтиПоКоду("Агенты");		
			Для Каждого ИнформацияПоАгенту Из ИнформацияПоАгентам Цикл
				Если АгентОшибочный(ИнформацияПоАгенту.number) Тогда 
					Возврат;
				КонецЕсли;
				Попытка
					ЗагрузитьИнформациюПоАгенту(ИнформацияПоАгенту,СоответствиеМВЗ,Договора,ВсеФИОФизлиц, СНИЛСФизиковШтатников, Организация, ПодразделениеАгенты, ВсеСотрудники);
				Исключение
					ЕстьОшибка = Истина;
				КонецПопытки;
			КонецЦикла;	    			
			ОтправитьПисьмо(ЕстьОшибка);
		Иначе    
			ППФ_Сервер.RP1_ЗаписатьВЖурналРегистрации("Таблица с информацией по агентам не заполнена!", УровеньЖурналаРегистрации.Предупреждение);					
		КонецЕсли;   				
		Соединение = Неопределено;    		
	КонецЕсли;
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Процедура ОтправитьПисьмо(ЕстьОшибка = Ложь, КомментарийОбОшибке = Неопределено)
	
	ПараметрыПисьма = Новый Структура;
	ПараметрыПисьма.Вставить("Кому",  "RArtamonov@ppfinsurance.ru;MPonomarev@ppfinsurance.ru");
	ПараметрыПисьма.Вставить("Тема",  "Оповещение: Обновление лицевых счетов агентов");	
	
	Если Не ЕстьОшибка Тогда		
		ПараметрыПисьма.Вставить("Тело", "Выполнено успешно!");		
	Иначе                                                      		
		ПараметрыПисьма.Вставить("Тело", "Выполнено с ошибкой! " + КомментарийОбОшибке);		
	КонецЕсли;
	
	ДоступныеУчетныеЗаписи = РаботаСПочтовымиСообщениями.ДоступныеУчетныеЗаписи(Истина);
	Если ДоступныеУчетныеЗаписи.Количество() > 0 Тогда  
		РаботаСПочтовымиСообщениями.ОтправитьПочтовоеСообщение(ДоступныеУчетныеЗаписи[0].Ссылка, ПараметрыПисьма);		
	КонецЕсли;
	
КонецПроцедуры // ОтправитьПисьмо()

Функция ПолучитьИнформациюПоАгентам()
	// Формируемая таблица
	ТаблицаИнформацииПоАгентамПредставлениеАдреса = Новый ТаблицаЗначений;
	ТаблицаИнформацииПоАгентамПредставлениеАдреса.Колонки.Добавить("number", 			Новый ОписаниеТипов("Строка",,,, Новый КвалификаторыСтроки(10)));
	ТаблицаИнформацииПоАгентамПредставлениеАдреса.Колонки.Добавить("start_date",  		Новый ОписаниеТипов("Строка",,,, Новый КвалификаторыСтроки(8)));
	ТаблицаИнформацииПоАгентамПредставлениеАдреса.Колонки.Добавить("end_date",  		Новый ОписаниеТипов("Строка",,,, Новый КвалификаторыСтроки(8)));
	ТаблицаИнформацииПоАгентамПредставлениеАдреса.Колонки.Добавить("surname", 			Новый ОписаниеТипов("Строка",,,, Новый КвалификаторыСтроки(50)));
	ТаблицаИнформацииПоАгентамПредставлениеАдреса.Колонки.Добавить("forename",			Новый ОписаниеТипов("Строка",,,, Новый КвалификаторыСтроки(50)));
	ТаблицаИнформацииПоАгентамПредставлениеАдреса.Колонки.Добавить("middle", 			Новый ОписаниеТипов("Строка",,,, Новый КвалификаторыСтроки(50)));
	ТаблицаИнформацииПоАгентамПредставлениеАдреса.Колонки.Добавить("born_date",  		Новый ОписаниеТипов("Строка",,,, Новый КвалификаторыСтроки(8)));
	ТаблицаИнформацииПоАгентамПредставлениеАдреса.Колонки.Добавить("sex", 				Новый ОписаниеТипов("Строка",,,, Новый КвалификаторыСтроки(1)));
	ТаблицаИнформацииПоАгентамПредставлениеАдреса.Колонки.Добавить("inn", 				Новый ОписаниеТипов("Строка",,,, Новый КвалификаторыСтроки(12)));
	ТаблицаИнформацииПоАгентамПредставлениеАдреса.Колонки.Добавить("pen_number", 		Новый ОписаниеТипов("Строка",,,, Новый КвалификаторыСтроки(20)));
	ТаблицаИнформацииПоАгентамПредставлениеАдреса.Колонки.Добавить("doc_type",			Новый ОписаниеТипов("Число",,,	 Новый КвалификаторыЧисла(1,0)));
	ТаблицаИнформацииПоАгентамПредставлениеАдреса.Колонки.Добавить("doc_number",  		Новый ОписаниеТипов("Строка",,,, Новый КвалификаторыСтроки(50)));
	ТаблицаИнформацииПоАгентамПредставлениеАдреса.Колонки.Добавить("doc_author", 		Новый ОписаниеТипов("Строка",,,, Новый КвалификаторыСтроки(200)));
	ТаблицаИнформацииПоАгентамПредставлениеАдреса.Колонки.Добавить("doc_date",  		Новый ОписаниеТипов("Строка",,,, Новый КвалификаторыСтроки(8)));
	ТаблицаИнформацииПоАгентамПредставлениеАдреса.Колонки.Добавить("unit_code", 		Новый ОписаниеТипов("Строка",,,, Новый КвалификаторыСтроки(15)));
	ТаблицаИнформацииПоАгентамПредставлениеАдреса.Колонки.Добавить("nationality", 		Новый ОписаниеТипов("Строка",,,, Новый КвалификаторыСтроки(3)));
	ТаблицаИнформацииПоАгентамПредставлениеАдреса.Колонки.Добавить("bik", 				Новый ОписаниеТипов("Строка",,,, Новый КвалификаторыСтроки(9)));
	ТаблицаИнформацииПоАгентамПредставлениеАдреса.Колонки.Добавить("acc_num", 			Новый ОписаниеТипов("Строка",,,, Новый КвалификаторыСтроки(20)));
	ТаблицаИнформацииПоАгентамПредставлениеАдреса.Колонки.Добавить("reg_ind", 			Новый ОписаниеТипов("Число",,,	 Новый КвалификаторыЧисла(6,0)));
	ТаблицаИнформацииПоАгентамПредставлениеАдреса.Колонки.Добавить("reg_address_date",	Новый ОписаниеТипов("Строка",,,, Новый КвалификаторыСтроки(8)));
	ТаблицаИнформацииПоАгентамПредставлениеАдреса.Колонки.Добавить("reg_district", 		Новый ОписаниеТипов("Строка",,,, Новый КвалификаторыСтроки(120)));;
	ТаблицаИнформацииПоАгентамПредставлениеАдреса.Колонки.Добавить("reg_area",			Новый ОписаниеТипов("Строка",,,, Новый КвалификаторыСтроки(120)));
	ТаблицаИнформацииПоАгентамПредставлениеАдреса.Колонки.Добавить("reg_city",			Новый ОписаниеТипов("Строка",,,, Новый КвалификаторыСтроки(120)));
	ТаблицаИнформацииПоАгентамПредставлениеАдреса.Колонки.Добавить("reg_point",			Новый ОписаниеТипов("Строка",,,, Новый КвалификаторыСтроки(120)));
	ТаблицаИнформацииПоАгентамПредставлениеАдреса.Колонки.Добавить("reg_street",		Новый ОписаниеТипов("Строка",,,, Новый КвалификаторыСтроки(120)));
	ТаблицаИнформацииПоАгентамПредставлениеАдреса.Колонки.Добавить("reg_entrance_num", 	Новый ОписаниеТипов("Строка",,,, Новый КвалификаторыСтроки(10)));
	ТаблицаИнформацииПоАгентамПредставлениеАдреса.Колонки.Добавить("reg_corpus", 		Новый ОписаниеТипов("Строка",,,, Новый КвалификаторыСтроки(10)));
	ТаблицаИнформацииПоАгентамПредставлениеАдреса.Колонки.Добавить("reg_flat", 			Новый ОписаниеТипов("Строка",,,, Новый КвалификаторыСтроки(10)));
	ТаблицаИнформацииПоАгентамПредставлениеАдреса.Колонки.Добавить("pp_ind", 			Новый ОписаниеТипов("Число",,,	 Новый КвалификаторыЧисла(6,0)));
	ТаблицаИнформацииПоАгентамПредставлениеАдреса.Колонки.Добавить("pp_address_date",  	Новый ОписаниеТипов("Строка",,,, Новый КвалификаторыСтроки(8)));
	ТаблицаИнформацииПоАгентамПредставлениеАдреса.Колонки.Добавить("pp_district",  		Новый ОписаниеТипов("Строка",,,, Новый КвалификаторыСтроки(120)));
	ТаблицаИнформацииПоАгентамПредставлениеАдреса.Колонки.Добавить("pp_area", 			Новый ОписаниеТипов("Строка",,,, Новый КвалификаторыСтроки(120)));
	ТаблицаИнформацииПоАгентамПредставлениеАдреса.Колонки.Добавить("pp_city",			Новый ОписаниеТипов("Строка",,,, Новый КвалификаторыСтроки(120)));
	ТаблицаИнформацииПоАгентамПредставлениеАдреса.Колонки.Добавить("pp_point",			Новый ОписаниеТипов("Строка",,,, Новый КвалификаторыСтроки(120)));
	ТаблицаИнформацииПоАгентамПредставлениеАдреса.Колонки.Добавить("pp_street",			Новый ОписаниеТипов("Строка",,,, Новый КвалификаторыСтроки(120)));
	ТаблицаИнформацииПоАгентамПредставлениеАдреса.Колонки.Добавить("pp_entrance_num", 	Новый ОписаниеТипов("Строка",,,, Новый КвалификаторыСтроки(10)));
	ТаблицаИнформацииПоАгентамПредставлениеАдреса.Колонки.Добавить("pp_corpus", 		Новый ОписаниеТипов("Строка",,,, Новый КвалификаторыСтроки(10)));
	ТаблицаИнформацииПоАгентамПредставлениеАдреса.Колонки.Добавить("pp_flat", 			Новый ОписаниеТипов("Строка",,,, Новый КвалификаторыСтроки(10)));
	ТаблицаИнформацииПоАгентамПредставлениеАдреса.Колонки.Добавить("kostl", 			Новый ОписаниеТипов("Строка",,,, Новый КвалификаторыСтроки(11)));		
	
	ЗапросПоАгентам = Новый Запрос();
	ТекстЗапроса = "ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ПериодыДействияДоговоровГражданскоПравовогоХарактера.Сотрудник КАК Сотрудник,
	|	ПериодыДействияДоговоровГражданскоПравовогоХарактера.ФизическоеЛицо КАК ФизическоеЛицо
	|ПОМЕСТИТЬ ВТ_СОТРУДНИКИ_ГПХ
	|ИЗ
	|	РегистрСведений.ПериодыДействияДоговоровГражданскоПравовогоХарактера КАК ПериодыДействияДоговоровГражданскоПравовогоХарактера
	|ГДЕ
	|	ПериодыДействияДоговоровГражданскоПравовогоХарактера.Сотрудник.ППФ_Агент"+
	?(ЭтотОбъект.ОрганичитьДату, " И ПериодыДействияДоговоровГражданскоПравовогоХарактера.ДатаОкончания > &ДатаОкончанияПозапрошлогоГода","")
	+
	"
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Сотрудник,
	|	ФизическоеЛицо
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ФизическиеЛица.Ссылка КАК ФизическоеЛицо,
	|	ВЫБОР
	|		КОГДА ФизическиеЛица.Пол = ЗНАЧЕНИЕ(Перечисление.ПолФизическогоЛица.Мужской)
	|			ТОГДА ""M""
	|		ИНАЧЕ ""W""
	|	КОНЕЦ КАК sex,
	|	ФизическиеЛица.ИНН КАК inn,
	|	ФизическиеЛица.СтраховойНомерПФР КАК pen_number,
	|	ФизическиеЛица.ДатаРегистрации КАК reg_address_date,
	|	ФизическиеЛица.ДатаРегистрации КАК pp_address_date,
	|	ФизическиеЛица.ДатаРождения КАК born_date
	|ПОМЕСТИТЬ ВТ_ФИЗИЧЕСКИЕ_ЛИЦА
	|ИЗ
	|	Справочник.ФизическиеЛица КАК ФизическиеЛица
	|ГДЕ
	|	ФизическиеЛица.Ссылка В
	|			(ВЫБРАТЬ
	|				ВТ_СОТРУДНИКИ_ГПХ.ФизическоеЛицо
	|			ИЗ
	|				ВТ_СОТРУДНИКИ_ГПХ КАК ВТ_СОТРУДНИКИ_ГПХ)
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	ФизическоеЛицо
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ПериодыДействияДоговоровГражданскоПравовогоХарактера.Сотрудник КАК Сотрудник,
	|	МАКСИМУМ(ПериодыДействияДоговоровГражданскоПравовогоХарактера.ДатаНачала) КАК ДатаПоследнегоДокумента
	|ПОМЕСТИТЬ ВТ_ПОСЛЕДНИЙ_ДОГОВОР_ГПХ
	|ИЗ
	|	РегистрСведений.ПериодыДействияДоговоровГражданскоПравовогоХарактера КАК ПериодыДействияДоговоровГражданскоПравовогоХарактера"+
	?(ЭтотОбъект.ОрганичитьДату, " ГДЕ ПериодыДействияДоговоровГражданскоПравовогоХарактера.ДатаОкончания >= &ДатаОкончанияПозапрошлогоГода","")
	+
	"
	|
	|СГРУППИРОВАТЬ ПО
	|	ПериодыДействияДоговоровГражданскоПравовогоХарактера.Сотрудник
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Сотрудник,
	|	ДатаПоследнегоДокумента
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ФизическиеЛицаКонтактнаяИнформация.Ссылка КАК ФизическоеЛицо,
	|	ФизическиеЛицаКонтактнаяИнформация.Вид КАК Вид,
	|	ФизическиеЛицаКонтактнаяИнформация.ЗначенияПолей
	|ПОМЕСТИТЬ ВТ_КОНТАКТНАЯ_ИНФОРМАЦИЯ_ФИЗИЧЕСКИХ_ЛИЦ
	|ИЗ
	|	Справочник.ФизическиеЛица.КонтактнаяИнформация КАК ФизическиеЛицаКонтактнаяИнформация
	|ГДЕ
	|	ФизическиеЛицаКонтактнаяИнформация.Ссылка В
	|			(ВЫБРАТЬ
	|				ВТ_СОТРУДНИКИ_ГПХ.ФизическоеЛицо
	|			ИЗ
	|				ВТ_СОТРУДНИКИ_ГПХ КАК ВТ_СОТРУДНИКИ_ГПХ)
	|	И ФизическиеЛицаКонтактнаяИнформация.Тип = ЗНАЧЕНИЕ(Перечисление.ТипыКонтактнойИнформации.Адрес)
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	ФизическоеЛицо,
	|	Вид
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Сотрудники.Ссылка КАК Сотрудник,
	|	Сотрудники.Код
	|ПОМЕСТИТЬ ВТ_КОД_СОТРУДНИКА
	|ИЗ
	|	Справочник.Сотрудники КАК Сотрудники
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Сотрудник
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ДокументыФизическихЛицСрезПоследних.Физлицо,
	|	МАКСИМУМ(ДокументыФизическихЛицСрезПоследних.Период) КАК Период
	|ПОМЕСТИТЬ ВТ_ДОКУМЕНТЫ_ФИЗЛИЦ_ПОСЛЕДНИЙ
	|ИЗ
	|	РегистрСведений.ДокументыФизическихЛиц.СрезПоследних() КАК ДокументыФизическихЛицСрезПоследних
	|
	|СГРУППИРОВАТЬ ПО
	|	ДокументыФизическихЛицСрезПоследних.Физлицо
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Результат.Сотрудник,
	|	Результат.ФизическоеЛицо,
	|	Результат.sex,
	|	Результат.inn,
	|	Результат.pen_number,
	|	Результат.reg_address_date,
	|	Результат.pp_address_date,
	|	Результат.born_date,
	|	Результат.surname,
	|	Результат.forename,
	|	Результат.middle,
	|	ВЫБОР
	|		КОГДА ДокументыФизическихЛиц.ВидДокумента = ЗНАЧЕНИЕ(Справочник.ВидыДокументовФизическихЛиц.ПаспортРФ)
	|			ТОГДА 5
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК doc_type,
	|	ДокументыФизическихЛиц.Серия + ДокументыФизическихЛиц.Номер КАК doc_number,
	|	ДокументыФизическихЛиц.КемВыдан КАК doc_author,
	|	ДокументыФизическихЛиц.ДатаВыдачи КАК doc_date,
	|	ДокументыФизическихЛиц.КодПодразделения КАК unit_code,
	|	Результат.bik,
	|	Результат.acc_num,
	|	Результат.nationality,
	|	Результат.kostl,
	|	Результат.ДатаПоследнегоДокумента КАК start_Date,
	|	ВЫБОР
	|		КОГДА ПериодыДействияДоговоровГражданскоПравовогоХарактера.ДатаОкончания = ДАТАВРЕМЯ(2099,12,31)
	|			 ТОГДА ДАТАВРЕМЯ(1,1,1)
	|	ИНАЧЕ ПериодыДействияДоговоровГражданскоПравовогоХарактера.ДатаОкончания   
	|	КОНЕЦ КАК end_Date,
	|	Результат.ЗначенияПолейПоПрописке,
	|	Результат.ЗначенияПолейПоПроживанию,
	|	Результат.number
	|ИЗ
	|	(ВЫБРАТЬ
	|		ВТ_СОТРУДНИКИ_ГПХ.Сотрудник КАК Сотрудник,
	|		ВТ_СОТРУДНИКИ_ГПХ.ФизическоеЛицо КАК ФизическоеЛицо,
	|		ВТ_ФИЗИЧЕСКИЕ_ЛИЦА.sex КАК sex,
	|		ВТ_ФИЗИЧЕСКИЕ_ЛИЦА.inn КАК inn,
	|		ВТ_ФИЗИЧЕСКИЕ_ЛИЦА.pen_number КАК pen_number,
	|		ВТ_ФИЗИЧЕСКИЕ_ЛИЦА.reg_address_date КАК reg_address_date,
	|		ВТ_ФИЗИЧЕСКИЕ_ЛИЦА.pp_address_date КАК pp_address_date,
	|		ВТ_ФИЗИЧЕСКИЕ_ЛИЦА.born_date КАК born_date,
	|		ФИОФизическихЛицСрезПоследних.Фамилия КАК surname,
	|		ФИОФизическихЛицСрезПоследних.Имя КАК forename,
	|		ФИОФизическихЛицСрезПоследних.Отчество КАК middle,
	|		ЛицевыеСчетаСотрудниковПоЗарплатнымПроектамСрезПоследних.Банк.Код КАК bik,
	|		ЛицевыеСчетаСотрудниковПоЗарплатнымПроектамСрезПоследних.НомерЛицевогоСчета КАК acc_num,
	|		ГражданствоФизическихЛицСрезПоследних.Страна.КодАльфа3 КАК nationality,
	|		ППФ_СоответствиеАгентовиМВЗСрезПоследних.МВЗ.Код КАК kostl,
	|		ВТ_ПОСЛЕДНИЙ_ДОГОВОР_ГПХ.ДатаПоследнегоДокумента КАК ДатаПоследнегоДокумента,
	|		ВТ_КОНТАКТНАЯ_ИНФОРМАЦИЯ_ФИЗИЧЕСКИХ_ЛИЦ_По_Прописке.ЗначенияПолей КАК ЗначенияПолейПоПрописке,
	|		ВТ_КОНТАКТНАЯ_ИНФОРМАЦИЯ_ФИЗИЧЕСКИХ_ЛИЦ_ПО_ПРОЖИВАНИЮ.ЗначенияПолей КАК ЗначенияПолейПоПроживанию,
	|		ВТ_КОД_СОТРУДНИКА.Код КАК number,
	|		ВТ_ДОКУМЕНТЫ_ФИЗЛИЦ_ПОСЛЕДНИЙ.Период КАК ДатаПоследнегоУдостоверяющегоДокумента
	|	ИЗ
	|		ВТ_СОТРУДНИКИ_ГПХ КАК ВТ_СОТРУДНИКИ_ГПХ
	|			ЛЕВОЕ СОЕДИНЕНИЕ ВТ_ФИЗИЧЕСКИЕ_ЛИЦА КАК ВТ_ФИЗИЧЕСКИЕ_ЛИЦА
	|			ПО ВТ_СОТРУДНИКИ_ГПХ.ФизическоеЛицо = ВТ_ФИЗИЧЕСКИЕ_ЛИЦА.ФизическоеЛицо
	|			ЛЕВОЕ СОЕДИНЕНИЕ ВТ_ПОСЛЕДНИЙ_ДОГОВОР_ГПХ КАК ВТ_ПОСЛЕДНИЙ_ДОГОВОР_ГПХ
	|			ПО ВТ_СОТРУДНИКИ_ГПХ.Сотрудник = ВТ_ПОСЛЕДНИЙ_ДОГОВОР_ГПХ.Сотрудник
	|			ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ЛицевыеСчетаСотрудниковПоЗарплатнымПроектам.СрезПоследних(
	|					&ТекущаяДата,
	|					ФизическоеЛицо В
	|							(ВЫБРАТЬ
	|								ВТ_СОТРУДНИКИ_ГПХ.ФизическоеЛицо
	|							ИЗ
	|								ВТ_СОТРУДНИКИ_ГПХ КАК ВТ_СОТРУДНИКИ_ГПХ)
	|						И ЗарплатныйПроект = &ЗПАгентов) КАК ЛицевыеСчетаСотрудниковПоЗарплатнымПроектамСрезПоследних
	|			ПО ВТ_СОТРУДНИКИ_ГПХ.ФизическоеЛицо = ЛицевыеСчетаСотрудниковПоЗарплатнымПроектамСрезПоследних.ФизическоеЛицо
	|			ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ФИОФизическихЛиц.СрезПоследних(
	|					&ТекущаяДата,
	|					ФизическоеЛицо В
	|						(ВЫБРАТЬ
	|							ВТ_СОТРУДНИКИ_ГПХ.ФизическоеЛицо
	|						ИЗ
	|							ВТ_СОТРУДНИКИ_ГПХ КАК ВТ_СОТРУДНИКИ_ГПХ)) КАК ФИОФизическихЛицСрезПоследних
	|			ПО ВТ_СОТРУДНИКИ_ГПХ.ФизическоеЛицо = ФИОФизическихЛицСрезПоследних.ФизическоеЛицо
	|			ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ГражданствоФизическихЛиц.СрезПоследних(
	|					&ТекущаяДата,
	|					ФизическоеЛицо В
	|						(ВЫБРАТЬ
	|							ВТ_СОТРУДНИКИ_ГПХ.ФизическоеЛицо
	|						ИЗ
	|							ВТ_СОТРУДНИКИ_ГПХ КАК ВТ_СОТРУДНИКИ_ГПХ)) КАК ГражданствоФизическихЛицСрезПоследних
	|			ПО ВТ_СОТРУДНИКИ_ГПХ.ФизическоеЛицо = ГражданствоФизическихЛицСрезПоследних.ФизическоеЛицо
	|			ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ППФ_СоответствиеАгентовиМВЗ.СрезПоследних(&ТекущаяДата, ) КАК ППФ_СоответствиеАгентовиМВЗСрезПоследних
	|			ПО ВТ_СОТРУДНИКИ_ГПХ.Сотрудник = ППФ_СоответствиеАгентовиМВЗСрезПоследних.Сотрудник
	|			ЛЕВОЕ СОЕДИНЕНИЕ ВТ_КОНТАКТНАЯ_ИНФОРМАЦИЯ_ФИЗИЧЕСКИХ_ЛИЦ КАК ВТ_КОНТАКТНАЯ_ИНФОРМАЦИЯ_ФИЗИЧЕСКИХ_ЛИЦ_По_Прописке
	|			ПО ВТ_СОТРУДНИКИ_ГПХ.ФизическоеЛицо = ВТ_КОНТАКТНАЯ_ИНФОРМАЦИЯ_ФИЗИЧЕСКИХ_ЛИЦ_По_Прописке.ФизическоеЛицо
	|				И (ВТ_КОНТАКТНАЯ_ИНФОРМАЦИЯ_ФИЗИЧЕСКИХ_ЛИЦ_По_Прописке.Вид = ЗНАЧЕНИЕ(Справочник.ВидыКонтактнойИнформации.АдресПоПропискеФизическиеЛица))
	|			ЛЕВОЕ СОЕДИНЕНИЕ ВТ_КОНТАКТНАЯ_ИНФОРМАЦИЯ_ФИЗИЧЕСКИХ_ЛИЦ КАК ВТ_КОНТАКТНАЯ_ИНФОРМАЦИЯ_ФИЗИЧЕСКИХ_ЛИЦ_ПО_ПРОЖИВАНИЮ
	|			ПО ВТ_СОТРУДНИКИ_ГПХ.ФизическоеЛицо = ВТ_КОНТАКТНАЯ_ИНФОРМАЦИЯ_ФИЗИЧЕСКИХ_ЛИЦ_ПО_ПРОЖИВАНИЮ.ФизическоеЛицо
	|				И (ВТ_КОНТАКТНАЯ_ИНФОРМАЦИЯ_ФИЗИЧЕСКИХ_ЛИЦ_ПО_ПРОЖИВАНИЮ.Вид = ЗНАЧЕНИЕ(Справочник.ВидыКонтактнойИнформации.АдресМестаПроживанияФизическиеЛица))
	|			ЛЕВОЕ СОЕДИНЕНИЕ ВТ_КОД_СОТРУДНИКА КАК ВТ_КОД_СОТРУДНИКА
	|			ПО ВТ_СОТРУДНИКИ_ГПХ.Сотрудник = ВТ_КОД_СОТРУДНИКА.Сотрудник
	|			ЛЕВОЕ СОЕДИНЕНИЕ ВТ_ДОКУМЕНТЫ_ФИЗЛИЦ_ПОСЛЕДНИЙ КАК ВТ_ДОКУМЕНТЫ_ФИЗЛИЦ_ПОСЛЕДНИЙ
	|			ПО ВТ_СОТРУДНИКИ_ГПХ.ФизическоеЛицо = ВТ_ДОКУМЕНТЫ_ФИЗЛИЦ_ПОСЛЕДНИЙ.Физлицо) КАК Результат
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ПериодыДействияДоговоровГражданскоПравовогоХарактера КАК ПериодыДействияДоговоровГражданскоПравовогоХарактера
	|		ПО Результат.ФизическоеЛицо = ПериодыДействияДоговоровГражданскоПравовогоХарактера.ФизическоеЛицо
	|			И Результат.ДатаПоследнегоДокумента = ПериодыДействияДоговоровГражданскоПравовогоХарактера.ДатаНачала
	|			И Результат.Сотрудник = ПериодыДействияДоговоровГражданскоПравовогоХарактера.Сотрудник
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ДокументыФизическихЛиц КАК ДокументыФизическихЛиц
	|		ПО Результат.ФизическоеЛицо = ДокументыФизическихЛиц.Физлицо
	|			И Результат.ДатаПоследнегоУдостоверяющегоДокумента = ДокументыФизическихЛиц.Период
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ ВТ_СОТРУДНИКИ_ГПХ
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ ВТ_ФИЗИЧЕСКИЕ_ЛИЦА
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ ВТ_ПОСЛЕДНИЙ_ДОГОВОР_ГПХ
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ ВТ_КОНТАКТНАЯ_ИНФОРМАЦИЯ_ФИЗИЧЕСКИХ_ЛИЦ";
	
	ЗапросПоАгентам.Текст = ТекстЗапроса;
	ЗапросПоАгентам.УстановитьПараметр("ТекущаяДата",ТекущаяДата());
	ЗапросПоАгентам.УстановитьПараметр("ДатаОкончанияПозапрошлогоГода", Дата(Год(ТекущаяДата())-2,12,31,23,59,59));
	ЗапросПоАгентам.УстановитьПараметр("ЗПАгентов",Константы.ППФ_ЗарплатныйПроектАгентов.Получить());
	Результат = ЗапросПоАгентам.Выполнить();
	ПредварительнаяТаблицаИнформации = Результат.Выгрузить();
	ФорматДаты = "ДФ=yyyyMMdd";
	
	// Разберем контактную информацию	
	Для Каждого СтрокаТаблицыАгента Из ПредварительнаяТаблицаИнформации Цикл
		
		// Проверка на агента
		Если АгентОшибочный(СтрокаТаблицыАгента.number) Тогда 
			Продолжить;
		КонецЕсли;
		
		Если НЕ ЗначениеЗаполнено(СтрокаТаблицыАгента.end_Date) ИЛИ Год(СтрокаТаблицыАгента.end_Date) >= 2099 Тогда 
			СтрокаТаблицыАгента.end_Date = "";
		КонецЕсли;
		
		СтрокаТаблицыПредставленияАдреса = ТаблицаИнформацииПоАгентамПредставлениеАдреса.Добавить();
		ЗаполнитьЗначенияСвойств(СтрокаТаблицыПредставленияАдреса, СтрокаТаблицыАгента);
		// Уберем лишний проблел между серией и номером в паспорте
		СтрокаТаблицыПредставленияАдреса.doc_number = СтрЗаменить(СтрЗаменить(СтрокаТаблицыПредставленияАдреса.doc_number," ",""),Символы.НПП,""); 
		// Изменим формат даты для представления в запросе к RP
		СтрокаТаблицыПредставленияАдреса.start_date 		= Формат(СтрокаТаблицыАгента.start_date, 		ФорматДаты);
		СтрокаТаблицыПредставленияАдреса.end_date 			= Формат(СтрокаТаблицыАгента.end_date, 			ФорматДаты);
		СтрокаТаблицыПредставленияАдреса.born_date 			= Формат(СтрокаТаблицыАгента.born_date, 		ФорматДаты);
		СтрокаТаблицыПредставленияАдреса.doc_date 			= Формат(СтрокаТаблицыАгента.doc_date, 			ФорматДаты);
		СтрокаТаблицыПредставленияАдреса.reg_address_date 	= Формат(СтрокаТаблицыАгента.reg_address_date, 	ФорматДаты);
		СтрокаТаблицыПредставленияАдреса.pp_address_date 	= Формат(СтрокаТаблицыАгента.pp_address_date, 	ФорматДаты);
		// Заполним контактную информацию по полям XML
		ЗаполнитьКонтактнуюИнформациюВТаблице(СтрокаТаблицыАгента.ЗначенияПолейПоПрописке, СтрокаТаблицыАгента.ЗначенияПолейПоПроживанию, СтрокаТаблицыПредставленияАдреса);
	КонецЦикла;
	
	
	Возврат ТаблицаИнформацииПоАгентамПредставлениеАдреса;
	
КонецФункции //ПолучитьИнформациюПоАгентам()

Процедура ЗаполнитьКонтактнуюИнформациюВТаблице(ЗначенияПолейПоПрописке, ЗначенияПолейПоПроживанию, СтрокаТаблицы)
	
	ИнформацияПрописки 		= ВыполнитьРазбор(ЗначенияПолейПоПрописке);
	
	СтрокаТаблицы.reg_ind 			= ИнформацияПрописки.Индекс;
	СтрокаТаблицы.reg_district 		= ИнформацияПрописки.СубъектРФ;
	СтрокаТаблицы.reg_city 			= ИнформацияПрописки.Город;
	СтрокаТаблицы.reg_area 			= ИнформацияПрописки.Район;
	СтрокаТаблицы.reg_point 		= ИнформацияПрописки.НаселенныйПункт;
	СтрокаТаблицы.reg_street		= ИнформацияПрописки.Улица;
	СтрокаТаблицы.reg_entrance_num	= ИнформацияПрописки.Дом;
	СтрокаТаблицы.reg_corpus		= ИнформацияПрописки.Корпус;
	СтрокаТаблицы.reg_flat			= ИнформацияПрописки.Квартира;
	
	ИнформацияПроживания 	= ВыполнитьРазбор(ЗначенияПолейПоПроживанию);
	
	СтрокаТаблицы.pp_ind 			= ИнформацияПроживания.Индекс;
	СтрокаТаблицы.pp_district 		= ИнформацияПроживания.СубъектРФ;
	СтрокаТаблицы.pp_city 			= ИнформацияПроживания.Город;
	СтрокаТаблицы.pp_area 			= ИнформацияПроживания.Район;
	СтрокаТаблицы.pp_point 			= ИнформацияПроживания.НаселенныйПункт;
	СтрокаТаблицы.pp_street			= ИнформацияПроживания.Улица;
	СтрокаТаблицы.pp_entrance_num	= ИнформацияПроживания.Дом;
	СтрокаТаблицы.pp_corpus			= ИнформацияПроживания.Корпус;
	СтрокаТаблицы.pp_flat			= ИнформацияПроживания.Квартира;
	
КонецПроцедуры  // ЗаполнитьКонтактнуюИнформациюВТаблице()

Процедура ЗагрузитьИнформациюПоАгенту(ИнформацияПоАгенту,СоответствиеМВЗ,Договора, ВсеФИОФизлиц, СНИЛСФизиковШтатников, Организация, ПодразделениеАгенты, ВсеСотрудники)

	АгентЯвляетсяШтатником = ?(СНИЛСФизиковШтатников.Найти(СокрЛП(ИнформацияПоАгенту.pen_number)) = Неопределено, Ложь, Истина);
		
	//////////////////////////////////////////////////
	// СОТРУДНИК / ФИЗИЧЕСКОЕ ЛИЦО
	//////////////////////////////////////////////////     	
	ФИО = СокрЛП(ИнформацияПоАгенту.surname + " " + ИнформацияПоАгенту.forename + " " + ИнформацияПоАгенту.middle);
	НайденныеСотрудники = ВсеСотрудники.НайтиСтроки(Новый Структура("Код",СокрЛП(ИнформацияПоАгенту.number)));
	Если НайденныеСотрудники.Количество()>0 Тогда 
		НайденныйСотрудник = НайденныеСотрудники[0].Сотрудник;
	Иначе 
		НайденныйСотрудник = Справочники.Сотрудники.ПустаяСсылка();
	КонецЕсли;
	
	//////////////////////////////////////////////////
	// Обновление данных по агенту
	//////////////////////////////////////////////////
	
	Если Не НайденныйСотрудник.Пустая() Тогда
		
		Сотрудник = НайденныйСотрудник.ПолучитьОбъект();				
		Если ЗначениеЗаполнено(Сотрудник.ФизическоеЛицо) Тогда
			Если НЕ АгентЯвляетсяШтатником Тогда  // Не обновляем данные, приоритет у штатника				
				Физлицо = Сотрудник.ФизическоеЛицо.ПолучитьОбъект();
				Физлицо.ИНН 				= СокрЛП(ИнформацияПоАгенту.inn);
				Физлицо.СтраховойНомерПФР   = СокрЛП(ИнформацияПоАгенту.pen_number);
				Физлицо.ДатаРождения		= ИнформацияПоАгенту.born_date;
				Физлицо.ДатаРегистрации		= ИнформацияПоАгенту.reg_address_date;
				Физлицо.Пол					= ?(ИнформацияПоАгенту.sex="М" ИЛИ ИнформацияПоАгенту.sex="M" ИЛИ ИнформацияПоАгенту.sex="m" ИЛИ ИнформацияПоАгенту.sex="м", Перечисления.ПолФизическогоЛица.Мужской, Перечисления.ПолФизическогоЛица.Женский);
				// Переименование физического лица
				НайденныйФИОФизлиц = ВсеФИОФизлиц.НайтиСтроки(Новый Структура("ФизЛицо", Физлицо.Ссылка));
				Если НайденныйФИОФизлиц.Количество() > 0 Тогда
					Фамилия1 	= СокрЛП(ИнформацияПоАгенту.surname);
					Имя1 		= СокрЛП(ИнформацияПоАгенту.forename);
					Отчество1	= СокрЛП(ИнформацияПоАгенту.middle);					
					ФИО = СокрЛП(Фамилия1 + " " + Имя1 + " " + Отчество1);				
					Физлицо.ФИО			 = ФИО;
					Попытка						
						Физлицо.Записать();
					Исключение
						Сообщение = НСтр("ru = 'Для агента: '") + СокрЛП(ИнформацияПоАгенту.number) + НСтр("ru = ' не удалось обновить данные физического лица'") + ОписаниеОшибки();
						ОтправитьПисьмо(Истина, Сообщение);
						ППФ_Сервер.RP1_ЗаписатьВЖурналРегистрации(Сообщение, УровеньЖурналаРегистрации.Ошибка);			
						Возврат;
					КонецПопытки;						
				КонецЕсли; 				
			КонецЕсли;
			
		Иначе
			Сообщение = НСтр("ru = 'Для агента: '") + СокрЛП(ИнформацияПоАгенту.number) + НСтр("ru = ' не указано физлицо!'");
			ОтправитьПисьмо(Истина, Сообщение);
			ППФ_Сервер.RP1_ЗаписатьВЖурналРегистрации(Сообщение, УровеньЖурналаРегистрации.Ошибка);
			Возврат;
		КонецЕсли;		
		
	Иначе
		//////////////////////////////////////////////////
		// Создание нового агента
		////////////////////////////////////////////////// 	
		Если ЗначениеЗаполнено(ИнформацияПоАгенту.end_date) И ИнформацияПоАгенту.end_date<Дата(2019, 1,1) Тогда 
			Возврат;
		КонецЕсли;
		
		// Проверка что ФИО нового агента не пустое
		Если Не ПустаяСтрока(ФИО) Тогда
			Сотрудник 						= Справочники.Сотрудники.СоздатьЭлемент();
			Сотрудник.Код 					= СокрЛП(ИнформацияПоАгенту.number);
			Сотрудник.УточнениеНаименования = "(агент)";
			Сотрудник.Наименование  		= ФИО + " " +Сотрудник.УточнениеНаименования;
			Сотрудник.ГоловнаяОрганизация	= Организация;			
			Сотрудник.ППФ_Агент = Истина;
			
			Если ЗначениеЗаполнено(СокрЛП(ИнформацияПоАгенту.pen_number)) Тогда 	// Проверка на существование Физика			
				ФизическоеЛицо = Справочники.ФизическиеЛица.НайтиПоРеквизиту("СтраховойНомерПФР",	СокрЛП(ИнформацияПоАгенту.pen_number));								
			КонецЕсли;
			
			// Создаем совершенно новое физлицо
			Если ФизическоеЛицо.Пустая() Тогда			
				Физлицо 					= Справочники.ФизическиеЛица.СоздатьЭлемент();
				Физлицо.Наименование		= ФИО;
				Физлицо.ДатаРождения		= ИнформацияПоАгенту.born_date;
				Физлицо.Пол					= ?(ИнформацияПоАгенту.sex="М" ИЛИ ИнформацияПоАгенту.sex="M" ИЛИ ИнформацияПоАгенту.sex="m" ИЛИ ИнформацияПоАгенту.sex="м", Перечисления.ПолФизическогоЛица.Мужской, Перечисления.ПолФизическогоЛица.Женский);
				Физлицо.ИНН					= СокрЛП(ИнформацияПоАгенту.inn);
				Физлицо.СтраховойНомерПФР   = СокрЛП(ИнформацияПоАгенту.pen_number);
				Физлицо.ДатаРегистрации		= ИнформацияПоАгенту.reg_address_date;
				Физлицо.ФИО					= ФИО;
				Попытка
					Физлицо.Записать();
					Сотрудник.ФизическоеЛицо = Физлицо.Ссылка;
				Исключение
					Сообщение = НСтр("ru = 'Не удалось создать физическое лицо для агента: '") + СокрЛП(ИнформацияПоАгенту.number)+ " "+ ОписаниеОшибки();
					ОтправитьПисьмо(Истина, Сообщение);
					ППФ_Сервер.RP1_ЗаписатьВЖурналРегистрации(Сообщение, УровеньЖурналаРегистрации.Ошибка);
					Возврат;
				КонецПопытки;								
			Иначе            				
				Сотрудник.ФизическоеЛицо = ФизическоеЛицо;				
			КонецЕсли;
			
			Сотрудник.Наименование 			= ФИО;
			Сотрудник.ГоловнаяОрганизация 	= Организация;
			
			Попытка
				Сотрудник.Записать();		
			Исключение
				Сообщение = НСтр("ru = 'Не удалось записать агента: '") + СокрЛП(ИнформацияПоАгенту.number) + ";"+ОписаниеОшибки();
				ОтправитьПисьмо(Истина, Сообщение);
				ППФ_Сервер.RP1_ЗаписатьВЖурналРегистрации(Сообщение, УровеньЖурналаРегистрации.Ошибка);
				Возврат;
			КонецПопытки;									
		Иначе
			Сообщение = НСтр("ru = 'Для создания агента: '") + СокрЛП(ИнформацияПоАгенту.number) + НСтр("ru = ' в файле не заполнено ФИО!'");
			ППФ_Сервер.RP1_ЗаписатьВЖурналРегистрации(Сообщение, УровеньЖурналаРегистрации.Ошибка);
			ОтправитьПисьмо(Истина, Сообщение);
			Возврат;
		КонецЕсли;
	КонецЕсли;
	
	//////////////////////////////////////////////////
	// ГРУППА СОТРУДНИКА
	//////////////////////////////////////////////////	
	ГруппаСотрудникаАгент 	= Справочники.ГруппыСотрудников.ППФ_Агенты;
	// Добавим сотрудника в группу Агенты, если он еще не состоит в ней
	НаборЗаписейСоставГруппСотрудников = РегистрыСведений.СоставГруппСотрудников.СоздатьНаборЗаписей();
	НаборЗаписейСоставГруппСотрудников.Отбор.Сотрудник.Установить(Сотрудник);
	НаборЗаписейСоставГруппСотрудников.Отбор.ГруппаСотрудников.Установить(ГруппаСотрудникаАгент);
	НаборЗаписейСоставГруппСотрудников.Прочитать();
	Если НаборЗаписейСоставГруппСотрудников.Количество() = 0 Тогда 			
		НоваяСтрока = НаборЗаписейСоставГруппСотрудников.Добавить();
		НоваяСтрока.Сотрудник = Сотрудник;
		НоваяСтрока.ГруппаСотрудников = ГруппаСотрудникаАгент;
		НаборЗаписейСоставГруппСотрудников.Записать();	           			
	КонецЕсли;  	
	
	//////////////////////////////////////////////////
	// СОЗДАНИЕ МВЗ
	//////////////////////////////////////////////////
	
	Если Не ПустаяСтрока(СокрЛП(ИнформацияПоАгенту.kostl)) Тогда 			
		МВЗ = Справочники.ППФ_МВЗ.НайтиПоКоду(СокрЛП(ИнформацияПоАгенту.kostl));		
		Если Не ЗначениеЗаполнено(МВЗ) Тогда
			Если Не ПустаяСтрока(ИнформацияПоАгенту.kostl) Тогда                				
				НовыйМВЗ = Справочники.ППФ_МВЗ.СоздатьЭлемент();
				НовыйМВЗ.Код = СокрЛП(ИнформацияПоАгенту.kostl);
				НовыйМВЗ.Наименование = "Новый МВЗ";
				НовыйМВЗ.Записать();                                            										
				МВЗ = НовыйМВЗ.Ссылка;				
			КонецЕсли;                
		КонецЕсли;				
	КонецЕсли;
	
	//////////////////////////////////////////////////
	// ДОГОВОР НА ВЫПОЛНЕНИЕ РАБОТ
	//////////////////////////////////////////////////
		
	Если ЗначениеЗаполнено(ИнформацияПоАгенту.start_date) Тогда
		ДоговорТаблица = Договора.Скопировать(Новый Структура("number",СокрЛП(ИнформацияПоАгенту.number)));
		Если ДоговорТаблица.Количество() = 0 Тогда 
			Док			= Документы.ДоговорРаботыУслуги.СоздатьДокумент();
			Док.Подразделение = ПодразделениеАгенты;
			Док.Дата  	= ИнформацияПоАгенту.start_date;
			Док.Номер  	= СокрЛП(ИнформацияПоАгенту.number);
			Док.ДатаНачала		= ИнформацияПоАгенту.start_date;
			Док.ДатаОкончания	= ?(ЗначениеЗаполнено(ИнформацияПоАгенту.end_date), ИнформацияПоАгенту.end_date, Дата('30991231235959'));			
			Док.Сотрудник		= Сотрудник.Ссылка;
			Док.ФизическоеЛицо	= Сотрудник.ФизическоеЛицо;			
			Док.Организация		=  Организация;
			Док.Комментарий 	= "Создан автоматически при обмене с RP (Дата загрузки: " + Формат(ТекущаяДата(), "ДЛФ=DDT") + ")";
		Иначе
			ДокСсылка = ДоговорТаблица[0].Договор; 
			Док = ДокСсылка.ПолучитьОбъект();
			Док.ДатаОкончания	= ?(ЗначениеЗаполнено(ИнформацияПоАгенту.end_date), ИнформацияПоАгенту.end_date, Дата('30991231235959'));			
			Док.Сотрудник		= Сотрудник.Ссылка;
			Док.ФизическоеЛицо	= Сотрудник.ФизическоеЛицо;			
		КонецЕсли;
		Док.Ответственный	= ПараметрыСеанса.ТекущийПользователь;
		Док.МесяцНачисления	= Док.ДатаОкончания;
		Попытка
			Док.Записать(РежимЗаписиДокумента.Проведение);
		Исключение
			ППФ_Сервер.RP1_ЗаписатьВЖурналРегистрации(ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()), УровеньЖурналаРегистрации.Ошибка);
			Попытка
				Док.Записать(РежимЗаписиДокумента.Запись);
			Исключение
				ППФ_Сервер.RP1_ЗаписатьВЖурналРегистрации(ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()), УровеньЖурналаРегистрации.Ошибка);
			КонецПопытки;
		КонецПопытки;
	КонецЕсли;	
	
	//////////////////////////////////////////////////
	// ГРАЖДАНСТВО 
	//////////////////////////////////////////////////
	
	Если Не ПустаяСтрока(ИнформацияПоАгенту.nationality) Тогда		
		Страна = Справочники.СтраныМира.НайтиПоРеквизиту("КодАльфа3",СокрЛП(ИнформацияПоАгенту.nationality));
	КонецЕсли;
		
	//////////////////////////////////////////////////
	// КОНТАКТНАЯ ИФНФОРМАЦИЯ
	//////////////////////////////////////////////////	
	
	Если Не АгентЯвляетсяШтатником Тогда 
		СсылкаНаФизЛицо = Физлицо.Ссылка;
		Физлицо = СсылкаНаФизЛицо.ПолучитьОбъект();
		КИФизЛица = Физлицо.КонтактнаяИнформация;
		Счетчик = КИФизЛица.Количество();
		ТребуетсяПерезапись = Ложь;
		Пока Счетчик>0 Цикл  
			СтрокаТаблицы = КИФизЛица[Счетчик-1];
			Если СтрокаТаблицы.Тип = Перечисления.ТипыКонтактнойИнформации.Адрес Тогда  
				КИФизЛица.Удалить(СтрокаТаблицы);
				ТребуетсяПерезапись = Истина;
			КонецЕсли;
			Счетчик = Счетчик - 1;
		КонецЦикла;
		
		Если ТребуетсяПерезапись Тогда 
			Попытка
				Физлицо.Записать();
			Исключение
				ППФ_Сервер.RP1_ЗаписатьВЖурналРегистрации(ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()), УровеньЖурналаРегистрации.Ошибка);
			КонецПопытки;
		КонецЕсли;
		
		ДанныеЗаполненияКИ = Новый ТаблицаЗначений;
		ДанныеЗаполненияКИ.Колонки.Добавить("Приемник");
		ДанныеЗаполненияКИ.Колонки.Добавить("ВидКИ");
		ДанныеЗаполненияКИ.Колонки.Добавить("СтруктураКИ");
		ДанныеЗаполненияКИ.Колонки.Добавить("КлючСтроки");
		
		//прописки
		Если Не ПустаяСтрока(ИнформацияПоАгенту.reg_district
			+ ИнформацияПоАгенту.reg_area
			+ ИнформацияПоАгенту.reg_city
			+ ИнформацияПоАгенту.reg_ind
			+ ИнформацияПоАгенту.reg_street) Тогда 
			
			СтруктураКИ = УправлениеКонтактнойИнформациейКлиентСервер.СтруктураКонтактнойИнформацииПоТипу(Перечисления.ТипыКонтактнойИнформации.Адрес);
			Если Страна <> Неопределено Тогда  
				СтруктураКИ.Страна 				= Страна.Наименование;
				СтруктураКИ.НаименованиеСтраны 	= Страна.Наименование;
				СтруктураКИ.КодСтраны 			= Страна.Код; 			
			КонецЕсли;
			СтруктураКИ.Индекс 				= Число(ИнформацияПоАгенту.reg_ind); 
			СтруктураКИ.Регион 				= СокрЛП(ИнформацияПоАгенту.reg_district);
			СтруктураКИ.Город 				= СокрЛП(ИнформацияПоАгенту.reg_city);
			СтруктураКИ.Улица 				= СокрЛП(ИнформацияПоАгенту.reg_street);
			СтруктураКИ.Дом 				= СокрЛП(ИнформацияПоАгенту.reg_entrance_num);
			СтруктураКИ.Корпус 				= СокрЛП(ИнформацияПоАгенту.reg_corpus);
			СтруктураКИ.Квартира 			= СокрЛП(ИнформацияПоАгенту.reg_flat);
			СтруктураКИ.НаселенныйПункт		= СокрЛП(ИнформацияПоАгенту.reg_point);
			СтруктураКИ.Район				= СокрЛП(ИнформацияПоАгенту.reg_area);
			НоваяСтрока 			= ДанныеЗаполненияКИ.Добавить();
			НоваяСтрока.Приемник 	= Физлицо.Ссылка;
			НоваяСтрока.ВидКИ 		= Справочники.ВидыКонтактнойИнформации.АдресПоПропискеФизическиеЛица;			
			НоваяСтрока.СтруктураКИ	= СтруктураКИ;
			
		КонецЕсли;	
		
		//Информирования
		Если Не ПустаяСтрока(ИнформацияПоАгенту.pp_district
			+ ИнформацияПоАгенту.pp_area
			+ ИнформацияПоАгенту.pp_city
			+ ИнформацияПоАгенту.pp_ind
			+ ИнформацияПоАгенту.pp_street) Тогда 
			
			СтруктураКИ = УправлениеКонтактнойИнформациейКлиентСервер.СтруктураКонтактнойИнформацииПоТипу(Перечисления.ТипыКонтактнойИнформации.Адрес);
			Если Страна <> Неопределено Тогда  
				СтруктураКИ.Страна 				= Страна.Наименование;
				СтруктураКИ.НаименованиеСтраны 	= Страна.Наименование;
				СтруктураКИ.КодСтраны 			= Страна.Код; 			
			КонецЕсли;
			СтруктураКИ.Индекс 				= Число(ИнформацияПоАгенту.pp_ind); 
			СтруктураКИ.Регион 				= СокрЛП(ИнформацияПоАгенту.pp_district);
			СтруктураКИ.Город 				= СокрЛП(ИнформацияПоАгенту.pp_city);
			СтруктураКИ.Улица 				= СокрЛП(ИнформацияПоАгенту.pp_street);
			СтруктураКИ.Дом 				= СокрЛП(ИнформацияПоАгенту.pp_entrance_num);
			СтруктураКИ.Корпус 				= СокрЛП(ИнформацияПоАгенту.pp_corpus);
			СтруктураКИ.Квартира 			= СокрЛП(ИнформацияПоАгенту.pp_flat);
			СтруктураКИ.НаселенныйПункт		= СокрЛП(ИнформацияПоАгенту.pp_point);
			СтруктураКИ.Район				= СокрЛП(ИнформацияПоАгенту.pp_area);
			НоваяСтрока 			= ДанныеЗаполненияКИ.Добавить();
			НоваяСтрока.Приемник 	= Физлицо.Ссылка;
			НоваяСтрока.ВидКИ 		= Справочники.ВидыКонтактнойИнформации.АдресДляИнформированияФизическиеЛица;			
			НоваяСтрока.СтруктураКИ	= СтруктураКИ;
		КонецЕсли;		
		
		//проживания
		Если Не ПустаяСтрока(ИнформацияПоАгенту.pp_district
			+ ИнформацияПоАгенту.pp_area
			+ ИнформацияПоАгенту.pp_city
			+ ИнформацияПоАгенту.pp_ind
			+ ИнформацияПоАгенту.pp_street) Тогда 
			
			СтруктураКИ = УправлениеКонтактнойИнформациейКлиентСервер.СтруктураКонтактнойИнформацииПоТипу(Перечисления.ТипыКонтактнойИнформации.Адрес);
			Если Страна <> Неопределено Тогда  
				СтруктураКИ.Страна 				= Страна.Наименование;
				СтруктураКИ.НаименованиеСтраны 	= Страна.Наименование;
				СтруктураКИ.КодСтраны 			= Страна.Код; 			
			КонецЕсли;
			СтруктураКИ.Индекс 				= Число(ИнформацияПоАгенту.pp_ind); 
			СтруктураКИ.Регион 				= СокрЛП(ИнформацияПоАгенту.pp_district);
			СтруктураКИ.Город 				= СокрЛП(ИнформацияПоАгенту.pp_city);
			СтруктураКИ.Улица 				= СокрЛП(ИнформацияПоАгенту.pp_street);
			СтруктураКИ.Дом 				= СокрЛП(ИнформацияПоАгенту.pp_entrance_num);
			СтруктураКИ.Корпус 				= СокрЛП(ИнформацияПоАгенту.pp_corpus);
			СтруктураКИ.Квартира 			= СокрЛП(ИнформацияПоАгенту.pp_flat);
			СтруктураКИ.НаселенныйПункт		= СокрЛП(ИнформацияПоАгенту.pp_point);
			СтруктураКИ.Район				= СокрЛП(ИнформацияПоАгенту.pp_area);
			НоваяСтрока 			= ДанныеЗаполненияКИ.Добавить();
			НоваяСтрока.Приемник 	= Физлицо.Ссылка;
			НоваяСтрока.ВидКИ 		= Справочники.ВидыКонтактнойИнформации.АдресМестаПроживанияФизическиеЛица;			
			НоваяСтрока.СтруктураКИ	= СтруктураКИ;		
		КонецЕсли;	
		
		Попытка
			УправлениеКонтактнойИнформацией.ЗаполнитьКонтактнуюИнформациюОбъектов(ДанныеЗаполненияКИ);	
		Исключение
			Сообщение = "Для сотрудника " + ФизЛицо.Ссылкжа + " с ТН " +  СокрЛП(ИнформацияПоАгенту.number) + " контактная информация не записана!" + ОписаниеОшибки();
			ОтправитьПисьмо(Истина, Сообщение);
			ППФ_Сервер.RP1_ЗаписатьВЖурналРегистрации(Сообщение, УровеньЖурналаРегистрации.Ошибка);
		КонецПопытки;
		
	КонецЕсли;
	
КонецПроцедуры //ЗагрузитьИнформациюПоАгенту()

Функция ПолучитьФИОФизлиц()
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ФИОФизЛиц.ФизическоеЛицо КАК ФизЛицо,
	|	ФИОФизЛиц.Фамилия,
	|	ФИОФизЛиц.Имя,
	|	ФИОФизЛиц.Отчество
	|ИЗ
	|	РегистрСведений.ФИОФизическихЛиц.СрезПоследних КАК ФИОФизЛиц";
	
	Результат = Запрос.Выполнить();
	
	Если Не Результат.Пустой() Тогда
		Возврат Результат.Выгрузить();
	Иначе
		Возврат Неопределено;
	КонецЕсли; 	
КонецФункции // ПолучитьФИОФизлиц()

Функция ПолучитьВсехФизЛиц()
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ФизическиеЛица.Ссылка КАК Ссылка,
	|	ФизическиеЛица.Наименование КАК Наименование,
	|	ФизическиеЛица.ДатаРождения КАК ДатаРождения,
	|	ФизическиеЛица.СтраховойНомерПФР КАК СтраховойНомерПФР
	|ИЗ
	|	Справочник.ФизическиеЛица КАК ФизическиеЛица";
	
	Результат = Запрос.Выполнить();
	
	Если Не Результат.Пустой() Тогда
		Возврат Результат.Выгрузить();
	Иначе
		Возврат Неопределено;
	КонецЕсли; 	
КонецФункции // ПолучитьВсехФилЛиц()

Функция ПолучитьВсехСотрудников()
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	               |	Сотрудники.Ссылка КАК Сотрудник,
	               |	Сотрудники.Код КАК Код
	               |ИЗ
	               |	Справочник.Сотрудники КАК Сотрудники";
	Возврат Запрос.Выполнить().Выгрузить();
КонецФункции

Функция ПолучитьТрудовыеДоговора(Коды)
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	|	Сотрудники.ФизическоеЛицо КАК ФизическоеЛицо,
	|	Сотрудники.Код
	|ПОМЕСТИТЬ ВТ_АГЕНТЫ
	|ИЗ
	|	Справочник.Сотрудники КАК Сотрудники
	|ГДЕ
	|	Сотрудники.Код В(&Коды)
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	ФизическоеЛицо
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ПриемНаРаботу.Ссылка КАК ТрудовойДоговор,
	|	ПриемНаРаботу.ФизическоеЛицо,
	|	ВТ_АГЕНТЫ.Код КАК number
	|ИЗ
	|	Документ.ПриемНаРаботу КАК ПриемНаРаботу
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_АГЕНТЫ КАК ВТ_АГЕНТЫ
	|		ПО ПриемНаРаботу.ФизическоеЛицо = ВТ_АГЕНТЫ.ФизическоеЛицо
	|ГДЕ
	|	ПриемНаРаботу.ФизическоеЛицо В
	|			(ВЫБРАТЬ
	|				ВТ_АГЕНТЫ.ФизическоеЛицо
	|			ИЗ
	|				ВТ_АГЕНТЫ КАК ВТ_АГЕНТЫ)
	|	И ПриемНаРаботу.Проведен = ИСТИНА";
	Запрос.УстановитьПараметр("Коды",Коды);				   
	Возврат Запрос.Выполнить().Выгрузить();
КонецФункции

Функция ПолучитьСоответствиеМВЗ(Коды)
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	|	ППФ_СоответствиеАгентовиМВЗ.Период,
	|	ППФ_СоответствиеАгентовиМВЗ.Сотрудник,
	|	ППФ_СоответствиеАгентовиМВЗ.МВЗ
	|ИЗ
	|	РегистрСведений.ППФ_СоответствиеАгентовиМВЗ КАК ППФ_СоответствиеАгентовиМВЗ
	|ГДЕ
	|	ППФ_СоответствиеАгентовиМВЗ.Сотрудник.Код В (&Коды)";
	Запрос.УстановитьПараметр("Коды",Коды);			   
	Выгрузка = Запрос.Выполнить().Выгрузить();				   
	Возврат Выгрузка;
КонецФункции

Функция ПолучитьДоговораАгентов(Коды)
	Запрос = Новый Запрос("ВЫБРАТЬ
	                      |	ПериодыДействияДоговоровГражданскоПравовогоХарактера.ДокументОснование КАК Договор,
	                      |	ПериодыДействияДоговоровГражданскоПравовогоХарактера.Сотрудник.Код КАК СотрудникКод,
	                      |	ПериодыДействияДоговоровГражданскоПравовогоХарактера.ФизическоеЛицо КАК ФизическоеЛицо,
	                      |	ПериодыДействияДоговоровГражданскоПравовогоХарактера.ДокументОснование.Номер КАК number
	                      |ИЗ
	                      |	РегистрСведений.ПериодыДействияДоговоровГражданскоПравовогоХарактера КАК ПериодыДействияДоговоровГражданскоПравовогоХарактера
	                      |ГДЕ
	                      |	ПериодыДействияДоговоровГражданскоПравовогоХарактера.ДокументОснование ССЫЛКА Документ.ДоговорРаботыУслуги
	                      |	И ПериодыДействияДоговоровГражданскоПравовогоХарактера.Сотрудник.Код В(&Коды)
	                      |	И ПериодыДействияДоговоровГражданскоПравовогоХарактера.Сотрудник.ППФ_Агент");
	Запрос.УстановитьПараметр("Коды",Коды);					  
	Выгрузка = Запрос.Выполнить().Выгрузить();
	Возврат Выгрузка;	
КонецФункции

Функция ОпределитьУлицу(КодУлицы, КодГорода, КодСубъектаРФ, КодНаселенногоПункта)
	Запрос = Новый Запрос("ВЫБРАТЬ
	|	АдресныеОбъекты.Наименование + "" "" + АдресныеОбъекты.Сокращение КАК Улица
	|ИЗ
	|	РегистрСведений.АдресныеОбъекты КАК АдресныеОбъекты
	|ГДЕ
	|	АдресныеОбъекты.КодГорода = &КодГорода
	|	И АдресныеОбъекты.КодУлицы = &КодУлицы
	|	И АдресныеОбъекты.КодСубъектаРФ = &КодСубъектаРФ
	|	И АдресныеОбъекты.Уровень = 7
	|	И АдресныеОбъекты.КодНаселенногоПункта = &КодНаселенногоПункта");
	Запрос.УстановитьПараметр("КодГорода",?(ЗначениеЗаполнено(КодГорода),Число(КодГорода),0));						  
	Запрос.УстановитьПараметр("КодУлицы",?(ЗначениеЗаполнено(КодУлицы),Число(КодУлицы),0));
	Запрос.УстановитьПараметр("КодСубъектаРФ",?(ЗначениеЗаполнено(КодСубъектаРФ),Число(КодСубъектаРФ),0));
	Запрос.УстановитьПараметр("КодНаселенногоПункта",?(ЗначениеЗаполнено(КодНаселенногоПункта),Число(КодНаселенногоПункта),0));
	
	Выборка = Запрос.Выполнить().Выбрать();
	Выборка.Следующий();
	Возврат Выборка.Улица;
КонецФункции // ОпеределитьУлицу()

Функция ОпределитьГород(КодГорода, КодСубъектаРФ, КодРайона, Индекс)
	Запрос = Новый Запрос("ВЫБРАТЬ
	|	АдресныеОбъекты.Наименование + "" "" + АдресныеОбъекты.Сокращение КАК Город
	|ИЗ
	|	РегистрСведений.АдресныеОбъекты КАК АдресныеОбъекты
	|ГДЕ
	|	АдресныеОбъекты.КодГорода = &КодГорода
	|	И АдресныеОбъекты.КодСубъектаРФ = &КодСубъектаРФ
	|	И АдресныеОбъекты.Уровень = 4
	|	И АдресныеОбъекты.КодРайона = &КодРайона
	|	И АдресныеОбъекты.ПочтовыйИндекс = &ПочтовыйИндекс");
	Запрос.УстановитьПараметр("КодГорода",?(ЗначениеЗаполнено(КодГорода),Число(КодГорода),0));						  
	Запрос.УстановитьПараметр("КодСубъектаРФ",?(ЗначениеЗаполнено(КодСубъектаРФ),Число(КодСубъектаРФ),0));
	Запрос.УстановитьПараметр("КодРайона",?(ЗначениеЗаполнено(КодРайона),Число(КодРайона),0));
	Запрос.УстановитьПараметр("ПочтовыйИндекс",?(ЗначениеЗаполнено(Индекс),Число(Индекс),0));
	
	Выборка = Запрос.Выполнить().Выбрать();
	Выборка.Следующий();
	Возврат Выборка.Город;
КонецФункции //ОпределитьГород()

Функция ОпределитьРегион(КодСубъектаРФ)
	Запрос = Новый Запрос("ВЫБРАТЬ
	|	АдресныеОбъекты.Наименование + "" "" + АдресныеОбъекты.Сокращение КАК Регион
	|ИЗ
	|	РегистрСведений.АдресныеОбъекты КАК АдресныеОбъекты
	|ГДЕ
	|	АдресныеОбъекты.КодСубъектаРФ = &КодСубъектаРФ
	|	И АдресныеОбъекты.Уровень = 1");
	Запрос.УстановитьПараметр("КодСубъектаРФ",?(ЗначениеЗаполнено(КодСубъектаРФ),Число(КодСубъектаРФ),0));						  
	
	Выборка = Запрос.Выполнить().Выбрать();
	Выборка.Следующий();
	Возврат Выборка.Регион;
КонецФункции //ОпеределитьРегион()

Процедура ОчиститьТаблицуОтОшибочныхАгентов(ТаблицаНачислений)
	
	КоличествоЗаписей = ТаблицаНачислений.Количество();
	СчетчикСтрок = КоличествоЗаписей - 1;
	
	Пока СчетчикСтрок>=0 Цикл 
		СтрокаТаблицыНачислений = ТаблицаНачислений[СчетчикСтрок];
		Если АгентОшибочный(СтрокаТаблицыНачислений.agent_code) Тогда 
			ТаблицаНачислений.Удалить(СтрокаТаблицыНачислений);
		КонецЕсли;
		СчетчикСтрок = СчетчикСтрок - 1;
	КонецЦикла;
	
КонецПроцедуры // ОчиститьТаблицуОтОшибочныхАгентов()

Функция ВыполнитьРазбор(Адрес)
	Результат = Новый Структура;
	Результат.Вставить("Город");
	Результат.Вставить("Страна");
	Результат.Вставить("Улица");
	Результат.Вставить("Индекс");
	Результат.Вставить("СубъектРФ");
	Результат.Вставить("Дом");
	Результат.Вставить("Квартира");
	Результат.Вставить("Корпус");
	Результат.Вставить("Район");
	Результат.Вставить("НаселенныйПункт");
	
	СтрокаРазбора = СтрЗаменить(Адрес, "xmlns:xsi=""http://www.w3.org/2001/XMLSchema-instance"" xmlns:xs=""http://www.w3.org/2001/XMLSchema"" xmlns=""http://www.v8.1c.ru/ssl/contactinfo""", "");   
	СтрокаРазбора = СтрЗаменить(СтрокаРазбора, Символы.ПС, " ");
	СтрокаРазбора = СтрЗаменить(СтрокаРазбора, "xsi:type=""Адрес""", "");
	СтрокаРазбора = СтрЗаменить(СтрокаРазбора, ">", ">|");
	
	МасстивПодстрок = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(СтрокаРазбора,"|",Истина);
	
	Представление = "<КонтактнаяИнформация  Представление=";
	ДлиннаПредставления = СтрДлина(Представление);
	
	РезультатПеребора = Новый Массив;
	Для Каждого ЗначениеМассива Из МасстивПодстрок Цикл
		ЗначениеМассива = ОбработатьТеги(ЗначениеМассива);
		Если Не ЭтоМусорнаяСтрока(ЗначениеМассива) И Лев(ЗначениеМассива, ДлиннаПредставления) <> Представление Тогда
			Если ЭтоУлица(ЗначениеМассива) Тогда
				Результат.Улица = СокрЛП(СтрЗаменить(ЗначениеМассива,"</Улица>",""));
			ИначеЕсли ЭтоСтрана(ЗначениеМассива) Тогда 
				Результат.Страна = СокрЛП(СтрЗаменить(СтрЗаменить(ЗначениеМассива, "<Состав  Страна=""", ""),""">",""));
			ИначеЕсли ЭтоСубъектРФ(ЗначениеМассива) Тогда
				Результат.СубъектРФ = СокрЛП(СтрЗаменить(ЗначениеМассива,"</СубъектРФ>",""));
			ИначеЕсли ЭтоРайон(ЗначениеМассива) Тогда
				Результат.Район = СокрЛП(СтрЗаменить(ЗначениеМассива,"</Район>",""));
			ИначеЕсли ЭтоИндекс(ЗначениеМассива) Тогда
				Результат.Индекс = СокрЛП(СтрЗаменить(СтрЗаменить(СтрЗаменить(ЗначениеМассива,"ТипАдрЭл=""10100000"" Значение=""",""),"<ДопАдрЭл",""),"""/>",""));
			ИначеЕсли ЭтоГород(ЗначениеМассива) Тогда
				Результат.Город = СокрЛП(СтрЗаменить(ЗначениеМассива,"</Город>",""));
			ИначеЕсли ЭтоНаселенныйПункт(ЗначениеМассива) Тогда
				Результат.НаселенныйПункт = СокрЛП(СтрЗаменить(ЗначениеМассива,"</НаселПункт>",""));
			ИначеЕсли ЭтоДом(ЗначениеМассива) Тогда
				Результат.Дом = СокрЛП(СтрЗаменить(СтрЗаменить(ЗначениеМассива,"<Номер Тип=""1010"" Значение=""",""),"""/>",""));
			ИначеЕсли ЭтоКвартира(ЗначениеМассива) Тогда
				Результат.Квартира = СокрЛП(СтрЗаменить(СтрЗаменить(ЗначениеМассива,"<Номер Тип=""2010"" Значение=""",""),"""/>",""));
			ИначеЕсли ЭтоКорпус(ЗначениеМассива) Тогда
				Результат.Корпус = СокрЛП(СтрЗаменить(СтрЗаменить(ЗначениеМассива,"<Номер Тип=""1050"" Значение=""",""),"""/>",""));				
			ИначеЕсли ЭтоСтроение(ЗначениеМассива) Тогда
				Результат.Корпус = СокрЛП(СтрЗаменить(СтрЗаменить(ЗначениеМассива,"<Номер Тип=""1060"" Значение=""",""),"""/>",""));				
			ИначеЕсли ЭтоВладение(ЗначениеМассива) Тогда
				Результат.Дом = СокрЛП(СтрЗаменить(СтрЗаменить(ЗначениеМассива,"<Номер Тип=""1020"" Значение=""",""),"""/>",""));
			ИначеЕсли ЭтоДомовладение(ЗначениеМассива) Тогда
				Результат.Дом = СокрЛП(СтрЗаменить(СтрЗаменить(ЗначениеМассива,"<Номер Тип=""1030"" Значение=""",""),"""/>",""));								
			ИначеЕсли ЭтоПомещение(ЗначениеМассива) Тогда
				Результат.Квартира = СокрЛП(СтрЗаменить(СтрЗаменить(ЗначениеМассива,"<Номер Тип=""2020"" Значение=""",""),"""/>",""));
			ИначеЕсли ЭтоОфис(ЗначениеМассива) Тогда
				Результат.Квартира = СокрЛП(СтрЗаменить(СтрЗаменить(ЗначениеМассива,"<Номер Тип=""2030"" Значение=""",""),"""/>",""));
			ИначеЕсли ЭтоБокс(ЗначениеМассива) Тогда
				Результат.Квартира = СокрЛП(СтрЗаменить(СтрЗаменить(ЗначениеМассива,"<Номер Тип=""2040"" Значение=""",""),"""/>",""));
			ИначеЕсли ЭтоКомната(ЗначениеМассива) Тогда
				Результат.Квартира = СокрЛП(СтрЗаменить(СтрЗаменить(ЗначениеМассива,"<Номер Тип=""2050"" Значение=""",""),"""/>",""));				
			ИначеЕсли ЭтоУчасток(ЗначениеМассива) Тогда
				Результат.Корпус = СокрЛП(СтрЗаменить(СтрЗаменить(ЗначениеМассива,"<Номер Тип=""1040"" Значение=""",""),"""/>",""));				
			ИначеЕсли ЭтоСооружение(ЗначениеМассива) Тогда
				Результат.Корпус = СокрЛП(СтрЗаменить(СтрЗаменить(ЗначениеМассива,"<Номер Тип=""1070"" Значение=""",""),"""/>",""));				
			ИначеЕсли ЭтоЛитера(ЗначениеМассива) Тогда
				Результат.Корпус = СокрЛП(СтрЗаменить(СтрЗаменить(ЗначениеМассива,"<Номер Тип=""1080"" Значение=""",""),"""/>",""));				
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;  
	
	Возврат Результат;
	
КонецФункции

Функция ОбработатьТеги(СтрокаДляОбработки)
	
	Если Найти(СтрокаДляОбработки,"&")=0 Тогда 
		Возврат СтрокаДляОбработки;
	КонецЕсли;
	
	СоответствиеТегов = Новый Соответствие;
	СоответствиеТегов.Вставить("&quot;","""");
	СоответствиеТегов.Вставить("&amp;","&");
	СоответствиеТегов.Вставить("&lt;","<");
	СоответствиеТегов.Вставить("&gt;",">");
	СоответствиеТегов.Вставить("&nbsp;",""+Символы.НПП+"");
	СоответствиеТегов.Вставить("&brvbar;","¦");
	СоответствиеТегов.Вставить("&para;","¶");
	СоответствиеТегов.Вставить("&laquo;","«");
	СоответствиеТегов.Вставить("raquo;","»");
	
	Для Каждого Тег ИЗ СоответствиеТегов Цикл 
		СтрокаДляОбработки = СтрЗаменить(СтрокаДляОбработки,Тег.Ключ,Тег.Значение);
	КонецЦикла;
	
	Возврат СтрокаДляОбработки;
	
КонецФункции

Функция ОпределитьПоследнийПробел(Строка)
	КоличествоСимволов = СтрДлина(Строка);
	НомерПробела = 0;
	Для счетчик=1 По КоличествоСимволов Цикл 
		Символ = Прав(Лев(Строка,счетчик),1);;
		Если Символ=" " ИЛИ Символ=Символы.НПП Тогда 
			НомерПробела = счетчик;
		КонецЕсли;
	КонецЦикла;
	
	Возврат НомерПробела;
	
КонецФункции

Функция ЭтоМусорнаяСтрока(Строка)
	
	МусорныеСтроки = Новый Массив;
	МусорныеСтроки.Добавить("</КонтактнаяИнформация>");
	МусорныеСтроки.Добавить("</Состав>");
	МусорныеСтроки.Добавить("<Комментарий/>");
	МусорныеСтроки.Добавить("<СубъектРФ>");
	МусорныеСтроки.Добавить("<Улица>");        
	МусорныеСтроки.Добавить("<Состав xsi:type=""АдресРФ"">");
	
	МусорныеСтроки.Добавить("<Округ>");
	МусорныеСтроки.Добавить("<Округ/>");      
	МусорныеСтроки.Добавить("<ВнутригРайон>");
	МусорныеСтроки.Добавить("<ВнутригРайон/>");     
	МусорныеСтроки.Добавить("<ДопАдрЭл>");
	МусорныеСтроки.Добавить("</ДопАдрЭл>");
	МусорныеСтроки.Добавить("<НаселПункт/>");
	МусорныеСтроки.Добавить("<НаселПункт>");           
	МусорныеСтроки.Добавить("<Район>");
	МусорныеСтроки.Добавить("<Район/>");      
	МусорныеСтроки.Добавить("<Город>");
	МусорныеСтроки.Добавить("<Город/>");      
	МусорныеСтроки.Добавить("<СвРайМО>");
	МусорныеСтроки.Добавить("</СвРайМО>");
	
	Если МусорныеСтроки.Найти(СокрЛП(Строка)) = Неопределено Тогда
		Возврат Ложь; 
	Иначе
		Возврат Истина;
	КонецЕсли;
	
КонецФункции //ЭтоМусорнаяСтрока()

Функция ЭтоУлица(Строка)
	Возврат ?(Найти(Строка, "</Улица>") > 0, Истина, Ложь);
КонецФункции // ЭтоУлица()

Функция ЭтоНаселенныйПункт(Строка)
	Возврат ?(Найти(Строка, "</НаселПункт>") > 0, Истина, Ложь);
КонецФункции // ЭтоУлица()

Функция ЭтоСтрана(Строка)
	Возврат ?(Найти(Строка, " Страна=") > 0, Истина, Ложь);
КонецФункции // ЭтоСтрана()

Функция ЭтоСубъектРФ(Строка)
	Возврат ?(Найти(Строка, "</СубъектРФ>") > 0, Истина, Ложь);
КонецФункции // ЭтоСубъектРФ()

Функция ЭтоРайон(Строка)
	Возврат ?(Найти(Строка, "</Район>") > 0, Истина, Ложь);
КонецФункции // ЭтоРайон()

Функция ЭтоИндекс(Строка)
	Возврат ?(Найти(Строка, "ТипАдрЭл=""10100000"" Значение=""") > 0, Истина, Ложь);
КонецФункции // ЭтоИндекс()

Функция ЭтоГород(Строка)
	Возврат ?(Найти(Строка, "</Город>") > 0, Истина, Ложь);      
КонецФункции // ЭтоГород()

Функция ЭтоДом(Строка)
	Возврат ?(Найти(Строка, "Номер Тип=""1010"" Значение=""") > 0, Истина, Ложь);
КонецФункции // ЭтоДом()

Функция ЭтоВладение(Строка)
	Возврат ?(Найти(Строка, "Номер Тип=""1020"" Значение=""") > 0, Истина, Ложь);
КонецФункции // ЭтоВладение()

Функция ЭтоДомовладение(Строка)
	Возврат ?(Найти(Строка, "Номер Тип=""1030"" Значение=""") > 0, Истина, Ложь);
КонецФункции // ЭтоДомовладение()

Функция ЭтоКвартира(Строка)
	Возврат ?(Найти(Строка, "Номер Тип=""2010"" Значение=""") > 0, Истина, Ложь);
КонецФункции // ЭтоКвартира()

Функция ЭтоПомещение(Строка)
	Возврат ?(Найти(Строка, "Номер Тип=""2020"" Значение=""") > 0, Истина, Ложь);
КонецФункции // ЭтоПомещение()

Функция ЭтоОфис(Строка)
	Возврат ?(Найти(Строка, "Номер Тип=""2030"" Значение=""") > 0, Истина, Ложь);
КонецФункции // ЭтоОфис()

Функция ЭтоБокс(Строка)
	Возврат ?(Найти(Строка, "Номер Тип=""2040"" Значение=""") > 0, Истина, Ложь);
КонецФункции // ЭтоБокс()

Функция ЭтоКомната(Строка)
	Возврат ?(Найти(Строка, "Номер Тип=""2050"" Значение=""") > 0, Истина, Ложь);
КонецФункции // ЭтоКомната()

Функция ЭтоУчасток(Строка)
	Возврат ?(Найти(Строка, "Номер Тип=""1040"" Значение=""") > 0, Истина, Ложь);
КонецФункции // ЭтоУчасток()

Функция ЭтоКорпус(Строка)
	Возврат ?(Найти(Строка, "Номер Тип=""1050"" Значение=""") > 0, Истина, Ложь);
КонецФункции // ЭтоКорпус()

Функция ЭтоСтроение(Строка)
	Возврат ?(Найти(Строка, "Номер Тип=""1060"" Значение=""") > 0, Истина, Ложь);
КонецФункции // ЭтоСтроение()

Функция ЭтоСооружение(Строка)
	Возврат ?(Найти(Строка, "Номер Тип=""1070"" Значение=""") > 0, Истина, Ложь);
КонецФункции // ЭтоСооружение()

Функция ЭтоЛитера(Строка)
	Возврат ?(Найти(Строка, "Номер Тип=""1080"" Значение=""") > 0, Истина, Ложь);
КонецФункции // ЭтоЛитера()

Функция АгентОшибочный(КодАгента) Экспорт
	
	Попытка 		
		ПреобразованиеНомераВЧисло = Число(СокрЛП(КодАгента));
	Исключение
		Возврат Истина;
	КонецПопытки;
	
	Если СтрДлина(СокрЛП(Строка(КодАгента)))<=6  ИЛИ СокрЛП(КодАгента) = "9999999" Тогда 
		Возврат Истина;
	КонецЕсли;
	
	Возврат Ложь;
	
КонецФункции // АгентОшибочный()

Функция ПолучитьСНИЛСФизиковШтатников()
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	               |	Сотрудники.ФизическоеЛицо.СтраховойНомерПФР КАК СтраховойНомерПФР
	               |ИЗ
	               |	Справочник.Сотрудники КАК Сотрудники
	               |ГДЕ
	               |	НЕ Сотрудники.ППФ_Агент
	               |	И Сотрудники.ФизическоеЛицо.СтраховойНомерПФР <> """"";
	Возврат  Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("СтраховойНомерПФР");
КонецФункции

#КонецОбласти
