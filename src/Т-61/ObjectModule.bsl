/////////////////////////////////////////////////////////////////////////
///////СВЕДЕНИЯ ОБ ОБРАБОТКЕ

Функция ПолучитьТаблицуКоманд()
	
	Команды = Новый ТаблицаЗначений;
	// Как будет выглядеть описание печатной формы для пользователя
	Команды.Колонки.Добавить("Представление", Новый ОписаниеТипов("Строка"));
	// Имя нашего макета, что бы могли отличить вызванную команду в обработке печати
	Команды.Колонки.Добавить("Идентификатор", Новый ОписаниеТипов("Строка"));
	// Тут задается, как должна вызваться команда обработки
	// Возможные варианты:
	// - ОткрытиеФормы - в этом случае в колонке идентификатор должно быть указано имя формы, которое должна будет открыть система
	// - ВызовКлиентскогоМетода - вызвать клиентскую экспортную процедуру из модуля формы обработки
	// - ВызовСерверногоМетода - вызвать серверную экспортную процедуру из модуля объекта обработки
	Команды.Колонки.Добавить("Использование", Новый ОписаниеТипов("Строка"));
	// Следующий параметр указывает, необходимо ли показывать оповещение при начале и завершению работы обработки. Не имеет смысла при открытии формы
	Команды.Колонки.Добавить("ПоказыватьОповещение", Новый ОписаниеТипов("Булево"));
	// Для печатной формы должен содержать строку ПечатьMXL 
	Команды.Колонки.Добавить("Модификатор", Новый ОписаниеТипов("Строка"));
	
	Возврат Команды;
	
КонецФункции

Функция ДобавитьКоманду(ТаблицаКоманд, Представление, Идентификатор, Использование, ПоказыватьОповещение = Ложь, Модификатор = "")
	НоваяКоманда = ТаблицаКоманд.Добавить();
	НоваяКоманда. Представление = Представление;
	НоваяКоманда. Идентификатор= Идентификатор;
	НоваяКоманда. Использование= Использование;
	НоваяКоманда. ПоказыватьОповещение= ПоказыватьОповещение;
	НоваяКоманда. Модификатор= Модификатор;
КонецФункции

Функция СведенияОВнешнейОбработке() Экспорт
	ПараметрыРегистрации = Новый Структура;
	МассивНазначений = Новый Массив;
	МассивНазначений.Добавить("Документ.Увольнение");
	ПараметрыРегистрации.Вставить("Вид", "ПечатнаяФорма"); //может быть - ЗаполнениеОбъекта, ДополнительныйОтчет, СозданиеСвязанныхОбъектов... 
	ПараметрыРегистрации.Вставить("Назначение", МассивНазначений);
	ПараметрыРегистрации.Вставить("Наименование", " ППФ Записка-расчет при увольнении (Т-61) "); //имя под которым обработка будет зарегестрирована в справочнике внешних обработок
	ПараметрыРегистрации.Вставить("Версия", "1.0");
	ПараметрыРегистрации.Вставить("БезопасныйРежим", Ложь);
	ПараметрыРегистрации.Вставить("Информация", " ППФ Записка-расчет при увольнении (Т-61)");//так будет выглядеть описание печ.формы для пользователя
	ТаблицаКоманд = ПолучитьТаблицуКоманд();
	ДобавитьКоманду(ТаблицаКоманд, "ППФ Записка-расчет при увольнении (Т-61)", "ПФ_MXL_Т61", "ВызовСерверногоМетода", Истина);
	ПараметрыРегистрации.Вставить("Команды", ТаблицаКоманд);
	Возврат ПараметрыРегистрации;
КонецФункции

/////////////////////////////////////////////////////////////////////////

/////////////////////////////////////////////////////////////////////////
///////СЕРВИСНЫЕ ПРОЦЕДУРЫ И ФУКНЦИИ

// Процедура печати документа.
// Возвращает табличный документ - сформированную печатную форму приказа о приеме или увольнении 
//
// Параметры:
//	МассивОбъектов - массив сотрудников
//  ОбъектыПечати  - Список значений  - Объекты печати (значение - ссылка на объект, представление - имя области в которой был выведен объект)
//	ВидПриказа     - "ПриказОПриеме" или "ПриказОбУвольнении"
//
// Возвращаемое значение:
//	Табличный документ
//
Функция ТабличныйДокументЗапискиРасчетаПриУвольнении(Макет, МассивОбъектов, ОбъектыПечати)
	
	МассивДанныхЗаполнения = ДанныеДляПечатиЗапискиРасчетаТ61(МассивОбъектов);
	
	ДокументРезультат = СформироватьЗапискиРасчетаТ61(Макет, МассивДанныхЗаполнения, ОбъектыПечати);
	
	Возврат ДокументРезультат;


КонецФункции 

Функция СформироватьЗапискиРасчетаТ61(Макет, МассивДанныхЗаполнения, ОбъектыПечати)
	
	ДокументРезультат = Новый ТабличныйДокумент;
	ДокументРезультат.АвтоМасштаб = Истина;

	ДокументРезультат.КлючПараметровПечати = "ПараметрыПечати_ЗапискаРасчетПриУвольнении";

	ПервыйПриказ = Истина;
	Для каждого ПараметрыМакета Из МассивДанныхЗаполнения Цикл
		
		ОбластьЛицеваяСторона 					= Макет.ПолучитьОбласть("ЛицеваяСторона");
		ОбластьРасчетСреднего 					= Макет.ПолучитьОбласть("РасчетСреднего");
		ОбластьРасчетСреднегоИтого 				= Макет.ПолучитьОбласть("РасчетСреднегоИтого");
		ОбластьДополнительнаяСтрокаЗаработка 	= Макет.ПолучитьОбласть("ДополнительнаяСтрокаЗаработка");
		ОбластьПодвал 							= Макет.ПолучитьОбласть("Подвал");
	
		Если Не ПервыйПриказ Тогда
			ДокументРезультат.ВывестиГоризонтальныйРазделительСтраниц();
		Иначе
			ПервыйПриказ = Ложь;
		КонецЕсли;
		
		НомерСтрокиНачало = ДокументРезультат.ВысотаТаблицы + 1;
		
		ОбластьЛицеваяСторона.Параметры.Заполнить(ПараметрыМакета);
		ДокументРезультат.Вывести(ОбластьЛицеваяСторона);
		ОбластьРасчетСреднего.Параметры.Заполнить(ПараметрыМакета);
		ДокументРезультат.Вывести(ОбластьРасчетСреднего);
		
		Для каждого ДополнительнаяСтрокаЗаработка Из ПараметрыМакета.МассивДополнительныхСтрокЗаработка Цикл
			ОбластьДополнительнаяСтрокаЗаработка.Параметры.Заполнить(ДополнительнаяСтрокаЗаработка);
			ДокументРезультат.Вывести(ОбластьДополнительнаяСтрокаЗаработка);
		КонецЦикла;	

		ОбластьРасчетСреднегоИтого.Параметры.Заполнить(ПараметрыМакета);
		ДокументРезультат.Вывести(ОбластьРасчетСреднегоИтого);
		ОбластьПодвал.Параметры.Заполнить(ПараметрыМакета);
		ДокументРезультат.Вывести(ОбластьПодвал);
		
		УправлениеПечатью.ЗадатьОбластьПечатиДокумента(ДокументРезультат, НомерСтрокиНачало, ОбъектыПечати, ПараметрыМакета.Ссылка);
		
	КонецЦикла;
	
	Возврат ДокументРезультат;
	
КонецФункции 

Функция ДанныеДляПечатиЗапискиРасчетаТ61(МассивОбъектов)
	
	Результат 	= КадровыйУчетРасширенный.СформироватьЗапросДляТ61(МассивОбъектов);
	Выборка 	= Результат.Выбрать();
	
	МассивПараметров = Новый Массив;
	
	ВалютаУчета = ЗарплатаКадры.ВалютаУчетаЗаработнойПлаты();
	
	ДанныеРасчетаСреднегоЗаработкаДокументов = Документы.Увольнение.ДанныеДокументовДляПечатиРасчетаСреднегоЗаработка(МассивОбъектов);
	ОбщегоНазначенияКлиентСервер.ДополнитьМассив(ДанныеРасчетаСреднегоЗаработкаДокументов, Документы.УвольнениеСписком.ДанныеДокументовДляПечатиРасчетаСреднегоЗаработка(МассивОбъектов));
	
	Пока Выборка.Следующий() Цикл
		
		Параметры = СтруктураПараметровЗапискиРасчетаТ61();		
		КадровыйУчет.ЗаполнитьПараметрыКадровогоПриказа(Параметры, Выборка);
		
		Если Параметры.ДолгЗаРаботником < 0 Тогда
			
			Параметры.КВыплате = Параметры.КВыплате + (Параметры.ДолгЗаРаботником * 2);	
			
		КонецЕсли;
		
		
		РезультатСклонения = "";
		Если ФизическиеЛицаЗарплатаКадры.Просклонять(Строка(Параметры.Работник), 5, РезультатСклонения, Параметры.Пол) Тогда
			Параметры.Работник	= РезультатСклонения
		КонецЕсли;
		
		Параметры.КВыплатеПрописью = РаботаСКурсамиВалют.СформироватьСуммуПрописью(Параметры.КВыплате, ВалютаУчета);
		Параметры.КВыплатеРублиКопейки = "(" + Формат(Цел(Параметры.КВыплате),"ЧДЦ=0; ЧН=-") 
										+ Символы.НПП + НСтр("ru = 'руб'") + Символы.НПП 
										+ Формат((Параметры.КВыплате - Цел(Параметры.КВыплате)) * 100,"ЧЦ=2; ЧДЦ=0; ЧН=-")
										+ Символы.НПП + НСтр("ru = 'коп'") + ")";
		
		Параметры.ДатаУвольнения  		= Формат(Параметры.ДатаУвольнения, "ДЛФ=DD");
		Параметры.ТрудовойДоговорДата 	= Формат(Параметры.ТрудовойДоговорДата, "ДЛФ=D");		
		Параметры.ДатаДок 				= Формат(Параметры.ДатаДок, "ДЛФ=D");
		Параметры.ДатаДок 				= Формат(Параметры.ДатаДок, "ДЛФ=D");
		
		Если НЕ ПустаяСтрока(Выборка.ТекстОснования) Тогда
				
			Параметры.СтатьяТКРФ = Выборка.ТекстОснования
				+ СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
					НСтр("ru=', %1 Трудового кодекса Российской Федерации'"),
					Выборка.СтатьяТКРФ);
					
		КонецЕсли;
		
		Для каждого Элемент Из ДанныеРасчетаСреднегоЗаработкаДокументов Цикл
			Если Выборка.Ссылка = Элемент.РеквизитыДокумента.Ссылка
				И Выборка.Сотрудник = Элемент.РеквизитыДокумента.Сотрудник Тогда
				ДанныеРасчетаСреднегоЗаработка 	= Элемент.ДанныеРасчетаСреднего;
				ПараметрыРасчетаСреднего 		= Элемент.ПараметрыРасчета;
				Прервать;
			КонецЕсли;
		КонецЦикла;
		
		ОбщаяТаблицаДанныхОСреднем = Новый ТаблицаЗначений;
		ОбщаяТаблицаДанныхОСреднем.Колонки.Добавить("Месяц", Новый ОписаниеТипов("Дата"));
		ОбщаяТаблицаДанныхОСреднем.Колонки.Добавить("Сумма", Новый ОписаниеТипов("Число"));
		
		Для каждого Элемент Из ДанныеРасчетаСреднегоЗаработка["Заработок"] Цикл
			НоваяСтрока = ОбщаяТаблицаДанныхОСреднем.Добавить();
			НоваяСтрока.Месяц = Элемент["Месяц"];
			НоваяСтрока.Сумма = Элемент["Учтено"];
		КонецЦикла;
		
		ОбщаяТаблицаДанныхОСреднем.Свернуть("Месяц", "Сумма");
		ОбщаяТаблицаДанныхОСреднем.Сортировать("Месяц");
		
		МесяцСреднегоЗаработка = 1;
		Для каждого ПериодСреднего Из ОбщаяТаблицаДанныхОСреднем Цикл
			
			Если МесяцСреднегоЗаработка > 12 Тогда
			   Прервать;
 			КонецЕсли;
			
			СтрокаГод 	= "Год" 	+ МесяцСреднегоЗаработка;
			СтрокаМесяц = "Месяц" 	+ МесяцСреднегоЗаработка;
			СтрокаСумма = "Сумма" 	+ МесяцСреднегоЗаработка;
			Параметры.Вставить(СтрокаГод, Формат(ПериодСреднего.Месяц, "ДФ=yyyy"));
			Параметры.Вставить(СтрокаМесяц, Формат(ПериодСреднего.Месяц, "ДФ=MMMM"));
			Параметры.Вставить(СтрокаСумма, ПериодСреднего.Сумма);
			МесяцСреднегоЗаработка = МесяцСреднегоЗаработка + 1;
		КонецЦикла;
		
		МассивДополнительныхСтрокЗаработка = Новый Массив; 
		
		МесяцСреднегоЗаработка = 0;
		Для каждого ПериодСреднего Из ОбщаяТаблицаДанныхОСреднем Цикл
			МесяцСреднегоЗаработка = МесяцСреднегоЗаработка + 1;
			
			Если МесяцСреднегоЗаработка < 13 Тогда
				Продолжить;
			КонецЕсли;
			
			МассивДополнительныхСтрокЗаработка.Добавить(Новый Структура("Год,Месяц,Сумма", Формат(ПериодСреднего.Месяц, "ДФ=yyyy"),Формат(ПериодСреднего.Месяц, "ДФ=MMMM"), ПериодСреднего.Сумма));
			
		КонецЦикла;    
		
		Параметры.Вставить("МассивДополнительныхСтрокЗаработка", МассивДополнительныхСтрокЗаработка);
		
		ВсегоВремени 	= УчетСреднегоЗаработкаКлиентСервер.ИтогиПоПолю(ДанныеРасчетаСреднегоЗаработка["ОтработанноеВремя"], "Учтено");
		ВсегоЗаработок 	= УчетСреднегоЗаработкаКлиентСервер.ИтогиПоПолю(ДанныеРасчетаСреднегоЗаработка["Заработок"], "Учтено");
		
		Если ПараметрыРасчетаСреднего.ИспользоватьСреднеЧасовойЗаработок Тогда
			Параметры.Вставить("ВсегоЧасовРасчетногоПериода", ВсегоВремени);
		Иначе
			Параметры.Вставить("ВсегоДнейРасчетногоПериода", ВсегоВремени);
		КонецЕсли;
		
		Параметры.Вставить("ВсегоУчтено", 				ВсегоЗаработок);		
		Параметры.Вставить("ЗаработокЗаЕдиницуВремени", УчетСреднегоЗаработкаКлиентСервер.СреднийЗаработок(ВсегоЗаработок, ВсегоВремени));
		
		ДокументУвольнения = Документы.Увольнение.НайтиПоНомеру(Выборка.НомерДок, Выборка.ДатаДок);
		Параметры.Вставить("ДнейУдержания",0);
		Параметры.Вставить("ДнейКомпенсации",0);
		
		Если не ДокументУвольнения.Пустая() Тогда 
			Если ДокументУвольнения.ПризнакКомпенсацииУдержанияОтпуска = Перечисления.КомпенсацияУдержаниеОтпускаПриУвольнении.КомпенсироватьНеИспользованные Тогда 
				Если ТипЗнч(ДокументУвольнения.ВидРасчетаКомпенсацииУдержанияОтпуска) = Тип("ПланВидовРасчетаСсылка.Начисления") И Лев(ДокументУвольнения.ВидРасчетаКомпенсацииУдержанияОтпуска.ФормулаРасчета,1) = "-" Тогда 
					Параметры.Вставить("ДнейУдержания",ДокументУвольнения.ДнейКомпенсацииУдержанияОтпуска);
				Иначе 
					Параметры.Вставить("ДнейКомпенсации",ДокументУвольнения.ДнейКомпенсацииУдержанияОтпуска);
				КонецЕсли;
			ИначеЕсли  ДокументУвольнения.ПризнакКомпенсацииУдержанияОтпуска = Перечисления.КомпенсацияУдержаниеОтпускаПриУвольнении.УдержатьЗаИспользованныеАвансом Тогда 
				Параметры.Вставить("ДнейУдержания",ДокументУвольнения.ДнейКомпенсацииУдержанияОтпуска);
			КонецЕсли;	
			Параметры.Вставить("РабочийГодС",ДокументУвольнения.РабочийГодС);
			Параметры.Вставить("РабочийГодПо",ДокументУвольнения.РабочийГодПо);
		КонецЕсли;
		
		// Добавим дни компенсации/удержания за доп отпуск
		МассивДопОтпусков = Новый Массив;
		МассивДопОтпусков.Добавить(Справочники.ВидыОтпусков.НайтиПоНаименованию("Дополнительный ежегодный отпуск"));
		ЗапросПоДопОтпускам = Новый Запрос();
		ЗапросПоДопОтпускам.Текст = "ВЫБРАТЬ
		|	УвольнениеДополнительныеОтпуска.ДнейКомпенсацииУдержания,
		|	УвольнениеДополнительныеОтпуска.ПризнакКомпенсацииУдержания
		|ИЗ
		|	Документ.Увольнение.ДополнительныеОтпуска КАК УвольнениеДополнительныеОтпуска
		|ГДЕ
		|	УвольнениеДополнительныеОтпуска.Ссылка = &Ссылка
		|	И УвольнениеДополнительныеОтпуска.ВидОтпуска В(&ВидОтпуска)";
		ЗапросПоДопОтпускам.УстановитьПараметр("Ссылка",МассивОбъектов[0]);									
		ЗапросПоДопОтпускам.УстановитьПараметр("ВидОтпуска",МассивДопОтпусков);
		РезультатПоДоОтпускам = ЗапросПоДопОтпускам.Выполнить();
		
		Если не РезультатПоДоОтпускам.Пустой() Тогда 
			ВыборкаДоп = РезультатПоДоОтпускам.Выбрать();
			Пока ВыборкаДоп.Следующий() Цикл 
				Если ВыборкаДоп.ПризнакКомпенсацииУдержания = Перечисления.КомпенсацияУдержаниеОтпускаПриУвольнении.КомпенсироватьНеИспользованные Тогда 
					Параметры.Вставить("ДнейКомпенсации",Параметры.ДнейКомпенсации + ВыборкаДоп.ДнейКомпенсацииУдержания);
				ИначеЕсли ВыборкаДоп.ПризнакКомпенсацииУдержания = Перечисления.КомпенсацияУдержаниеОтпускаПриУвольнении.УдержатьЗаИспользованныеАвансом Тогда 
					Параметры.Вставить("ДнейУдержания",Параметры.ДнейУдержания + ВыборкаДоп.ДнейКомпенсацииУдержания);
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
		
		Запрос = Новый Запрос();
		Запрос.Текст = "ВЫБРАТЬ
		               |	СУММА(НачисленияУдержанияПоСотрудникам.Сумма) КАК Сумма
		               |ИЗ
		               |	РегистрНакопления.НачисленияУдержанияПоСотрудникам КАК НачисленияУдержанияПоСотрудникам
		               |ГДЕ
		               |	НачисленияУдержанияПоСотрудникам.Период МЕЖДУ &НачалоПериода И &КонецПериода
		               |	И НачисленияУдержанияПоСотрудникам.Сотрудник = &Сотрудник
		               |	И НачисленияУдержанияПоСотрудникам.НачислениеУдержание = ЗНАЧЕНИЕ(Перечисление.ВидыОсобыхНачисленийИУдержаний.НДФЛ)";
		Запрос.УстановитьПараметр("НачалоПериода",НачалоМесяца(Параметры.Ссылка.ПериодРегистрации));					   
		Запрос.УстановитьПараметр("КонецПериода",КонецМесяца(Параметры.Ссылка.ПериодРегистрации));
		Запрос.УстановитьПараметр("Сотрудник",Параметры.Ссылка.Сотрудник);
		
		ВыборкаНДФЛ = Запрос.Выполнить().Выбрать();
		
		Если ВыборкаНДФЛ.Следующий() Тогда 
			Параметры.СуммаНДФЛ 		= ВыборкаНДФЛ.Сумма;
			Параметры.ВсегоУдержано 	= Параметры.ПрочиеУдержания + Параметры.СуммаНДФЛ;
			Параметры.КВыплате			= Параметры.ВсегоВыплат - Параметры.ВсегоУдержано;
			Параметры.КВыплатеПрописью 	= РаботаСКурсамиВалют.СформироватьСуммуПрописью(Параметры.КВыплате, ВалютаУчета);
			Параметры.КВыплатеРублиКопейки 	= "(" + Формат(Цел(Параметры.КВыплате),"ЧДЦ=0; ЧН=-") 
											+ Символы.НПП + НСтр("ru = 'руб'") + Символы.НПП 
											+ Формат((Параметры.КВыплате - Цел(Параметры.КВыплате)) * 100,"ЧЦ=2; ЧДЦ=0; ЧН=-")
											+ Символы.НПП + НСтр("ru = 'коп'") + ")";
			
		КонецЕсли; 
		
		МассивПараметров.Добавить(Параметры);
		
	КонецЦикла;
	
	Возврат МассивПараметров;
КонецФункции 

Функция СтруктураПараметровЗапискиРасчетаТ61()
	Параметры = КадровыйУчет.ПараметрыКадровогоПриказа();
	
	Параметры.Вставить("РаботникКадровойСлужбыРасшифровкаПодписи");
	Параметры.Вставить("ДолжностьРаботникаКадровойСлужбы");
	Параметры.Вставить("БухгалтерРасшифровкаПодписи");
	
	Параметры.Вставить("ДатаУвольнения");
	Параметры.Вставить("СтатьяТКРФ");
	Параметры.Вставить("ТекстОснования");
	Параметры.Вставить("ВсегоДнейРасчетногоПериода"); 
	Параметры.Вставить("ВсегоЧасовРасчетногоПериода"); 
	Параметры.Вставить("ЗаработокЗаЕдиницуВремени"); 
	Параметры.Вставить("ВсегоУчтено");
	
	Параметры.Вставить("ДнейУдержания");
	Параметры.Вставить("ДнейКомпенсации");
	Параметры.Вставить("РабочийГодС");
	Параметры.Вставить("РабочийГодПо");
	
	Параметры.Вставить("НачисленоКомпенсации");
	Параметры.Вставить("НачисленоВыходноеПособиеСохраняемыйЗаработок");
	Параметры.Вставить("ВсеДругиеНачисления");
	Параметры.Вставить("ВсегоВыплат");
	Параметры.Вставить("СуммаНДФЛ");
	Параметры.Вставить("ПрочиеУдержания");
	Параметры.Вставить("ВсегоУдержано");
	Параметры.Вставить("ДолгЗаОрганизацией");
	Параметры.Вставить("ДолгЗаРаботником");
	Параметры.Вставить("КВыплате");
	Параметры.Вставить("КВыплатеПрописью");
	Параметры.Вставить("КВыплатеРублиКопейки");
	
	Сч  = 1;
	Для Сч = 1 По 12 Цикл
		СтрокаГод = "Год" + Сч;
		СтрокаМесяц = "Месяц" + Сч;
		СтрокаСумма = "Сумма" + Сч;
		Параметры.Вставить(СтрокаГод);
		Параметры.Вставить(СтрокаМесяц);
		Параметры.Вставить(СтрокаСумма);
	КонецЦикла;	
	
	Параметры.Вставить("МассивДополнительныхСтрокЗаработка", Новый Массив);

	Возврат Параметры;
КонецФункции 


/////////////////////////////////////////////////////////////////////////

/////////////////////////////////////////////////////////////////////////
///////ПРОЦЕДУРА ПЕЧАТИ

Процедура Печать(МассивОбъектов, КоллекцияПечатныхФорм, ОбъектыПечати, ПараметрыВывода) Экспорт
	
	Макет = ПолучитьМакет("ПФ_MXL_Т61");
	
	Если УправлениеПечатью.НужноПечататьМакет(КоллекцияПечатныхФорм, "ПФ_MXL_Т61") Тогда
		УправлениеПечатью.ВывестиТабличныйДокументВКоллекцию(КоллекцияПечатныхФорм,
		"ПФ_MXL_Т61", "ППФ Записка-расчет при увольнении (Т-61)",	ТабличныйДокументЗапискиРасчетаПриУвольнении(Макет,МассивОбъектов, ОбъектыПечати));
	КонецЕсли;
	
КонецПроцедуры

/////////////////////////////////////////////////////////////////////////

