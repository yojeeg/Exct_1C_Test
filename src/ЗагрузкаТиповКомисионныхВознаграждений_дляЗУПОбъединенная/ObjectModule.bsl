Функция СведенияОВнешнейОбработке() Экспорт
	
   РегистрационныеДанные = Новый Структура;
   РегистрационныеДанные.Вставить("Наименование", "Загрузка типов комиссионных вознаграждений из RP1");
   РегистрационныеДанные.Вставить("БезопасныйРежим", Ложь);
   РегистрационныеДанные.Вставить("Версия", "1.0");
   РегистрационныеДанные.Вставить("Вид", "ДополнительнаяОбработка");
   РегистрационныеДанные.Вставить("Информация", "Загрузка типов комиссионных вознаграждений из RP1");
   
   Команды = Новый ТаблицаЗначений;
   Команды.Колонки.Добавить("Идентификатор");
   Команды.Колонки.Добавить("Представление");
   Команды.Колонки.Добавить("Модификатор");
   Команды.Колонки.Добавить("ПоказыватьОповещение");
   Команды.Колонки.Добавить("Использование");
   
   Команда = Команды.Добавить();
   Команда.Идентификатор = "1";
   Команда.Представление = "Загрузка типов комиссионных вознаграждений из RP1";
   Команда.ПоказыватьОповещение = Истина;
   Команда.Использование = "ВызовСерверногоМетода";
   
   РегистрационныеДанные.Вставить("Команды", Команды);
   
   Возврат РегистрационныеДанные;
   
КонецФункции

Процедура ВыполнитьКоманду(ИдентификаторКоманды = Неопределено) Экспорт
	
	Соединение = ППФ_Сервер.УстановитьСоединение("RP1");
	
	Если Соединение <> Неопределено Тогда
		
		УдержаниеПоИспЛистам = ПланыВидовРасчета.Удержания.НайтиПоКоду("ИСПДК");
		УдержаниеПоИспЛистамОбъект = УдержаниеПоИспЛистам.ПолучитьОбъект();
		БазовыеВидыРасчета = УдержаниеПоИспЛистамОбъект.БазовыеВидыРасчета;
		
		ТекстЗапроса =  "select  
		|	tac.cao_id as id, 
		|	tct.tct_shortcut as shortcut,
		|	tct.tct_description as name
		|from 
		|	t_ac_commission tac 
		|		left join t_cat_type_comm tct 
		|			ON tac.cao_tct_id = tct.tct_type"; 
		
		РезультатЗапроса = ППФ_Сервер.RP1_ПолучитьРезультатЗапроса(ТекстЗапроса, Соединение);			
		Для Каждого Строка Из РезультатЗапроса Цикл
			
			НайденныйОбъект = ПланыВидовРасчета.Начисления.НайтиПоКоду("RP1_" + СокрЛП(Строка.id));			
			Если ЗначениеЗаполнено(НайденныйОбъект) Тогда                                          				
				ТекущийОбъет 										= НайденныйОбъект.ПолучитьОбъект();				
			Иначе	                                                                                   				
				ТекущийОбъет 										= ПланыВидовРасчета.Начисления.СоздатьВидРасчета();				
			КонецЕсли;			
			ТекущийОбъет.Код 										= "RP1_" + СокрЛП(Строка.id);
			ТекущийОбъет.Наименование 								= СокрЛП(Строка.name);
			ТекущийОбъет.ВидДокументаНачисления 					= Перечисления.ВидыДокументовНачисления.РазовоеНачисление;
			ТекущийОбъет.ВидОперацииПоЗарплате 						= Перечисления.ВидыОперацийПоЗарплате.НачисленоСдельноДоход;
			ТекущийОбъет.ВидВремени 								= Перечисления.ВидыРабочегоВремениСотрудников.ДополнительноОплачиваемоеВПределахНормы;
			ТекущийОбъет.ВидСтажаПФР2014 							= Перечисления.ВидыСтажаПФР2014.ВключаетсяВСтраховойСтаж;
			ТекущийОбъет.ИспользованиеПериода 						= Перечисления.ВариантыИспользованияПериодаНачисления.НеИспользовать;
			ТекущийОбъет.КатегорияНачисленияИлиНеоплаченногоВремени = Перечисления.КатегорииНачисленийИНеоплаченногоВремени.Прочее;
			ТекущийОбъет.КатегорияСтатистическогоНаблюдения 		= Перечисления.КатегорииСтатистическогоНаблюдения.ЗаработнаяПлатаРаботников;
			ТекущийОбъет.КоличествоМесяцевБазовогоПериода 			= 1;
			ТекущийОбъет.НачисляетсяВЦеломЗаМесяц 					= Истина;
			ТекущийОбъет.ОчередностьОтраженияВУчете 				= 1;
			ТекущийОбъет.ОчередностьРасчета 						= 1;
			ТекущийОбъет.КодДоходаНДФЛ								= Справочники.ВидыДоходовНДФЛ.Код2010;
			ТекущийОбъет.КодДоходаСтраховыеВзносы					= Справочники.ВидыДоходовПоСтраховымВзносам.ДоговорыГПХ;
			ТекущийОбъет.КодДоходаСтраховыеВзносы2017				= Справочники.ВидыДоходовПоСтраховымВзносам.ДоговорыГПХ;
			ТекущийОбъет.ПериодРасчетаБазовыхНачислений 			= Перечисления.ПериодыРасчетаБазовыхНачислений.ПредыдущийМесяц;
			ТекущийОбъет.СдвигБазовогоПериода 						= 1;
			ТекущийОбъет.СпособВыполненияНачисления 				= Перечисления.СпособыВыполненияНачислений.ПоОтдельномуДокументуДоОкончательногоРасчета;
			ТекущийОбъет.СпособРасчета 								= Перечисления.СпособыРасчетаНачислений.ПроизвольнаяФормула;
			ТекущийОбъет.Рассчитывается 	                        = Ложь;
			Попытка       				
				ТекущийОбъет.Записать();
				// Заполнение базы в Удержании по исп. листам
				НайденнаяБаза = БазовыеВидыРасчета.НайтиСтроки(Новый Структура("ВидРасчета",ТекущийОбъет.Ссылка));
				Если НайденнаяБаза.Количество() = 0 Тогда 
					НовыйВидРасчета = БазовыеВидыРасчета.Добавить();
					НовыйВидРасчета.ВидРасчета = ТекущийОбъет.Ссылка;
					НовыйВидРасчета.Предопределенный = Ложь;					
				КонецЕсли;
				
				// Создание Способа отражения
				Если Не ЗначениеЗаполнено(ТекущийОбъет.СпособОтраженияЗарплатыВБухучете) Тогда					
					НайденныйСпособОтраженияЗарплатыВБухучете = Справочники.СпособыОтраженияЗарплатыВБухУчете.НайтиПоНаименованию(СокрЛП(Строка.name) + " (RP1_" + СокрЛП(Строка.id) + ")");					
					Если ЗначениеЗаполнено(НайденныйСпособОтраженияЗарплатыВБухучете) Тогда                                                                                                 						
						ТекущийОбъет.СпособОтраженияЗарплатыВБухучете = НайденныйСпособОтраженияЗарплатыВБухучете;						
					Иначе                                                                                         						
						НовыйСОЗВБ = Справочники.СпособыОтраженияЗарплатыВБухУчете.СоздатьЭлемент();
						НовыйСОЗВБ.Наименование = СокрЛП(Строка.name) + " (RP1_" + СокрЛП(Строка.id) + ")";       						
						Если НовыйСОЗВБ.ДополнительныеРеквизиты.Количество() = 0 Тогда                            							
							НовыйРеквизит = НовыйСОЗВБ.ДополнительныеРеквизиты.Добавить();
							НовыйРеквизит.Свойство = ПланыВидовХарактеристик.ДополнительныеРеквизитыИСведения.НайтиПоНаименованию("СчетДт (Способы отражения в бух. учете)").Ссылка;
							НовыйРеквизит.Значение = "26.01.1";
							
							НовыйРеквизит = НовыйСОЗВБ.ДополнительныеРеквизиты.Добавить();
							НовыйРеквизит.Свойство = ПланыВидовХарактеристик.ДополнительныеРеквизитыИСведения.НайтиПоНаименованию("СчетКт (Способы отражения в бух. учете)").Ссылка;
							НовыйРеквизит.Значение = "78.07";							                          							
						КонецЕсли;	    						
						НовыйСОЗВБ.Записать();						
						ТекущийОбъет.СпособОтраженияЗарплатыВБухучете = НовыйСОЗВБ.Ссылка;						
					КонецЕсли;					                                          					
					ТекущийОбъет.Записать();                                              					
				КонецЕсли;    
				
				// Настройка регистра соовтетсвтия Вида расчета и Типа КВ
				МенеджерЗаписи = РегистрыСведений.ППФ_СоответствиеВидовРасчетаТипуКомиссионногоВознаграждения.СоздатьМенеджерЗаписи();
				МенеджерЗаписи.ВидРасчета = ТекущийОбъет.Ссылка;
				МенеджерЗаписи.ТипКомиссионногоВознаграждения = СокрЛП(Строка.shortcut);
				Попытка
					МенеджерЗаписи.Записать(Истина);
				Исключение					
					ЗаписьЖурналаРегистрации("Загрузка типов комиссионных вознаграждений RP1", УровеньЖурналаРегистрации.Ошибка, ТекущийОбъет, ТекущийОбъет.Ссылка, ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
				КонецПопытки;
			Исключение
				ЗаписьЖурналаРегистрации("Загрузка типов комиссионных вознаграждений RP1", УровеньЖурналаРегистрации.Ошибка, ТекущийОбъет, ТекущийОбъет.Ссылка, ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
			КонецПопытки;
			
		КонецЦикла;
		
		Попытка
			УдержаниеПоИспЛистамОбъект.Записать();
		Исключение
			ЗаписьЖурналаРегистрации("Загрузка типов комиссионных вознаграждений RP1", УровеньЖурналаРегистрации.Ошибка, УдержаниеПоИспЛистамОбъект, УдержаниеПоИспЛистам, ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
		КонецПопытки;

		
	КонецЕсли;
	
КонецПроцедуры