/////////////////////////////////////////////////////////////////////////////
// ОПИСАНИЕ ИНТЕРФЕЙСОВ

// Интерфейс для регистрации обработки.
// Вызывается при добавлении обработки в справочник "ВнешниеОбработки"
//
// Возвращаемое значение:
// Структура:
// Вид - строка - возможные значения:	"ДополнительнаяОбработка"
//										"ДополнительныйОтчет"
//										"ЗаполнениеОбъекта"
//										"Отчет"
//										"ПечатнаяФорма"
//										"СозданиеСвязанныхОбъектов"
//
// Назначение - массив строк имен объектов метаданных в формате:
//			<ИмяКлассаОбъектаМетаданного>.[ * | <ИмяОбъектаМетаданных>]
//			Например, "Документ.СчетЗаказ" или "Справочник.*"
//			Прим. параметр имеет смысл только для назначаемых обработок
//
// Наименование - строка - наименование обработки, которым будет заполнено
//						наименование справочника по умолчанию - краткая строка для
//						идентификации обработки администратором
//
// Версия - строка - версия обработки в формате <старший номер>.<младший номер>
//					используется при загрузке обработок в информационную базу
// БезопасныйРежим – Булево – Если истина, обработка будет запущена в безопасном режиме.
//							Более подбробная информация в справке.
//
// Информация - Строка- краткая информация по обработке, описание обработки
//
// Команды - ТаблицаЗначений - команды, поставляемые обработкой, одная строка таблицы соотвествует
//							одной команде
//				колонки: 
//				 - Представление - строка - представление команды конечному пользователю
//				 - Идентификатор - строка - идентефикатор команды. В случае печатных форм
//											перечисление через запятую списка макетов
//				 - Использование - строка - варианты запуска обработки:
//						"ОткрытиеФормы" - открыть форму обработки
//						"ВызовКлиентскогоМетода" - вызов клиентского экспортного метода из формы обработки
//						"ВызовСерверногоМетода" - вызов серверного экспортного метода из модуля объекта обработки
//				 - ПоказыватьОповещение – Булево – если Истина, требуется оказывать оповещение при начале
//								и при окончании запуска обработки. Прим. Имеет смысл только
//								при запуске обработки без открытия формы.
//				 - Модификатор – строка - для печатных форм MXL, которые требуется
//										отображать в форме ПечатьДокументов подсистемы Печать
//										требуется установить как "ПечатьMXL"
//
Функция СведенияОВнешнейОбработке() Экспорт
	
	ПараметрыРегистрации = Новый Структура;
	
	ПараметрыРегистрации.Вставить("Вид", "ДополнительнаяОбработка");
	ПараметрыРегистрации.Вставить("Назначение", Неопределено);
	ПараметрыРегистрации.Вставить("Наименование", НСтр("ru = 'Выгрузка файлов в банк'"));
	ПараметрыРегистрации.Вставить("Версия", "0.1");
	ПараметрыРегистрации.Вставить("БезопасныйРежим", Ложь);
	ПараметрыРегистрации.Вставить("Информация", НСтр("ru = 'Выгрузка файлов в банк'"));
	
	ТаблицаКоманд = ПолучитьТаблицуКоманд();
		
	ДобавитьКоманду(ТаблицаКоманд,
					НСтр("ru = 'Выгрузка файлов в банк'"),
					"ВыгрузкаФайловВБанк",
					"ОткрытиеФормы");
	
	ПараметрыРегистрации.Вставить("Команды", ТаблицаКоманд);
	
	Возврат ПараметрыРегистрации;
	
КонецФункции

/////////////////////////////////////////////////////////////////////////////
// ВСПОМОГАТЕЛЬНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ

Функция ПолучитьТаблицуКоманд()
	
	Команды = Новый ТаблицаЗначений;
	Команды.Колонки.Добавить("Представление", Новый ОписаниеТипов("Строка"));
	Команды.Колонки.Добавить("Идентификатор", Новый ОписаниеТипов("Строка"));
	Команды.Колонки.Добавить("Использование", Новый ОписаниеТипов("Строка"));
	Команды.Колонки.Добавить("ПоказыватьОповещение", Новый ОписаниеТипов("Булево"));
	Команды.Колонки.Добавить("Модификатор", Новый ОписаниеТипов("Строка"));
	
	Возврат Команды;
	
КонецФункции

Процедура ДобавитьКоманду(ТаблицаКоманд, Представление, Идентификатор, Использование, ПоказыватьОповещение = Ложь, Модификатор = "")
	
	НоваяКоманда = ТаблицаКоманд.Добавить();
	НоваяКоманда.Представление = Представление;
	НоваяКоманда.Идентификатор = Идентификатор;
	НоваяКоманда.Использование = Использование;
	НоваяКоманда.ПоказыватьОповещение = ПоказыватьОповещение;
	НоваяКоманда.Модификатор = Модификатор;
	
КонецПроцедуры


/////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ПО СБОРУ ДАННЫХ ПО ДОКУМЕНТАМ

Функция ВыгрузитьФайлыДляОбменаСБанком(ФорматФайла, МассивДокументов, АдресХранилища, НомерФайла,УникальныйИдентификаторФормы) Экспорт
	
	ВыгрузитьФайлыДляОбменаСБанком_МодульОбъекта(ФорматФайла,МассивДокументов, АдресХранилища,НомерФайла);
	Возврат ОбменСБанкамиПоЗарплатнымПроектам.МассивОписанийПередаваемыхФайлов(АдресХранилища,УникальныйИдентификаторФормы);
	
КонецФункции

// Помещает во временное хранилище массив документов, к которым были присоединены файлы.
//
// Параметры:
//		МассивДокументов - массив документов, по которым создаются файлы.
//		АдресХранилища - адрес хранилища, куда будет помещен массив документов, к которым были присоединены файлы.
//
Процедура ВыгрузитьФайлыДляОбменаСБанком_МодульОбъекта(ФорматФайла, МассивДокументов, АдресХранилища,НомерФайла) Экспорт
	
	МассивОписанийФайлов = Новый Массив;
	
	МетаданныеПлатежногоДокумента = ОбменСБанкамиПоЗарплатнымПроектам.МетаданныеПлатежногоДокументаПеречисленияЗарплаты();
	МассивПлатежныхДокументов = Новый Массив;
	МассивОбычныхДокументов = Новый Массив;
	Если МассивДокументов.Количество() > 0 Тогда
		Для каждого ДокументМассива Из МассивДокументов Цикл
			МетаданныеДокумента = ДокументМассива.Метаданные();
			Если (МетаданныеПлатежногоДокумента = Неопределено 
				Или МетаданныеДокумента.ПолноеИмя() <> МетаданныеПлатежногоДокумента.ПолноеИмя()) Тогда
				МассивОбычныхДокументов.Добавить(ДокументМассива);
			Иначе
				МассивПлатежныхДокументов.Добавить(ДокументМассива);
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	Если МассивОбычныхДокументов.Количество() > 0 Тогда
		ВыгрузитьФайлыДляОбменаСБанком_ПрикреплениеФайла(ФорматФайла,МассивОбычныхДокументов, МассивОписанийФайлов,,НомерФайла);
	КонецЕсли;
	Если МассивПлатежныхДокументов.Количество() > 0 Тогда
		Для каждого ПлатежныйДокумент Из МассивПлатежныхДокументов Цикл
			ВыгрузитьФайлыДляОбменаСБанком_ПрикреплениеФайла(ФорматФайла,
				ВедомостиПлатежногоДокументаПеречисленияЗарплаты(ПлатежныйДокумент), МассивОписанийФайлов, ПлатежныйДокумент,НомерФайла);
		КонецЦикла;
	КонецЕсли;
	
	ПоместитьВоВременноеХранилище(МассивОписанийФайлов, АдресХранилища);
	
КонецПроцедуры

// Формирует и прикрепляет файл обмена к документам с помощью подсистемы "Файлы".
//
// Параметры:
//		МассивДокументов - Массив ссылок на документы, по которым требуется сформировать файл.
//		МассивОписанийФайлов - Массив описаний сформированных файлов.
//
Процедура ВыгрузитьФайлыДляОбменаСБанком_ПрикреплениеФайла(ФорматФайла, МассивДокументов, МассивОписанийФайлов, ПлатежныйДокумент = Неопределено,НомерФайла) Экспорт
	
	Отказ = Ложь;
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("МассивДокументов", МассивДокументов);
	Запрос.УстановитьПараметр("ПлатежныйДокумент", ПлатежныйДокумент);
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ВедомостьНаВыплатуЗарплатыВБанк.Ссылка КАК Ведомость,
	|	ВедомостьНаВыплатуЗарплатыВБанк.ЗарплатныйПроект КАК ЗарплатныйПроект,
	|	ВедомостьНаВыплатуЗарплатыВБанк.Проведен КАК Проведен,
	|	ПлатежныеДокументыПеречисленияЗарплаты.ПлатежныйДокумент КАК ПлатежныйДокумент
	|ИЗ
	|	Документ.ВедомостьНаВыплатуЗарплатыВБанк КАК ВедомостьНаВыплатуЗарплатыВБанк
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ПлатежныеДокументыПеречисленияЗарплаты КАК ПлатежныеДокументыПеречисленияЗарплаты
	|		ПО ВедомостьНаВыплатуЗарплатыВБанк.Ссылка = ПлатежныеДокументыПеречисленияЗарплаты.Ведомость
	|			И (ПлатежныеДокументыПеречисленияЗарплаты.ПлатежныйДокумент <> &ПлатежныйДокумент)
	|ГДЕ
	|	ВедомостьНаВыплатуЗарплатыВБанк.Ссылка В(&МассивДокументов)";
	
	ЗарплатныйПроект = Неопределено;
	ВДокументахОдинЗарплатныйПроект = Истина;
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		Если ЗначениеЗаполнено(Выборка.ПлатежныйДокумент) Тогда
			ТекстОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = '%1 уже включена в %2'"),
				Выборка.Ведомость, Выборка.ПлатежныйДокумент);
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстОшибки, Выборка.ПлатежныйДокумент, , , Отказ);
		КонецЕсли;
		Если Не Выборка.Проведен Тогда
			ТекстОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
					НСтр("ru = 'Документ %1 не проведен.'"), Выборка.Ведомость);
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстОшибки, Выборка.Ведомость,,, Отказ);
		КонецЕсли;
		Если ЗарплатныйПроект = Неопределено Тогда
			ЗарплатныйПроект = Выборка.ЗарплатныйПроект;
		ИначеЕсли ЗарплатныйПроект <> Выборка.ЗарплатныйПроект Тогда
			ВДокументахОдинЗарплатныйПроект = Ложь;
		КонецЕсли;
		Если НЕ ОбменСБанкамиПоЗарплатнымПроектам.ИспользоватьЭОИСБанком(Выборка.ЗарплатныйПроект) Тогда
			Если ЗначениеЗаполнено(Выборка.ЗарплатныйПроект) Тогда
				ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
					НСтр("ru = 'По зарплатному проекту %1 не используется обмен электронными документами с банком.'"),
					Выборка.ЗарплатныйПроект);
			Иначе
				ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
					НСтр("ru = 'В документе %1 не выбран зарплатный проект.'"), Выборка.Ведомость);
			КонецЕсли;
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
					ТекстСообщения, Выборка.ЗарплатныйПроект, "ИспользоватьЭлектронныйДокументооборотСБанком",,Отказ);
		КонецЕсли;
	КонецЦикла;
	Если ПлатежныйДокумент <> Неопределено Тогда
		Если НЕ ПлатежныйДокумент.Проведен Тогда
			ТекстОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
					НСтр("ru = 'Документ %1 не проведен.'"), ПлатежныйДокумент);
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстОшибки, ПлатежныйДокумент,,, Отказ);
		КонецЕсли;
		
		Если Не ВДокументахОдинЗарплатныйПроект Тогда
			ТекстОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
					НСтр("ru = 'В документе %1 присутствуют ведомости с разными зарплатными проектами. Файл по документу не сформирован.'"), ПлатежныйДокумент);
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстОшибки, Выборка.Ведомость,,, Отказ);
		КонецЕсли;
	КонецЕсли;
	
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	ВидОперации = "ВедомостьНаВыплатуЗарплатыВБанк";
	ДатаПолученияДанных = ТекущаяДатаСеанса();
	СтруктураПараметровДляФормированияФайла = Новый Структура;
	СтруктураПараметровДляФормированияФайла.Вставить("ВидОперации", ВидОперации);
	СтруктураПараметровДляФормированияФайла.Вставить("ДанныеШапки", ДанныеШапкиДокументовДляПолученияТекстаФайла(МассивДокументов, ДатаПолученияДанных, ПлатежныйДокумент));
	СтруктураПараметровДляФормированияФайла.Вставить("ДанныеСтрок", ДанныеСтрокДокументовДляПолученияТекстаФайла(МассивДокументов, ДатаПолученияДанных, ПлатежныйДокумент));
	СтруктураПараметровДляФормированияФайла.Вставить("КорневыеСвойства", ОбменСБанкамиПоЗарплатнымПроектам.КорневыеСвойства(ВидОперации));
	СтруктураПараметровДляФормированияФайла.Вставить("СоответствиеПолейФайла", ОбменСБанкамиПоЗарплатнымПроектам.СоответствиеПолейФайла(ВидОперации));
	СтруктураПараметровДляФормированияФайла.Вставить("ОбязательныеПоляФайла", ОбменСБанкамиПоЗарплатнымПроектам.ОбязательныеПоляФайла(ВидОперации));
	СтруктураПараметровДляФормированияФайла.Вставить("СоответствиеПреобразованияЗначений", ОбменСБанкамиПоЗарплатнымПроектам.СоответствиеПреобразованияЗначений(ВидОперации));
	СтруктураПараметровДляФормированияФайла.Вставить("СоответствиеТипов", ОбменСБанкамиПоЗарплатнымПроектам.СоответствиеТипов(ВидОперации));
	СтруктураПараметровДляФормированияФайла.Вставить("ПлатежныйДокумент", ПлатежныйДокумент);
	
	СоздатьФайлыДляОбменаСБанком(ФорматФайла, МассивДокументов, МассивОписанийФайлов, СтруктураПараметровДляФормированияФайла,НомерФайла);
	
КонецПроцедуры

Функция ВедомостиПлатежногоДокументаПеречисленияЗарплаты(ПлатежныйДокумент) Экспорт
	
	СтандартнаяОбработка = Истина;
	МассивВедомостей = Новый Массив;
	ОбменСБанкамиПоЗарплатнымПроектамПереопределяемый.ВедомостиПлатежногоДокументаПеречисленияЗарплаты(
		ПлатежныйДокумент, МассивВедомостей, СтандартнаяОбработка);
	
	Если Не СтандартнаяОбработка Тогда
		Возврат МассивВедомостей;
	КонецЕсли;
	
	Если ОбщегоНазначения.ПодсистемаСуществует("ЗарплатаКадрыПриложения.ВнешниеХозяйственныеОперации.ВзаиморасчетыССотрудникамиВХО") Тогда
		Модуль = ОбщегоНазначения.ОбщийМодуль("ВзаиморасчетыССотрудникамиВХО");
		Модуль.ВедомостиПлатежногоДокументаПеречисленияЗарплаты(ПлатежныйДокумент, МассивВедомостей);
	КонецЕсли;
	
	Возврат МассивВедомостей;
	
КонецФункции

// Получает данные документов для формирования файла обмена.
//
// Параметры:
//		МассивДокументов - Массив ссылок на документы, по которым требуется получить данные.
//		ДатаПолученияДанных - дата формирования файла.
//		ПлатежныйДокумент - Ссылка на платежный документ, в который входят ведомости.
//
// Возвращаемое значение:
//		Таблица значений "ДанныеШапкиДокумента" - содержит данные документа.
//
Функция ДанныеШапкиДокументовДляПолученияТекстаФайла(МассивДокументов, ДатаПолученияДанных, ПлатежныйДокумент = Неопределено)
	
	Запрос = Новый Запрос;
	
	Запрос.УстановитьПараметр("ВедомостиНаВыплатуЗарплатыВБанк", МассивДокументов);
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ВедомостьНаВыплатуЗарплатыВБанк.Ссылка КАК Документ,
	|	ВедомостьНаВыплатуЗарплатыВБанк.Номер КАК НомерДокумента,
	|	ВедомостьНаВыплатуЗарплатыВБанк.Дата КАК ДатаДокумента,
	|	ВЫБОР
	|		КОГДА Организации.НаименованиеПолное ПОДОБНО """"
	|			ТОГДА Организации.Наименование
	|		ИНАЧЕ Организации.НаименованиеПолное
	|	КОНЕЦ КАК ПолноеНаименованиеОрганизации,
	|	Организации.ИНН КАК ИННОрганизации,
	|	ЗарплатныеПроекты.Ссылка КАК ЗарплатныйПроект,
	|	ЗарплатныеПроекты.НомерДоговора КАК НомерДоговора,
	|	ЗарплатныеПроекты.ДатаДоговора КАК ДатаДоговора,
	|	ЗарплатныеПроекты.ОтделениеБанка КАК ОтделениеБанка,
	|	КлассификаторБанковРФ.Код КАК БИКБанка,
	|	ЗарплатныеПроекты.РасчетныйСчет КАК НомерРасчетногоСчетаОрганизации,
	|	ЗарплатныеПроекты.ФорматФайла КАК ФорматФайла,
	|	""01"" КАК ВидЗачисления,
	|	ИтоговыеДанныеПоВедомости.КоличествоЗаписей,
	|	ИтоговыеДанныеПоВедомости.СуммаИтого
	|ИЗ
	|	Документ.ВедомостьНаВыплатуЗарплатыВБанк КАК ВедомостьНаВыплатуЗарплатыВБанк
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Организации КАК Организации
	|		ПО ВедомостьНаВыплатуЗарплатыВБанк.Организация = Организации.Ссылка
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ЗарплатныеПроекты КАК ЗарплатныеПроекты
	|		ПО ВедомостьНаВыплатуЗарплатыВБанк.ЗарплатныйПроект = ЗарплатныеПроекты.Ссылка
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.КлассификаторБанков КАК КлассификаторБанковРФ
	|		ПО (ЗарплатныеПроекты.Банк = КлассификаторБанковРФ.Ссылка)
	|		ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
	|			ДанныеВедомостейДляОплатыЧерезБанк.Ссылка КАК Ведомость,
	|			КОЛИЧЕСТВО(ДанныеВедомостейДляОплатыЧерезБанк.Сотрудник.ФизическоеЛицо) КАК КоличествоЗаписей,
	|			СУММА(ДанныеВедомостейДляОплатыЧерезБанк.КВыплате + ДанныеВедомостейДляОплатыЧерезБанк.КомпенсацияЗаЗадержкуЗарплаты) КАК СуммаИтого
	|		ИЗ
	|			Документ.ВедомостьНаВыплатуЗарплатыВБанк.Зарплата КАК ДанныеВедомостейДляОплатыЧерезБанк
	|		ГДЕ
	|			ДанныеВедомостейДляОплатыЧерезБанк.Ссылка В(&ВедомостиНаВыплатуЗарплатыВБанк)
	|		
	|		СГРУППИРОВАТЬ ПО
	|			ДанныеВедомостейДляОплатыЧерезБанк.Ссылка) КАК ИтоговыеДанныеПоВедомости
	|		ПО ВедомостьНаВыплатуЗарплатыВБанк.Ссылка = ИтоговыеДанныеПоВедомости.Ведомость
	|ГДЕ
	|	ВедомостьНаВыплатуЗарплатыВБанк.Проведен
	|	И ВедомостьНаВыплатуЗарплатыВБанк.Ссылка В(&ВедомостиНаВыплатуЗарплатыВБанк)";
	
	ДанныеШапкиДокумента = Запрос.Выполнить().Выгрузить();
	
	// ИдПервичногоДокумента
	ДанныеШапкиДокумента.Колонки.Добавить("ИдПервичногоДокумента");
	
	// Номер и дата платежного поручения.
	ДанныеШапкиДокумента.Колонки.Добавить("НомерПлатежногоПоручения");
	ДанныеШапкиДокумента.Колонки.Добавить("ДатаПлатежногоПоручения");
	
	// ДатаФормирования
	ДанныеШапкиДокумента.Колонки.Добавить("ДатаФормирования");
	
	// ИмяФайла
	ДанныеШапкиДокумента.Колонки.Добавить("ИмяФайла");
	
	// ДанныеРеестра
	ДанныеШапкиДокумента.Колонки.Добавить("ДанныеРеестра");
	
	РеквизитыПлатежногоДокумента = Неопределено;
	Если ПлатежныйДокумент <> Неопределено Тогда 
		РеквизитыПлатежногоДокумента = Новый Структура("ПлатежныйДокумент, Номер, Дата", ПлатежныйДокумент, "", ДатаПолученияДанных);
		Выборка = РегистрыСведений.РеквизитыПлатежныхДокументовПеречисленияЗарплаты.Выбрать(Новый Структура("ПлатежныйДокумент", ПлатежныйДокумент));
		Если Выборка.Следующий() Тогда 
			ЗаполнитьЗначенияСвойств(РеквизитыПлатежногоДокумента, Выборка);
		КонецЕсли;
	КонецЕсли;
	
	НомераРеестров = НомераРеестровДокументов(ДанныеШапкиДокумента, РеквизитыПлатежногоДокумента);
	
	КоличествоЗаписей = Неопределено;
	СуммаИтого = Неопределено;
	Для каждого СтрокаДанных Из ДанныеШапкиДокумента Цикл
		Если КоличествоЗаписей = Неопределено Тогда
			КоличествоЗаписей = ДанныеШапкиДокумента.Итог("КоличествоЗаписей");
		КонецЕсли;
		Если СуммаИтого = Неопределено Тогда
			СуммаИтого = ДанныеШапкиДокумента.Итог("СуммаИтого");
		КонецЕсли;
		СтрокаДанных.ДатаФормирования = ДатаПолученияДанных;
		Если ПлатежныйДокумент <> Неопределено Тогда
			СтрокаДанных.ИдПервичногоДокумента = ПлатежныйДокумент.УникальныйИдентификатор();
			СтрокаДанных.НомерПлатежногоПоручения = РеквизитыПлатежногоДокумента.Номер;
			СтрокаДанных.ДатаПлатежногоПоручения = РеквизитыПлатежногоДокумента.Дата;
			СтрокаДанных.ДатаДокумента = РеквизитыПлатежногоДокумента.Дата;
			СтрокаДанных.КоличествоЗаписей = КоличествоЗаписей;
			СтрокаДанных.СуммаИтого = СуммаИтого;
			СтрокаДанных.ДанныеРеестра = НомераРеестров[ПлатежныйДокумент];
			НомерРеестра = СтрЗаменить(СтрокаДанных.ДанныеРеестра.НомерРеестра, Символы.НПП, "");
			СтрокаДанных.НомерДокумента = НомерРеестра;
			НомерРеестра = СтроковыеФункцииКлиентСервер.ДополнитьСтроку(НомерРеестра, 3);
			СтрокаДанных.ИмяФайла = ОбменСБанкамиПоЗарплатнымПроектам.ИмяФайлаОбменаСБанкамиПоЗарплатнымПроектам(ПлатежныйДокумент, СтрокаДанных.ОтделениеБанка, НомерРеестра, "z");
		Иначе
			СтрокаДанных.ИдПервичногоДокумента = СтрокаДанных.Документ.УникальныйИдентификатор();
			СтрокаДанных.ДанныеРеестра = НомераРеестров[СтрокаДанных.Документ];
			НомерРеестра = СтрЗаменить(СтрокаДанных.ДанныеРеестра.НомерРеестра, Символы.НПП, "");
			СтрокаДанных.НомерДокумента = НомерРеестра;
			НомерРеестра = СтроковыеФункцииКлиентСервер.ДополнитьСтроку(НомерРеестра, 3);
			СтрокаДанных.ИмяФайла = ОбменСБанкамиПоЗарплатнымПроектам.ИмяФайлаОбменаСБанкамиПоЗарплатнымПроектам(СтрокаДанных.Документ, СтрокаДанных.ОтделениеБанка, НомерРеестра, "z");
		КонецЕсли;
		ОбменСБанкамиПоЗарплатнымПроектамПереопределяемый.ЗаполнитьДанныеОплатыВедомостей(
			СтрокаДанных.Документ, СтрокаДанных.НомерПлатежногоПоручения, СтрокаДанных.ДатаПлатежногоПоручения, ПлатежныйДокумент);
		
		ОбменСБанкамиПоЗарплатнымПроектамПереопределяемый.ОпределитьДанныеШапкиДокументаДляПолученияТекстаФайла(СтрокаДанных, СтрокаДанных.Документ, ДатаПолученияДанных);
		
	КонецЦикла;
	
	Возврат ДанныеШапкиДокумента;
	
КонецФункции

// Определяет номера реестров для документов.
//
Функция НомераРеестровДокументов(ТаблицаДокументов, РеквизитыПлатежногоДокумента)

	ДокументыВыгрузки = Новый Массив;
	
	ГодыВыгрузки = Новый Массив;
	УникальныеГодыВыгрузки = Новый Соответствие;
	
	Если РеквизитыПлатежногоДокумента = Неопределено Тогда 
		Для Каждого ДанныеШапки Из ТаблицаДокументов Цикл 
			ДокументыВыгрузки.Добавить(ДанныеШапки.Документ);
			ГодВыгрузки = Год(ДанныеШапки.ДатаДокумента);
			Если УникальныеГодыВыгрузки[ГодВыгрузки] = Неопределено Тогда 
				УникальныеГодыВыгрузки.Вставить(ГодВыгрузки, Истина);
				ГодыВыгрузки.Добавить(ГодВыгрузки);
			КонецЕсли;
		КонецЦикла;
	Иначе 
		ДокументыВыгрузки.Добавить(РеквизитыПлатежногоДокумента.ПлатежныйДокумент);
		ГодыВыгрузки.Добавить(Год(РеквизитыПлатежногоДокумента.Дата));
	КонецЕсли;
	
	УстановитьПривилегированныйРежим(Истина);
	
	Запрос = Новый Запрос;
	
	Запрос.УстановитьПараметр("ГодыВыгрузки", ГодыВыгрузки);
	Запрос.УстановитьПараметр("ДокументыВыгрузки", ДокументыВыгрузки);
	
	Запрос.Текст = "ВЫБРАТЬ
	               |	СостоянияДокументовЗачисленияЗарплаты.ДокументЗачисленияЗарплаты КАК Документ,
	               |	СостоянияДокументовЗачисленияЗарплаты.Год,
	               |	СостоянияДокументовЗачисленияЗарплаты.НомерРеестра
	               |ПОМЕСТИТЬ ВТВыгружаемыеДокументы
	               |ИЗ
	               |	РегистрСведений.СостоянияДокументовЗачисленияЗарплаты КАК СостоянияДокументовЗачисленияЗарплаты
	               |ГДЕ
	               |	СостоянияДокументовЗачисленияЗарплаты.ДокументЗачисленияЗарплаты В(&ДокументыВыгрузки)
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	РеквизитыПлатежныхДокументовПеречисленияЗарплаты.Организация,
	               |	РеквизитыПлатежныхДокументовПеречисленияЗарплаты.Дата КАК Дата,
	               |	ВыгружаемыеДокументы.Документ,
	               |	ВыгружаемыеДокументы.Год,
	               |	ВыгружаемыеДокументы.НомерРеестра
	               |ИЗ
	               |	ВТВыгружаемыеДокументы КАК ВыгружаемыеДокументы
	               |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.РеквизитыПлатежныхДокументовПеречисленияЗарплаты КАК РеквизитыПлатежныхДокументовПеречисленияЗарплаты
	               |		ПО ВыгружаемыеДокументы.Документ = РеквизитыПлатежныхДокументовПеречисленияЗарплаты.ПлатежныйДокумент
	               |
	               |ОБЪЕДИНИТЬ ВСЕ
	               |
	               |ВЫБРАТЬ
	               |	ВедомостьНаВыплатуЗарплатыВБанк.Организация,
	               |	ВедомостьНаВыплатуЗарплатыВБанк.Дата,
	               |	ВыгружаемыеДокументы.Документ,
	               |	ВыгружаемыеДокументы.Год,
	               |	ВыгружаемыеДокументы.НомерРеестра
	               |ИЗ
	               |	ВТВыгружаемыеДокументы КАК ВыгружаемыеДокументы
	               |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ВедомостьНаВыплатуЗарплатыВБанк КАК ВедомостьНаВыплатуЗарплатыВБанк
	               |		ПО ВыгружаемыеДокументы.Документ = ВедомостьНаВыплатуЗарплатыВБанк.Ссылка
	               |
	               |УПОРЯДОЧИТЬ ПО
	               |	Дата";
				   
	Выборка = Запрос.Выполнить().Выбрать();			   
	
	Запрос.Текст = "ВЫБРАТЬ
	               |	СостоянияДокументовЗачисленияЗарплаты.ДокументЗачисленияЗарплаты КАК Документ,
	               |	СостоянияДокументовЗачисленияЗарплаты.Год,
	               |	СостоянияДокументовЗачисленияЗарплаты.НомерРеестра
	               |ПОМЕСТИТЬ ВТВыгруженныеДокументы
	               |ИЗ
	               |	РегистрСведений.СостоянияДокументовЗачисленияЗарплаты КАК СостоянияДокументовЗачисленияЗарплаты
	               |ГДЕ
	               |	СостоянияДокументовЗачисленияЗарплаты.Год В(&ГодыВыгрузки)
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	РеквизитыПлатежныхДокументовПеречисленияЗарплаты.Организация,
	               |	ВыгруженныеДокументы.Документ,
	               |	ВыгруженныеДокументы.Год,
	               |	ВыгруженныеДокументы.НомерРеестра
	               |ПОМЕСТИТЬ ВТДокументыПоОрганизациям
	               |ИЗ
	               |	ВТВыгруженныеДокументы КАК ВыгруженныеДокументы
	               |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.РеквизитыПлатежныхДокументовПеречисленияЗарплаты КАК РеквизитыПлатежныхДокументовПеречисленияЗарплаты
	               |		ПО ВыгруженныеДокументы.Документ = РеквизитыПлатежныхДокументовПеречисленияЗарплаты.ПлатежныйДокумент
	               |
	               |ОБЪЕДИНИТЬ ВСЕ
	               |
	               |ВЫБРАТЬ
	               |	ВедомостьНаВыплатуЗарплатыВБанк.Организация,
	               |	ВыгруженныеДокументы.Документ,
	               |	ВыгруженныеДокументы.Год,
	               |	ВыгруженныеДокументы.НомерРеестра
	               |ИЗ
	               |	ВТВыгруженныеДокументы КАК ВыгруженныеДокументы
	               |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ВедомостьНаВыплатуЗарплатыВБанк КАК ВедомостьНаВыплатуЗарплатыВБанк
	               |		ПО ВыгруженныеДокументы.Документ = ВедомостьНаВыплатуЗарплатыВБанк.Ссылка
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	ДокументыПоОрганизациям.Организация,
	               |	ДокументыПоОрганизациям.Год,
	               |	МАКСИМУМ(ДокументыПоОрганизациям.НомерРеестра) КАК НомерРеестра
	               |ИЗ
	               |	ВТДокументыПоОрганизациям КАК ДокументыПоОрганизациям
	               |
	               |СГРУППИРОВАТЬ ПО
	               |	ДокументыПоОрганизациям.Организация,
	               |	ДокументыПоОрганизациям.Год";
	
	НомераРеестровОрганизаций = Запрос.Выполнить().Выгрузить();
	
	УстановитьПривилегированныйРежим(Ложь);
	
	НомераРеестров = Новый Соответствие;
	
	Пока Выборка.Следующий() Цикл 
		Год = Год(Выборка.Дата);
		ДанныеРеестра = Новый Структура("Год, НомерРеестра", Год, Выборка.НомерРеестра);
		Если Не ЗначениеЗаполнено(Выборка.Год) Или Выборка.Год <> Год Тогда 
			ДанныеДокумента = Новый Структура("Организация, Год", Выборка.Организация, Год);
			НайденныеСтроки = НомераРеестровОрганизаций.НайтиСтроки(ДанныеДокумента);
			Если НайденныеСтроки.Количество() = 0 Тогда
				ДанныеДокумента.Вставить("НомерРеестра", 1);
				ЗаполнитьЗначенияСвойств(НомераРеестровОрганизаций.Добавить(), ДанныеДокумента);
			Иначе 
				ДанныеДокумента.Вставить("НомерРеестра", НайденныеСтроки[0].НомерРеестра + 1);
				НайденныеСтроки[0].НомерРеестра = ДанныеДокумента.НомерРеестра;
			КонецЕсли;
			ДанныеРеестра.НомерРеестра = ДанныеДокумента.НомерРеестра;
		КонецЕсли;
		НомераРеестров.Вставить(Выборка.Документ, ДанныеРеестра);
	КонецЦикла;
	
	Возврат НомераРеестров;
	
КонецФункции

// Получает данные строк документа для формирования файла обмена.
//
// Параметры:
//		МассивДокументов - Массив ссылок на документы, по которым требуется получить данные.
//		ДатаПолученияДанных - дата формирования файла.
//		ПлатежныйДокумент - Ссылка на платежный документ, в который входят ведомости.
//
// Возвращаемое значение:
//		Таблица значений "ДанныеСтрокДокумента" - содержит данные строк документа.
//
Функция ДанныеСтрокДокументовДляПолученияТекстаФайла(МассивДокументов, ДатаПолученияДанных, ПлатежныйДокумент = Неопределено)
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	Запрос.УстановитьПараметр("МассивДокументов", МассивДокументов);
	Запрос.УстановитьПараметр("ДатаПолученияДанных", ДатаПолученияДанных);
	
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
	|	&ДатаПолученияДанных КАК Период,
	|	ДанныеСотрудников.Сотрудник КАК Сотрудник
	|ПОМЕСТИТЬ ВТСписокСотрудников
	|ИЗ
	|	Документ.ВедомостьНаВыплатуЗарплатыВБанк.Зарплата КАК ДанныеСотрудников
	|ГДЕ
	|	ДанныеСотрудников.Ссылка В(&МассивДокументов)";
	
	Запрос.Выполнить();
	
	ОписательВременныхТаблиц = КадровыйУчет.ОписательВременныхТаблицДляСоздатьВТКадровыеДанныеСотрудников(Запрос.МенеджерВременныхТаблиц, "ВТСписокСотрудников");
	КадровыйУчет.СоздатьВТКадровыеДанныеСотрудников(ОписательВременныхТаблиц, Истина, "Фамилия,Имя,Отчество");
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ВедомостьНаВыплатуЗарплатыВБанк.Ссылка КАК Документ,
	|	ВедомостьНаВыплатуЗарплатыВБанк.Номер КАК НомерДокумента,
	|	ВедомостьНаВыплатуЗарплатыВБанк.Дата КАК ДатаДокумента,
	|	ВедомостьНаВыплатуЗарплатыВБанкЗарплата.Сотрудник.ФизическоеЛицо КАК ФизическоеЛицо,
	|	КадровыеДанныеСотрудников.Фамилия КАК Фамилия,
	|	КадровыеДанныеСотрудников.Имя КАК Имя,
	|	КадровыеДанныеСотрудников.Отчество КАК Отчество,
	|	ВедомостьНаВыплатуЗарплатыВБанкЗарплата.НомерЛицевогоСчета КАК НомерЛицевогоСчета,
	|	СУММА(ВедомостьНаВыплатуЗарплатыВБанкЗарплата.КВыплате + ВедомостьНаВыплатуЗарплатыВБанкЗарплата.КомпенсацияЗаЗадержкуЗарплаты) КАК СуммаКВыплате,
	|	ЗарплатныеПроекты.ОтделениеБанка КАК ОтделениеБанка,
	|	ЗарплатныеПроекты.ФилиалОтделенияБанка КАК ФилиалОтделенияБанка,
	|	ЗарплатныеПроекты.Валюта.Код КАК КодВалюты
	|ИЗ
	|	Документ.ВедомостьНаВыплатуЗарплатыВБанк КАК ВедомостьНаВыплатуЗарплатыВБанк
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.ВедомостьНаВыплатуЗарплатыВБанк.Зарплата КАК ВедомостьНаВыплатуЗарплатыВБанкЗарплата
	|		ПО ВедомостьНаВыплатуЗарплатыВБанк.Ссылка = ВедомостьНаВыплатуЗарплатыВБанкЗарплата.Ссылка
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ЗарплатныеПроекты КАК ЗарплатныеПроекты
	|		ПО ВедомостьНаВыплатуЗарплатыВБанк.ЗарплатныйПроект = ЗарплатныеПроекты.Ссылка
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТКадровыеДанныеСотрудников КАК КадровыеДанныеСотрудников
	|		ПО (ВедомостьНаВыплатуЗарплатыВБанкЗарплата.Сотрудник = КадровыеДанныеСотрудников.Сотрудник)
	|ГДЕ
	|	ВедомостьНаВыплатуЗарплатыВБанк.Проведен
	|	И ВедомостьНаВыплатуЗарплатыВБанк.Ссылка В(&МассивДокументов)
	|
	|СГРУППИРОВАТЬ ПО
	|	ВедомостьНаВыплатуЗарплатыВБанк.Ссылка,
	|	КадровыеДанныеСотрудников.Фамилия,
	|	КадровыеДанныеСотрудников.Имя,
	|	КадровыеДанныеСотрудников.Отчество,
	|	ВедомостьНаВыплатуЗарплатыВБанкЗарплата.НомерЛицевогоСчета,
	|	ЗарплатныеПроекты.ОтделениеБанка,
	|	ЗарплатныеПроекты.ФилиалОтделенияБанка,
	|	ЗарплатныеПроекты.Валюта.Код,
	|	ВедомостьНаВыплатуЗарплатыВБанк.Номер,
	|	ВедомостьНаВыплатуЗарплатыВБанк.Дата,
	|	ВедомостьНаВыплатуЗарплатыВБанкЗарплата.Сотрудник.ФизическоеЛицо";
	
	ДанныеСтрокДокументов = Запрос.Выполнить().Выгрузить();
	
	НомерСтроки = 0;
	ОбменСБанкамиПоЗарплатнымПроектамПереопределяемый.ДополнитьКолонкиДанныхСтрокДокументов(ДанныеСтрокДокументов);
	Для каждого СтрокаДокумента Из ДанныеСтрокДокументов Цикл
		Если ЗначениеЗаполнено(ПлатежныйДокумент) Тогда
			НомерСтроки = НомерСтроки + 1;
			СтрокаДокумента.НомерСтроки = НомерСтроки;
		КонецЕсли;
		ОбменСБанкамиПоЗарплатнымПроектамПереопределяемый.ЗаполнитьКолонкиДанныхСтрокДокумента(СтрокаДокумента);
		Если СтрДлина(СтрокаДокумента.НомерЛицевогоСчета) <> 20 Тогда
			СообщениеОбОшибке = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
					НСтр("ru='По ведомости в банк №%2 от %3г. в строке №%4 у сотрудника %5 лицевой счет менее 20 цифр.
						|Если номер действительно не удовлетворяет этому требованию, возможно,
						|банк не поддерживает обмен по типовому стандарту - следует обратиться в банк'"), 
					СтрокаДокумента.НомерДокумента, 
					Формат(СтрокаДокумента.ДатаДокумента, "ДЛФ=D"),
					НомерСтроки,
					СтрокаДокумента.ФизическоеЛицо);
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(СообщениеОбОшибке, СтрокаДокумента.Документ,
				СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
					НСтр("ru = 'Зарплата[%1].%2'"),
					НомерСтроки-1,
					"НомерЛицевогоСчета"));
		КонецЕсли;
	КонецЦикла;
	
	ОбменСБанкамиПоЗарплатнымПроектамПереопределяемый.ОпределитьДанныеСтрокДокументовДляПолученияТекстаФайла(ДанныеСтрокДокументов, ДатаПолученияДанных);
	
	Возврат ДанныеСтрокДокументов;
	
КонецФункции
/////////////////////////////////////////////////////

/////////////////////////////////////////////////////
// ПРОЦЕДУРЫ ПО СОЗДАНИЮ ФАЙЛОВ

// Формирует и прикрепляет файл обмена к объекту с помощью подсистемы "Файлы".
//
// Параметры:
//		МассивДокументов - Массив ссылок на документы, для которых формируются файлы обмена.
//		МассивОписанийФайлов - Массив описаний сформированных файлов.
//		СтруктураПараметровДляФормированияФайла - Структура
//				ВидОперации
//				ДанныеШапки
//				ДанныеСтрок
//				КорневыеСвойства
//				СоответствиеПолейФайла
//				ОбязательныеПоляФайла
//				СоответствиеПреобразованияЗначений
//				СоответствиеТипов.
//
Процедура СоздатьФайлыДляОбменаСБанком(ФорматФайла, МассивДокументов, МассивОписанийФайлов, СтруктураПараметровДляФормированияФайла,НомерФайла) Экспорт
	
	Если СтруктураПараметровДляФормированияФайла.Свойство("ПлатежныйДокумент") И ЗначениеЗаполнено(СтруктураПараметровДляФормированияФайла.ПлатежныйДокумент) Тогда
		ДанныеШапкиДокумента = СтруктураПараметровДляФормированияФайла.ДанныеШапки[0];
		ДанныеСтрокДокумента = СтруктураПараметровДляФормированияФайла.ДанныеСтрок;
		ПрисоединитьФайлОбменаСБанкамиКОбъекту(ФорматФайла, СтруктураПараметровДляФормированияФайла.ПлатежныйДокумент, ДанныеШапкиДокумента, ДанныеСтрокДокумента, СтруктураПараметровДляФормированияФайла, МассивОписанийФайлов, НомерФайла);
	Иначе
		Для каждого ВыгружаемыйДокумент Из МассивДокументов Цикл
			ДанныеШапки = СтруктураПараметровДляФормированияФайла.ДанныеШапки.НайтиСтроки(Новый Структура("Документ", ВыгружаемыйДокумент));
			Для каждого ДанныеШапкиДокумента Из ДанныеШапки Цикл
				ДанныеСтрокДокумента = СтруктураПараметровДляФормированияФайла.ДанныеСтрок.НайтиСтроки(Новый Структура("Документ", ВыгружаемыйДокумент));
				ПрисоединитьФайлОбменаСБанкамиКОбъекту(ФорматФайла, ВыгружаемыйДокумент, ДанныеШапкиДокумента, ДанныеСтрокДокумента, СтруктураПараметровДляФормированияФайла, МассивОписанийФайлов, НомерФайла);
			КонецЦикла;
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры

// Прикрепляет файл обмена с банками к документу, если к документу уже прикреплен файл, то он будет заменен.
//
// Параметры:
//		ВладелецФайла - Ссылка на документ, к которому будет прикреплен файл.
//		ДанныеШапкиДокумента - коллекция полей шапки документа.
//		ДанныеСтрокДокумента - коллекция строк документа.
//		СтруктураПараметровДляФормированияФайла - Структура
//				ВидОперации
//				ДанныеШапки
//				ДанныеСтрок
//				КорневыеСвойства
//				СоответствиеПолейФайла
//				ОбязательныеПоляФайла
//				СоответствиеПреобразованияЗначений
//				СоответствиеТипов.
//		МассивОписанийФайлов - Массив описаний сформированных файлов.
//
Процедура ПрисоединитьФайлОбменаСБанкамиКОбъекту(ФорматФайла, ВладелецФайла, ДанныеШапкиДокумента, ДанныеСтрокДокумента, СтруктураПараметровДляФормированияФайла, МассивОписанийФайлов, НомерФайлаНаФорме) Экспорт
	
	НомерФайла =  ЭтотОбъект.НачальныйНомерФайла;
	
	Ошибки = Неопределено;
	ФайлОбменаСБанками = ФайлОбменаСБанкамиПоЗарплатнымПроектам(ФорматФайла, ДанныеШапкиДокумента, ДанныеСтрокДокумента, СтруктураПараметровДляФормированияФайла, Ошибки);
	
	Если Ошибки <> Неопределено Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьОшибкиПользователю(Ошибки);
		Возврат;
	КонецЕсли;
	
	УстановитьПривилегированныйРежим(Истина);
	
	Если ФорматФайла = "ППФ" Тогда 
		ИмяФайлаВыгрузки = "zup_export_" + Формат(ТекущаяДата(),"ДФ=yyMMdd")+"_"+НомерФайла+ ".txt";
		ПрисоединенныйФайл = ПрисоединенныеФайлы.ДобавитьФайл(
		ВладелецФайла, Лев(ИмяФайлаВыгрузки, СтрДлина(ИмяФайлаВыгрузки) - 4), Прав(ИмяФайлаВыгрузки, 3),,, ФайлОбменаСБанками.АдресФайла);
	ИначеЕсли ФорматФайла = "ХКФБ" Тогда 
		ИмяФайлаВыгрузки = "S2000_" + Формат(ТекущаяДата(),"ДФ=yyMMdd")+"_144000_"+НомерФайла+ ".csv";
		ПрисоединенныйФайл = ПрисоединенныеФайлы.ДобавитьФайл(
		ВладелецФайла, Лев(ИмяФайлаВыгрузки, СтрДлина(ИмяФайлаВыгрузки) - 4), Прав(ИмяФайлаВыгрузки, 3),,, ФайлОбменаСБанками.АдресФайла);
	КонецЕсли;		

	ОписаниеФайла = ПрисоединенныеФайлы.ПолучитьДанныеФайла(ПрисоединенныйФайл, ВладелецФайла.УникальныйИдентификатор(), Истина);
	ОписаниеФайла.Вставить("ВладелецФайла", ВладелецФайла);
	ОписаниеФайла.Вставить("Ссылка", ПрисоединенныйФайл);
	ОписаниеФайла.Вставить("ДвоичныеДанные", ФайлОбменаСБанками.ДвоичныеДанные);
	МассивОписанийФайлов.Добавить(ОписаниеФайла);
	
	ОбменСБанкамиПоЗарплатнымПроектам.ЗарегистрироватьСостояниеЗачисленияЗарплатыПоДокументу(ВладелецФайла, ДанныеШапкиДокумента.ДанныеРеестра);
	
	УстановитьПривилегированныйРежим(Ложь);
	
	ЭтотОбъект.НачальныйНомерФайла = НомерФайла + 1;
	
	НомерФайлаНаФорме = ЭтотОбъект.НачальныйНомерФайла;
	
КонецПроцедуры

// Получает адрес временного хранилища записываемого файла.
//
// Параметры:
//		ДанныеШапкиДокумента - коллекция полей шапки документа.
//		ДанныеСтрокДокумента - коллекция строк документа.
//		СтруктураПараметровДляФормированияФайла - Структура
//				ВидОперации
//				ДанныеШапки
//				ДанныеСтрок
//				КорневыеСвойства
//				СоответствиеПолейФайла
//				ОбязательныеПоляФайла
//				СоответствиеПреобразованияЗначений
//				СоответствиеТипов.
//		Ошибки - Структура ошибок, которые будут показаны пользователю.
//				Добавляются с помощью метода "ОбщегоНазначенияКлиентСервер.ДобавитьОшибкуПользователю".
//
// Возвращаемое значение:
//		АдресФайла - адрес временного хранилища записываемого файла.
//
Функция ФайлОбменаСБанкамиПоЗарплатнымПроектам(ФорматФайла, ДанныеШапкиДокумента, ДанныеСтрокДокумента, СтруктураПараметровДляФормированияФайла, Ошибки)
	
	АдресФайла = "";
	ОбменСБанкамиПоЗарплатнымПроектамПереопределяемый.ОпределитьАдресФайлаОбменаСБанкамиПоЗарплатнымПроектам(АдресФайла,
		ДанныеШапкиДокумента, ДанныеСтрокДокумента, СтруктураПараметровДляФормированияФайла.КорневыеСвойства,
		СтруктураПараметровДляФормированияФайла.СоответствиеПолейФайла, СтруктураПараметровДляФормированияФайла.ОбязательныеПоляФайла,
		СтруктураПараметровДляФормированияФайла.СоответствиеПреобразованияЗначений);
	Если ЭтоАдресВременногоХранилища(АдресФайла) Тогда
		Возврат АдресФайла;
	КонецЕсли;
	
	ФорматФайлаОбмена = ФорматФайла;
	ДвоичныеДанныеФайла = Неопределено;
	
	Если ФорматФайла = "ППФ" Тогда
		
		Если ДанныеСтрокДокумента.Количество() > 0 Тогда
			
			НачалоЭкспорта = ТекущаяДата();
			ЭкспортБанковскогоФайла(
			ДанныеСтрокДокумента,
			НачалоЭкспорта,
			ФорматФайлаОбмена, АдресФайла, ДвоичныеДанныеФайла);
			
		КонецЕсли;
		
	ИначеЕсли ФорматФайла = "ХКФБ" Тогда

		Если ДанныеСтрокДокумента.Количество() > 0 Тогда
			
			НачалоЭкспорта = ТекущаяДата();
			ЭкспортБанковскогоФайла(
			ДанныеСтрокДокумента,
			НачалоЭкспорта,
			ФорматФайлаОбмена,  АдресФайла, ДвоичныеДанныеФайла);			
			
		КонецЕсли;	
					
	КонецЕсли;
		
	Возврат Новый Структура("АдресФайла, ДвоичныеДанные", АдресФайла, ДвоичныеДанныеФайла);
	
КонецФункции

Процедура ЭкспортБанковскогоФайла(ТаблицаСотрудников,НачалоЭкспорта,ФорматФайлаОбмена, АдресФайла, ДвоичныеДанныеФайла)
	
	Если ФорматФайлаОбмена="ХКФБ" тогда	
		ИмяВременногоФайла = ПолучитьИмяВременногоФайла("csv");
	Иначе 
		ИмяВременногоФайла = ПолучитьИмяВременногоФайла("txt");
	КонецЕсли;
	
	//ФайлВыгрузки = Новый ЗаписьТекста(ИмяФайла,?(Кодировка=2,КодировкаТекста.Системная,КодировкаТекста.UTF8));
	ФайлВыгрузки = Новый ЗаписьТекста(ИмяВременногоФайла,КодировкаТекста.Системная);
	
	Если ФорматФайлаОбмена="ХКФБ" тогда	
		//ПерваяСтрока = Формат(ТекущаяДата(),"ДФ=гг")+Формат(ТекущаяДата(),"ДФ=ММ")+Формат(ТекущаяДата(),"ДФ=дд");
	Иначе 
		ЗП = ТаблицаСотрудников[0].Документ.ЗарплатныйПроект;
		ПерваяСтрока =СокрЛП(ЗП.РасчетныйСчет)
		+ "#"+СокрЛП(?(ЗП.Валюта.Наименование="RUB","RUR",ЗП.Валюта.Наименование))
		+ "#"+Формат(ТаблицаСотрудников[0].ДатаДокумента,"ДФ=dd/MM/yy")
		+ "#"+СокрЛП(?(ЗП.Валюта.Наименование="RUB",ЭтотОбъект.НачальныйНомерФайла,ЗП.Валюта.Код))
		+ "#"+Формат(ТаблицаСотрудников[0].Документ.СуммаПоДокументу,"ЧДЦ=2; ЧРД=.; ЧГ=0");
		ФайлВыгрузки.ЗаписатьСтроку(ПерваяСтрока);
	КонецЕсли;
	
	Для Каждого СтрСотрудника Из ТаблицаСотрудников Цикл
		Фамилия="";
		Имя="";
		Отчество="";
		ПолучитьФИОФизЛица(СтрСотрудника.ФизическоеЛицо,Фамилия,Имя,Отчество);
		Если ФорматФайлаОбмена="ППФ" Тогда
			СтрокаВФайл=СокрЛП(СтрСотрудника.НомерЛицевогоСчета)+?(ЗП.Наименование = "Citibank","##","#0#")+Фамилия+"#"+Формат(СтрСотрудника.СуммаКВыплате,"ЧДЦ=2; ЧРД=.; ЧГ=0");
		ИначеЕсли ФорматФайлаОбмена="ХКФБ" Тогда
			СтрокаВФайл=СокрЛП(Строка(СтрСотрудника.НомерЛицевогоСчета))+";"+Фамилия+";"+Имя+";"+Отчество+";"+Формат(СтрСотрудника.СуммаКВыплате,"ЧДЦ=2; ЧРД=.; ЧГ=0");
		КонецЕсли;
		ФайлВыгрузки.ЗаписатьСтроку(СтрокаВФайл);
	КонецЦикла;
	ФайлВыгрузки.Закрыть();
		
	ДвоичныеДанныеФайла = Новый ДвоичныеДанные(ИмяВременногоФайла);
	АдресФайла = ПоместитьВоВременноеХранилище(ДвоичныеДанныеФайла);
	
	УдалитьФайлы(ИмяВременногоФайла);
	
КонецПроцедуры

Процедура ПолучитьФИОФизЛица(ФизическоеЛицо, Фамилия, Имя, Отчество)
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	               |	ФИОФизическихЛицСрезПоследних.Фамилия,
	               |	ФИОФизическихЛицСрезПоследних.Имя,
	               |	ФИОФизическихЛицСрезПоследних.Отчество
	               |ИЗ
	               |	РегистрСведений.ФИОФизическихЛиц.СрезПоследних(&дата, ) КАК ФИОФизическихЛицСрезПоследних
	               |ГДЕ
	               |	ФИОФизическихЛицСрезПоследних.ФизическоеЛицо = &ФизическоеЛицо";
	Запрос.УстановитьПараметр("дата",ТекущаяДата());				   
	Запрос.УстановитьПараметр("ФизическоеЛицо",ФизическоеЛицо);
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Если Выборка.Следующий() Тогда 
		Фамилия = Выборка.Фамилия;
		Имя = Выборка.Имя;
		Отчество = Выборка.Отчество;
	КонецЕсли;
	
КонецПроцедуры
/////////////////////////////////////////////////////

