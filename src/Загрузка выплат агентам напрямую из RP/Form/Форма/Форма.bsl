
#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура ВыполнитьЗагрузку(Команда)
	
	ВыполнитьЗагрузкуНаСервере();
	
КонецПроцедуры

&НаКлиенте
Процедура СоздатьДокументы(Команда)
	СписокСозданныхДокументов.Очистить();
	Если Объект.Выплаты.Количество() > 0 Тогда
		СформироватьНачисленияНаСервере();
	Иначе
		Сообщение = Новый СообщениеПользователю;
		Сообщение.Текст = НСтр("ru = 'Нет данных для формирования документов'");
		Сообщение.Сообщить(); 
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ПерезагрузитьВыплатыПриИзменении(Элемент)
	Если ПерезагрузитьВыплаты Тогда
		ТаблицаЗагрузок.Очистить();
		ПерезагрузитьВыплатыПриИзмененииНаСервере();
		Элементы.ДатаЗагрузок.Видимость = Истина;
	Иначе
		Элементы.ДатаЗагрузок.Видимость = Ложь;
	КонецЕсли;
КонецПроцедуры
#КонецОбласти 

#Область СлужебныеПроцедурыИФункции

&НаСервере
Функция ОбъектОбработки()
	
	Возврат РеквизитФормыВЗначение("Объект");
	
КонецФункции // ОбъектОбработки()

&НаСервере
Процедура ВыполнитьЗагрузкуНаСервере()
	
	Соединение = ППФ_Сервер.УстановитьСоединение("RP1");
	Если Соединение <> Неопределено Тогда
		
		Если НЕ ПерезагрузитьВыплаты Тогда
			НачальныйИндекс = ПолучитьЗначениеПоследнейЗаписи();
		Иначе
			Отбор = Новый Структура;
			Отбор.Вставить("ДатаЗагрузки",ДатаЗагрузки);
			СтрТаблицаЗагрузок = ТаблицаЗагрузок.НайтиСтроки(Отбор)[0];
			НачальныйИндекс = СтрТаблицаЗагрузок.Индекс;
			ИндексПоследнейДляЗагрузкиЗаписи = СтрТаблицаЗагрузок.ИндексПоследнейДляЗагрузкиЗаписи;
		КонецЕсли;
		
		НачисленияАгентов = ППФ_Сервер.RP1_ПолучитьРезультатЗапроса("EXEC p_commission_1c @last_id = "+Формат(НачальныйИндекс,"ЧГ="), Соединение);
		Если ТипЗнч(НачисленияАгентов) = Тип("ТаблицаЗначений") Тогда
			
			Объект.Выплаты.Очистить();
			
			МассивКодовАгентов = ОбщегоНазначения.ВыгрузитьКолонку(НачисленияАгентов,"agent_code",Истина);
			ПолучитьТаблицуАгентов(МассивКодовАгентов);	
			
			ПолучитьТаблицуНачислений();
			
			ВидСтрахования0 = ПолучитьВидыСтрахования("0");
			ВидСтрахования1 = ПолучитьВидыСтрахования("1");
			ВидСтрахования2 = ПолучитьВидыСтрахования("2");
			ВидСтрахования3 = ПолучитьВидыСтрахования("3");
			ВидСтрахования4 = ПолучитьВидыСтрахования("4");
			ВидСтрахования5 = ПолучитьВидыСтрахования("5");
			ВидСтрахования6 = ПолучитьВидыСтрахования("6");
			
			Для Каждого СтрокаДанных Из НачисленияАгентов Цикл 
				
				Если ПерезагрузитьВыплаты Тогда
					Если СтрокаДанных.id > ИндексПоследнейДляЗагрузкиЗаписи Тогда
						Прервать;
					КонецЕсли;
				КонецЕсли;
				
				НоваяСтрока = Объект.Выплаты.Добавить();
				НоваяСтрока.id 						= СтрокаДанных.id;
				НоваяСтрока.ТабельныйНомерАгента 	= СтрЗаменить(СтрокаДанных.agent_code, Символ(34), "");
				НоваяСтрока.ВидРасчетаКод 			= СтрокаДанных.oper_code;				
				НоваяСтрока.ДатаВыплатыВФайле 		= СтрокаДанных.exp_date; 
				НоваяСтрока.СуммаВыплаты  			= СтрокаДанных.commission; 
				НоваяСтрока.ВидСтрахованияКод		= СтрокаДанных.d2;
				НоваяСтрока.МесяцВыплаты 			= НачалоМесяца(Объект.ДатаВыплаты);
				НоваяСтрока.КаналаПродажКод			= СтрокаДанных.tdc_id;
				
				Если ТаблицаАгентов <> Неопределено И Не ПустаяСтрока(НоваяСтрока.ТабельныйНомерАгента) Тогда
					Если ТаблицаАгентов.Количество() > 0 Тогда
						НайденныйСотрудник = ТаблицаАгентов.НайтиСтроки(Новый Структура("Код", НоваяСтрока.ТабельныйНомерАгента));
						Если НайденныйСотрудник <> Неопределено Тогда
							Если НайденныйСотрудник.Количество() > 0 Тогда
								НоваяСтрока.Сотрудник = НайденныйСотрудник[0].Ссылка;		
							КонецЕсли;
						КонецЕсли;
					КонецЕсли;
				КонецЕсли;
				
				Если ТаблицаНачислений <> Неопределено И Не ПустаяСтрока(НоваяСтрока.ВидРасчетаКод) Тогда
					Если ТаблицаНачислений.Количество() > 0 Тогда
						
						КодВидаРасчета = "RP1_" + СокрЛП(НоваяСтрока.ВидРасчетаКод);	
						
						НайденноеНачисление = ТаблицаНачислений.НайтиСтроки(Новый Структура("Код", КодВидаРасчета));
						Если НайденноеНачисление <> Неопределено Тогда
							Если НайденноеНачисление.Количество() > 0 Тогда
								НоваяСтрока.ВидРасчета = НайденноеНачисление[0].Ссылка;		
							КонецЕсли;
						КонецЕсли;
					КонецЕсли;
				КонецЕсли;
				
				Если Не ПустаяСтрока(НоваяСтрока.ВидСтрахованияКод) Тогда
					Если НоваяСтрока.ВидСтрахованияКод = "0" Тогда
						НоваяСтрока.ВидСтрахования = ВидСтрахования0;
					ИначеЕсли НоваяСтрока.ВидСтрахованияКод = "1" Тогда
						НоваяСтрока.ВидСтрахования = ВидСтрахования1;
					ИначеЕсли НоваяСтрока.ВидСтрахованияКод = "2" Тогда
						НоваяСтрока.ВидСтрахования = ВидСтрахования2;
					ИначеЕсли НоваяСтрока.ВидСтрахованияКод = "3" Тогда
						НоваяСтрока.ВидСтрахования = ВидСтрахования3;
					ИначеЕсли НоваяСтрока.ВидСтрахованияКод = "4" Тогда
						НоваяСтрока.ВидСтрахования = ВидСтрахования4;
					ИначеЕсли НоваяСтрока.ВидСтрахованияКод = "5" Тогда
						НоваяСтрока.ВидСтрахования = ВидСтрахования5;						
					ИначеЕсли НоваяСтрока.ВидСтрахованияКод = "6" Тогда
						НоваяСтрока.ВидСтрахования = ВидСтрахования6;				
					КонецЕсли;					
				КонецЕсли;	
				
				Если ЗначениеЗаполнено(НоваяСтрока.КаналаПродажКод) Тогда 
					НоваяСтрока.КаналПродаж = Справочники.ППФ_КаналыПродаж.НайтиПоКоду(НоваяСтрока.КаналаПродажКод);
				КонецЕсли;  
				
			КонецЦикла; 
			
		КонецЕсли; 
	КонецЕсли;

	
КонецПроцедуры // ВыполнитьОбновлениеНаСервере()

&НаСервере
Процедура ПолучитьТаблицуАгентов(ОтборСписокКодов)
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	Сотрудники.Ссылка КАК Ссылка,
	|	Сотрудники.Код КАК Код
	|ИЗ
	|	Справочник.Сотрудники КАК Сотрудники
	|ГДЕ
	|	Сотрудники.ППФ_Агент
	|	И Сотрудники.Код В(&ОтборСписокКодов)";
	
	Запрос.УстановитьПараметр("ОтборСписокКодов",ОтборСписокКодов);
	Результат = Запрос.Выполнить();

	Если Не Результат.Пустой() Тогда
		Таблица = Результат.Выгрузить();
		Для Каждого СтрокаДанных Из Таблица Цикл
			НоваяСтрока = ТаблицаАгентов.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаДанных);
		КонецЦикла;
	КонецЕсли; 
КонецПроцедуры // ПолучитьТаблицуАгентов()

&НаСервере
Процедура ПолучитьТаблицуНачислений()
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	Начисления.Ссылка,
	|	Начисления.Код
	|ИЗ
	|	ПланВидовРасчета.Начисления КАК Начисления";
	
	Результат = Запрос.Выполнить();
	
	Если Не Результат.Пустой() Тогда
		Выгрузка = Результат.Выгрузить();
		
		ТабЗнч = Новый ТаблицаЗначений;
		ТабЗнч.Колонки.Добавить("Код", Новый ОписаниеТипов("Строка"));
		ТабЗнч.Колонки.Добавить("Ссылка");
		
		Для Каждого Строка Из Выгрузка Цикл
			НоваяСтрока = ТаблицаНачислений.Добавить();
			НоваяСтрока.Код = СокрЛП(Строка.Код);
			НоваяСтрока.Ссылка = Строка.Ссылка;
		КонецЦикла;
	КонецЕсли; 
КонецПроцедуры // ПолучитьТаблицуНачислений()

&НаСервере
Функция ПолучитьВидыСтрахования(Значение)
	Соответствие = Новый Соответствие;
	Соответствие.Вставить("0", Справочники.ППФ_Субконто.НайтиПоНаименованию("ZZZ")); 	
	Соответствие.Вставить("1", Справочники.ППФ_Субконто.НайтиПоНаименованию("1-Страхование жизни"));
	Соответствие.Вставить("2", Справочники.ППФ_Субконто.НайтиПоНаименованию("2-Пенсионное страхование"));
	Соответствие.Вставить("3", Справочники.ППФ_Субконто.НайтиПоНаименованию("3-Страхование жизни с условием периодических страховых выплат (ренты,аннуитентов) и (или) с участием"));
    Соответствие.Вставить("4", Справочники.ППФ_Субконто.НайтиПоНаименованию("4-Страхование от несчастных случаев и болезней"));
	Соответствие.Вставить("5", Справочники.ППФ_Субконто.НайтиПоНаименованию("5-медицинское страхование"));
	Соответствие.Вставить("6", Справочники.ППФ_Субконто.НайтиПоНаименованию("4-Страхование от несчастных случаев и болезней"));

	Возврат Соответствие.Получить(Значение);
КонецФункции // ПолучитьВидыСтрахования()


&НаСервере
Процедура СформироватьНачисленияНаСервере()
	
	// Проверка на незаполненного сотрудника
	Сотрудники = Объект.Выплаты.Выгрузить().ВыгрузитьКолонку("Сотрудник");
	НайденныйПустойСотрудник = Сотрудники.Найти(Справочники.Сотрудники.ПустаяСсылка());
	Если НайденныйПустойСотрудник <> Неопределено Тогда 
		Сообщить("Не все сотрудники заполнены! Строка " + (НайденныйПустойСотрудник+1));
		Возврат;
	КонецЕсли;
	
	ПодразделениеАгенты = Константы.ППФ_Подразделение_Агенты.Получить();
	ВидУчетаВремени = Справочники.ВидыИспользованияРабочегоВремени.РабочееВремя;
	Организация = Справочники.Организации.ОрганизацияПоУмолчанию();
	Ответственный = ПараметрыСеанса.ТекущийПользователь;
	ПорядокВыплаты = Перечисления.ХарактерВыплатыЗарплаты.Межрасчет;
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	Выплаты.id КАК id,
	|	Выплаты.МесяцВыплаты КАК МесяцВыплаты,
	|	Выплаты.ДатаВыплатыВФайле КАК ДатаВыплатыВФайле,
	|	Выплаты.ТабельныйНомерАгента КАК ТабельныйНомерАгента,
	|	Выплаты.Сотрудник КАК Сотрудник,
	|	Выплаты.ВидРасчетаКод КАК ВидРасчетаКод,
	|	Выплаты.ВидРасчета КАК ВидРасчета,
	|	Выплаты.СуммаВыплаты КАК СуммаВыплаты,
	|	Выплаты.ВидСтрахованияКод КАК ВидСтрахованияКод,
	|	Выплаты.ВидСтрахования КАК ВидСтрахования,
	|	Выплаты.КаналаПродажКод КАК КаналаПродажКод,
	|	Выплаты.КаналПродаж КАК КаналПродаж,
	|	ВЫБОР
	|		КОГДА Выплаты.СуммаВыплаты < 0
	|			ТОГДА 1
	|		ИНАЧЕ 2
	|	КОНЕЦ КАК ПолеПорядка
	|ПОМЕСТИТЬ ВТ
	|ИЗ
	|	&Выплаты КАК Выплаты
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТ.id КАК id,
	|	ВТ.МесяцВыплаты КАК МесяцВыплаты,
	|	ВТ.ДатаВыплатыВФайле КАК ДатаВыплатыВФайле,
	|	ВТ.ТабельныйНомерАгента КАК ТабельныйНомерАгента,
	|	ВТ.Сотрудник КАК Сотрудник,
	|	ВТ.ВидРасчетаКод КАК ВидРасчетаКод,
	|	ВТ.ВидРасчета КАК ВидРасчета,
	|	ВТ.СуммаВыплаты КАК СуммаВыплаты,
	|	ВТ.ВидСтрахованияКод КАК ВидСтрахованияКод,
	|	ВТ.ВидСтрахования КАК ВидСтрахования,
	|	ВТ.КаналаПродажКод КАК КаналаПродажКод,
	|	ВТ.КаналПродаж КАК КаналПродаж,
	|	ВТ.Сотрудник.ФизическоеЛицо КАК ФизЛицо,
	|	ВТ.Сотрудник.ФизическоеЛицо.ФИО КАК ФИО,
	|	ВТ.ПолеПорядка КАК ПолеПорядка
	|ИЗ
	|	ВТ КАК ВТ
	|
	|УПОРЯДОЧИТЬ ПО
	|	ПолеПорядка,
	|	ВидРасчета,
	|	ФИО
	|ИТОГИ ПО
	|	ПолеПорядка,
	|	ВидРасчета";
	
	Запрос.УстановитьПараметр("Выплаты",ПолучитьТЗВыплаты());
	УрПолеПорядка = Запрос.Выполнить().Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	
	НачатьТранзакцию();
	
	Время = 60*60*11; // 11 00
	
	Пока УрПолеПорядка.Следующий() Цикл
		УрВидРасчета = УрПолеПорядка.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
		Время = Время + 60*60; // 12 00 и 13 00
		
		Пока УрВидРасчета.Следующий() Цикл
			
			НовыйДокумент = Документы.РазовоеНачисление.СоздатьДокумент();
			НовыйДокумент.Организация				= Организация;
			//НовыйДокумент.ДатаНачала 				= НачалоМесяца(Объект.ДатаВыплаты);
			//НовыйДокумент.ДатаОкончания 			= КонецМесяца(Объект.ДатаВыплаты);
			НовыйДокумент.ДатаНачала 				= Объект.ДатаВыплаты;
			НовыйДокумент.ДатаОкончания 			= Объект.ДатаВыплаты;
			НовыйДокумент.МесяцНачисления 			= НовыйДокумент.ДатаНачала;
			НовыйДокумент.ПланируемаяДатаВыплаты 	= Объект.ДатаВыплаты;
			НовыйДокумент.Начисление 				= УрВидРасчета.ВидРасчета;
			НовыйДокумент.Комментарий 				= "Создан автоматически при загрузке информации о комиссионных вознаграждениях за " + Формат(Объект.ДатаВыплаты,"ДФ='MMMM yyyy'");
			НовыйДокумент.Ответственный 			= Ответственный;
			НовыйДокумент.Организация 				= Организация;
			НовыйДокумент.Дата 						= Объект.ДатаВыплаты + Время;
			НовыйДокумент.ПорядокВыплаты 			= ПорядокВыплаты;
			НовыйДокумент.РассчитыватьУдержания		= Истина;
			НовыйДокумент.Подразделение				= ПодразделениеАгенты;
			
			Выборка = УрВидРасчета.Выбрать();
			МассивФизическихЛиц = Новый Массив;
			Пока Выборка.Следующий() Цикл
				
				НоваяСтрока = НовыйДокумент.Начисления.Добавить();
				НоваяСтрока.Сотрудник 						= Выборка.Сотрудник;
				//МассивФизическихЛиц.Добавить(НоваяСтрока.Сотрудник.ФизическоеЛицо);
				МассивФизическихЛиц.Добавить(Выборка.ФизЛицо);
				НоваяСтрока.Результат 						= Выборка.СуммаВыплаты;
				НоваяСтрока.ДатаНачала 						= НовыйДокумент.ДатаНачала;
				НоваяСтрока.ДатаОкончания 					= НовыйДокумент.ДатаОкончания;
				НоваяСтрока.ВидУчетаВремени 				= ВидУчетаВремени;
				НоваяСтрока.ГрафикРаботы 					= Выборка.Сотрудник;
				НоваяСтрока.ГрафикРаботыНорма 				= Выборка.Сотрудник;
				НоваяСтрока.ПериодРегистрацииВремени 		= НовыйДокумент.МесяцНачисления;
				НоваяСтрока.ИдентификаторСтрокиВидаРасчета 	= 1;
				НоваяСтрока.ПериодДействия					= НовыйДокумент.ДатаНачала; 
				НоваяСтрока.Подразделение					= ПодразделениеАгенты;
				
			КонецЦикла;
			
			Отбор = СотрудникиФизическиеЛицаОтбор(НовыйДокумент.Начисления.ВыгрузитьКолонку("Сотрудник"), НовыйДокумент);
			
			МенеджерРасчета = РасчетЗарплатыРасширенный.СоздатьМенеджерРасчета(НовыйДокумент.МесяцНачисления, НовыйДокумент.Организация);
			ЗаполнитьНастройкиМенеджераРасчета(МассивФизическихЛиц, МенеджерРасчета, НовыйДокумент.Ссылка, НовыйДокумент, НовыйДокумент.ПланируемаяДатаВыплаты );
			РасчетЗарплатыРасширенныйФормы.ЗаполнитьИсточникиИзмененийМенеджераРасчета(МенеджерРасчета, ИзмененныеДанные);
			
			НачальныеПозицииВставки = Новый Структура;
			ДанныеФормыВДанныеМенеджераРасчета(МенеджерРасчета, НовыйДокумент, Отбор, НачальныеПозицииВставки);
			ЗаполнитьСтрокиУдержаний(НовыйДокумент.Начисления.ВыгрузитьКолонку("Сотрудник"), МенеджерРасчета, НовыйДокумент.МесяцНачисления);
			МенеджерРасчета.РассчитатьЗарплату();
			
			ТаблицаНДФЛ = НовыйДокумент.НДФЛ;
			ТаблицаНДФЛ.Загрузить(МенеджерРасчета.Зарплата.НДФЛ);
			
			ТаблицаНачисления = НовыйДокумент.Начисления;
			ТаблицаНачисления.Загрузить(МенеджерРасчета.Зарплата.Начисления);
			
			ТаблицаУдержания = НовыйДокумент.Удержания;
			ТаблицаУдержания.Загрузить(МенеджерРасчета.Зарплата.Удержания);
			
			Попытка
				НовыйДокумент.Записать(РежимЗаписиДокумента.Проведение);
				Сообщить("Создан документ " + НовыйДокумент.Ссылка);
				СписокСозданныхДокументов.Добавить(НовыйДокумент.Ссылка);
			Исключение
				Сообщить(ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
				ОтменитьТранзакцию();
			КонецПопытки;
			
		КонецЦикла;
	КонецЦикла;
	
	ЗаполнитьРегистрСоответствияВидовСтрахованияНаСервере();
	
	ЗафиксироватьТранзакцию();
	//ОтменитьТранзакцию();
	
КонецПроцедуры  

&НаСервере
Процедура ДанныеФормыВДанныеМенеджераРасчета(МенеджерРасчета, Документ, Отбор = Неопределено, НачальныеПозицииВставки = Неопределено)
	
	//Начисления
	РасчетЗарплатыРасширенныйФормы.НачисленияВДанныеМенеджераРасчетаВидНачисленияВШапке(Документ.Начисления, МенеджерРасчета, Документ.Организация, Документ.Начисление, Отбор, НачальныеПозицииВставки);
	
	//НачисленияПерерасчет
	РасчетЗарплатыРасширенныйФормы.НачисленияПерерасчетВДанныеМенеджераРасчета(Документ.НачисленияПерерасчет, МенеджерРасчета, Документ.Организация, Отбор, НачальныеПозицииВставки);
	
	//Удержания
	РасчетЗарплатыРасширенныйФормы.УдержанияВДанныеМенеджераРасчета(Документ.Удержания, МенеджерРасчета, Отбор, НачальныеПозицииВставки);
	
	//КорректировкиВыплаты
	РасчетЗарплатыРасширенныйФормы.КорректировкиВыплатыВДанныеМенеджераРасчета(Документ.КорректировкиВыплаты, МенеджерРасчета, Отбор, НачальныеПозицииВставки);
	
	//НДФЛ
	РасчетЗарплатыРасширенныйФормы.НДФЛВДанныеМенеджераРасчета(Документ.НДФЛ, Документ.ПримененныеВычетыНаДетейИИмущественные, МенеджерРасчета, Отбор, НачальныеПозицииВставки);
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьНастройкиМенеджераРасчета(ФизическиеЛица, МенеджерРасчета, Ссылка, ДокументОбъект, ПланируемаяДатаВыплаты)
	
	МенеджерРасчета.ИсключаемыйРегистратор = Ссылка;
	МенеджерРасчета.НастройкиРасчета.РассчитыватьНачисления = Истина;
	МенеджерРасчета.НастройкиРасчета.РассчитыватьУдержания = Истина;
	МенеджерРасчета.НастройкиРасчета.РассчитыватьНДФЛ = Истина;
	МенеджерРасчета.НастройкиРасчета.РассчитыватьКорректировкиВыплаты = Истина;
	МенеджерРасчета.НастройкиРасчета.СохранятьИсправления = Истина;
	
	МенеджерРасчета.НастройкиУдержаний.РассчитыватьТолькоПоТекущемуДокументу = Истина;
	
	МенеджерРасчета.НастройкиНДФЛ.Сотрудники = ФизическиеЛица;
	МенеджерРасчета.НастройкиНДФЛ.ДатаВыплаты = ПланируемаяДатаВыплаты;
	МенеджерРасчета.НастройкиНДФЛ.ОкончательныйРасчет = Ложь;
	
	МенеджерРасчета.НастройкиБухучета.НастройкиБухучетаДокумента = Документы.РазовоеНачисление.ДанныеДляБухучетаЗарплатыПервичныхДокументов(ДокументОбъект)["ТаблицаБухучетЗарплаты"];
	
КонецПроцедуры

&НаСервере
Функция СотрудникиФизическиеЛицаОтбор(Сотрудники, Документ)
	
	СотрудникиДокумента = Новый Массив;
	
	ОбщегоНазначенияКлиентСервер.ДополнитьМассив(СотрудникиДокумента, ОбщегоНазначения.ВыгрузитьКолонку(Документ.Начисления, "Сотрудник"));
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Сотрудники", Сотрудники);
	Запрос.УстановитьПараметр("СотрудникиДокумента", СотрудникиДокумента);
	
	Если ТипЗнч(Сотрудники) = Тип("СправочникСсылка.ФизическиеЛица")
		Или ТипЗнч(Сотрудники) = Тип("Массив") И Сотрудники.Количество() > 0 И ТипЗнч(Сотрудники[0]) = Тип("СправочникСсылка.ФизическиеЛица") Тогда 
		
		Если ТипЗнч(Сотрудники) = Тип("СправочникСсылка.ФизическиеЛица") Тогда
			ФизическиеЛица = ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(Сотрудники);
		Иначе
			ФизическиеЛица = Сотрудники;
		КонецЕсли;
		
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	Сотрудники.Ссылка КАК Сотрудник,
		|	Сотрудники.ФизическоеЛицо КАК ФизическоеЛицо
		|ИЗ
		|	Справочник.Сотрудники КАК Сотрудники
		|ГДЕ
		|	Сотрудники.Ссылка В(&СотрудникиДокумента)
		|	И Сотрудники.ФизическоеЛицо В(&Сотрудники)";
		
		СотрудникиФизическиеЛица = Запрос.Выполнить().Выбрать();
		
	Иначе
		
		Запрос.Текст = 
		"ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	Сотрудники.ФизическоеЛицо
		|ПОМЕСТИТЬ ВТФизическиеЛица
		|ИЗ
		|	Справочник.Сотрудники КАК Сотрудники
		|ГДЕ
		|	Сотрудники.Ссылка В(&Сотрудники)
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	Сотрудники.Ссылка КАК Сотрудник,
		|	ФизическиеЛица.ФизическоеЛицо КАК ФизическоеЛицо
		|ИЗ
		|	Справочник.Сотрудники КАК Сотрудники
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТФизическиеЛица КАК ФизическиеЛица
		|		ПО Сотрудники.ФизическоеЛицо = ФизическиеЛица.ФизическоеЛицо
		|			И (Сотрудники.Ссылка В (&СотрудникиДокумента))
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ВТФизическиеЛица.ФизическоеЛицо
		|ИЗ
		|	ВТФизическиеЛица КАК ВТФизическиеЛица";
		
		Результат = Запрос.ВыполнитьПакет();
		ФизическиеЛица = Результат[2].Выгрузить().ВыгрузитьКолонку("ФизическоеЛицо");
		СотрудникиФизическиеЛица = Результат[1].Выбрать();
		
	КонецЕсли;
	
	Отбор = Новый Структура("СотрудникиКРасчету, ФизическиеЛицаСотрудников, ФизическиеЛицаОтбор, ФизическиеЛица");
	Отбор.ФизическиеЛица = ФизическиеЛица;
	Отбор.ФизическиеЛицаСотрудников = Новый Соответствие;
	Отбор.ФизическиеЛицаОтбор = Новый Соответствие;
	Отбор.СотрудникиКРасчету = Новый Массив;
	
	Пока СотрудникиФизическиеЛица.Следующий() Цикл
		Отбор.ФизическиеЛицаСотрудников.Вставить(СотрудникиФизическиеЛица.Сотрудник, СотрудникиФизическиеЛица.ФизическоеЛицо);
		Отбор.СотрудникиКРасчету.Добавить(СотрудникиФизическиеЛица.Сотрудник);
	КонецЦикла;
	
	Для каждого ФизическоеЛицо Из ФизическиеЛица Цикл
		Отбор.ФизическиеЛицаОтбор.Вставить(ФизическоеЛицо, Истина)
	КонецЦикла; 
	
	Возврат Отбор;
	
КонецФункции

&НаСервере
Процедура ЗаполнитьСтрокиУдержаний(Сотрудники, МенеджерРасчета, МесяцНачисления)
	
	// МенеджерРасчета.НастройкиРасчета.СохранятьИсправления = СохранятьИсправления;
	МенеджерРасчета.ЗаполнитьУдержанияСотрудниковЗаПериод(Сотрудники, МесяцНачисления, КонецМесяца(МесяцНачисления));
		
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьРегистрСоответствияВидовСтрахованияНаСервере()
	
	НаборЗаписей = РегистрыСведений.ППФ_СоответствиеВидовСтрахования.СоздатьНаборЗаписей();	
	НаборЗаписей.Отбор.ДатаВыплаты.Установить(Объект.ДатаВыплаты);
	НаборЗаписей.Прочитать();
	
	НаборЗаписей.Очистить();
	
	Для Каждого Строка Из Объект.Выплаты Цикл
		Запись = НаборЗаписей.Добавить();
		Запись.Активность = Истина;
		Запись.ВидСтрахования = Строка.ВидСтрахования;
		Запись.ВР = Строка.ВидРасчета;
		Запись.Агент = Строка.Сотрудник;
		Запись.ПериодНачисления = НачалоМесяца(Объект.ДатаВыплаты);
		Запись.КаналПродаж = Строка.КаналПродаж;
		Запись.id = Строка.id;
		Запись.Сумма = Строка.СуммаВыплаты;
		Запись.ДатаВыплаты = Объект.ДатаВыплаты;
	КонецЦикла;
	
	НаборЗаписей.Записать(Истина);
	
КонецПроцедуры

Функция ПолучитьЗначениеПоследнейЗаписи()
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	ЕСТЬNULL(ППФ_СоответствиеВидовСтрахования.id, 0) КАК id
	|ИЗ
	|	РегистрСведений.ППФ_СоответствиеВидовСтрахования КАК ППФ_СоответствиеВидовСтрахования
	|
	|УПОРЯДОЧИТЬ ПО
	|	id УБЫВ";
	Выборка = Запрос.Выполнить().Выбрать();
	
	Если Выборка.Следующий() Тогда 
		Возврат Выборка.id;
	Иначе 
		Возврат 0;
	КонецЕсли;
					   
КонецФункции

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	Объект.ДатаВыплаты = ТекущаяДата();
	Если РольДоступна("АдминистраторСистемы") Тогда
		Элементы.ПерезагрузитьВыплаты.Видимость = Истина;
	КонецЕсли;
КонецПроцедуры

&НаСервере
Процедура ПерезагрузитьВыплатыПриИзмененииНаСервере()
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ РАЗЛИЧНЫЕ ПЕРВЫЕ 9
	|	ППФ_СоответствиеВидовСтрахования.ДатаВыплаты КАК ДатаВыплаты,
	|	МИНИМУМ(ППФ_СоответствиеВидовСтрахования.id) КАК ИндексЗаписи
	|ИЗ
	|	РегистрСведений.ППФ_СоответствиеВидовСтрахования КАК ППФ_СоответствиеВидовСтрахования
	|
	|СГРУППИРОВАТЬ ПО
	|	ППФ_СоответствиеВидовСтрахования.ДатаВыплаты
	|
	|УПОРЯДОЧИТЬ ПО
	|	ДатаВыплаты УБЫВ";
	Выборка = Запрос.Выполнить().Выбрать();
	
	тСписокВыбора = Элементы.ДатаЗагрузок.СписокВыбора;
	тСписокВыбора.Очистить();
	ПредИндекс = ПолучитьЗначениеПоследнейЗаписи();
	Пока Выборка.Следующий() Цикл
		НовСтр = ТаблицаЗагрузок.Добавить();
		НовСтр.ДатаЗагрузки = Выборка.ДатаВыплаты;
		НовСтр.Индекс = Выборка.ИндексЗаписи - 1;
		НовСтр.ИндексПоследнейДляЗагрузкиЗаписи = ПредИндекс;
		ПредИндекс = НовСтр.Индекс;
		тСписокВыбора.Добавить(Выборка.ДатаВыплаты, Формат(Выборка.ДатаВыплаты,"ДЛФ=DD") + " " + Выборка.ИндексЗаписи + " - " + НовСтр.ИндексПоследнейДляЗагрузкиЗаписи);
	КонецЦикла;
	
КонецПроцедуры


&НаСервере
Функция ПолучитьТЗВыплаты()
	
	ТЗВыплаты = Новый ТаблицаЗначений;
	ТЗВыплаты.Колонки.Добавить("id",Новый ОписаниеТипов("Число"));
	ТЗВыплаты.Колонки.Добавить("МесяцВыплаты",Новый ОписаниеТипов("Дата"));
	ТЗВыплаты.Колонки.Добавить("ДатаВыплатыВФайле",Новый ОписаниеТипов("Дата"));
	ТЗВыплаты.Колонки.Добавить("ТабельныйНомерАгента",Новый ОписаниеТипов("Строка"));
	ТЗВыплаты.Колонки.Добавить("Сотрудник",Новый ОписаниеТипов("СправочникСсылка.Сотрудники"));
	ТЗВыплаты.Колонки.Добавить("ВидРасчетаКод",Новый ОписаниеТипов("Строка"));
	ТЗВыплаты.Колонки.Добавить("ВидРасчета",Новый ОписаниеТипов("ПланВидовРасчетаСсылка.Начисления"));
	ТЗВыплаты.Колонки.Добавить("СуммаВыплаты",Новый ОписаниеТипов("Число"));
	ТЗВыплаты.Колонки.Добавить("ВидСтрахованияКод",Новый ОписаниеТипов("Строка"));
	ТЗВыплаты.Колонки.Добавить("ВидСтрахования",Новый ОписаниеТипов("СправочникСсылка.ППФ_Субконто"));
	ТЗВыплаты.Колонки.Добавить("КаналаПродажКод",Новый ОписаниеТипов("Число"));
	ТЗВыплаты.Колонки.Добавить("КаналПродаж",Новый ОписаниеТипов("СправочникСсылка.ППФ_КаналыПродаж"));
	
	Для Каждого Стр Из Объект.Выплаты Цикл
		НовСтр = ТЗВыплаты.Добавить();
		ЗаполнитьЗначенияСвойств(НовСтр,Стр);
	КонецЦикла;
	
	Возврат ТЗВыплаты;
	
КонецФункции
#КонецОбласти 